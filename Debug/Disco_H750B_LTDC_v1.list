
Disco_H750B_LTDC_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009024  90000298  90000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000388b0  900092bc  900092bc  000192bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  90041b6c  90041b6c  00051b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  90041b74  90041b74  00051b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90041b78  90041b78  00051b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  90041b7c  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000330  20000084  90041c00  00060084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003b4  90041c00  000603b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00060084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a4c5  00000000  00000000  000600b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d5c  00000000  00000000  0007a577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012c8  00000000  00000000  0007d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000011c0  00000000  00000000  0007e5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b428  00000000  00000000  0007f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001841c  00000000  00000000  000bab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017b903  00000000  00000000  000d2fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024e8a7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000056b8  00000000  00000000  0024e8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

90000298 <__do_global_dtors_aux>:
90000298:	b510      	push	{r4, lr}
9000029a:	4c05      	ldr	r4, [pc, #20]	; (900002b0 <__do_global_dtors_aux+0x18>)
9000029c:	7823      	ldrb	r3, [r4, #0]
9000029e:	b933      	cbnz	r3, 900002ae <__do_global_dtors_aux+0x16>
900002a0:	4b04      	ldr	r3, [pc, #16]	; (900002b4 <__do_global_dtors_aux+0x1c>)
900002a2:	b113      	cbz	r3, 900002aa <__do_global_dtors_aux+0x12>
900002a4:	4804      	ldr	r0, [pc, #16]	; (900002b8 <__do_global_dtors_aux+0x20>)
900002a6:	f3af 8000 	nop.w
900002aa:	2301      	movs	r3, #1
900002ac:	7023      	strb	r3, [r4, #0]
900002ae:	bd10      	pop	{r4, pc}
900002b0:	20000084 	.word	0x20000084
900002b4:	00000000 	.word	0x00000000
900002b8:	900092a4 	.word	0x900092a4

900002bc <frame_dummy>:
900002bc:	b508      	push	{r3, lr}
900002be:	4b03      	ldr	r3, [pc, #12]	; (900002cc <frame_dummy+0x10>)
900002c0:	b11b      	cbz	r3, 900002ca <frame_dummy+0xe>
900002c2:	4903      	ldr	r1, [pc, #12]	; (900002d0 <frame_dummy+0x14>)
900002c4:	4803      	ldr	r0, [pc, #12]	; (900002d4 <frame_dummy+0x18>)
900002c6:	f3af 8000 	nop.w
900002ca:	bd08      	pop	{r3, pc}
900002cc:	00000000 	.word	0x00000000
900002d0:	20000088 	.word	0x20000088
900002d4:	900092a4 	.word	0x900092a4

900002d8 <__aeabi_uldivmod>:
900002d8:	b953      	cbnz	r3, 900002f0 <__aeabi_uldivmod+0x18>
900002da:	b94a      	cbnz	r2, 900002f0 <__aeabi_uldivmod+0x18>
900002dc:	2900      	cmp	r1, #0
900002de:	bf08      	it	eq
900002e0:	2800      	cmpeq	r0, #0
900002e2:	bf1c      	itt	ne
900002e4:	f04f 31ff 	movne.w	r1, #4294967295
900002e8:	f04f 30ff 	movne.w	r0, #4294967295
900002ec:	f000 b974 	b.w	900005d8 <__aeabi_idiv0>
900002f0:	f1ad 0c08 	sub.w	ip, sp, #8
900002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900002f8:	f000 f806 	bl	90000308 <__udivmoddi4>
900002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
90000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000304:	b004      	add	sp, #16
90000306:	4770      	bx	lr

90000308 <__udivmoddi4>:
90000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000030c:	9d08      	ldr	r5, [sp, #32]
9000030e:	4604      	mov	r4, r0
90000310:	468e      	mov	lr, r1
90000312:	2b00      	cmp	r3, #0
90000314:	d14d      	bne.n	900003b2 <__udivmoddi4+0xaa>
90000316:	428a      	cmp	r2, r1
90000318:	4694      	mov	ip, r2
9000031a:	d969      	bls.n	900003f0 <__udivmoddi4+0xe8>
9000031c:	fab2 f282 	clz	r2, r2
90000320:	b152      	cbz	r2, 90000338 <__udivmoddi4+0x30>
90000322:	fa01 f302 	lsl.w	r3, r1, r2
90000326:	f1c2 0120 	rsb	r1, r2, #32
9000032a:	fa20 f101 	lsr.w	r1, r0, r1
9000032e:	fa0c fc02 	lsl.w	ip, ip, r2
90000332:	ea41 0e03 	orr.w	lr, r1, r3
90000336:	4094      	lsls	r4, r2
90000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
9000033c:	0c21      	lsrs	r1, r4, #16
9000033e:	fbbe f6f8 	udiv	r6, lr, r8
90000342:	fa1f f78c 	uxth.w	r7, ip
90000346:	fb08 e316 	mls	r3, r8, r6, lr
9000034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
9000034e:	fb06 f107 	mul.w	r1, r6, r7
90000352:	4299      	cmp	r1, r3
90000354:	d90a      	bls.n	9000036c <__udivmoddi4+0x64>
90000356:	eb1c 0303 	adds.w	r3, ip, r3
9000035a:	f106 30ff 	add.w	r0, r6, #4294967295
9000035e:	f080 811f 	bcs.w	900005a0 <__udivmoddi4+0x298>
90000362:	4299      	cmp	r1, r3
90000364:	f240 811c 	bls.w	900005a0 <__udivmoddi4+0x298>
90000368:	3e02      	subs	r6, #2
9000036a:	4463      	add	r3, ip
9000036c:	1a5b      	subs	r3, r3, r1
9000036e:	b2a4      	uxth	r4, r4
90000370:	fbb3 f0f8 	udiv	r0, r3, r8
90000374:	fb08 3310 	mls	r3, r8, r0, r3
90000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
9000037c:	fb00 f707 	mul.w	r7, r0, r7
90000380:	42a7      	cmp	r7, r4
90000382:	d90a      	bls.n	9000039a <__udivmoddi4+0x92>
90000384:	eb1c 0404 	adds.w	r4, ip, r4
90000388:	f100 33ff 	add.w	r3, r0, #4294967295
9000038c:	f080 810a 	bcs.w	900005a4 <__udivmoddi4+0x29c>
90000390:	42a7      	cmp	r7, r4
90000392:	f240 8107 	bls.w	900005a4 <__udivmoddi4+0x29c>
90000396:	4464      	add	r4, ip
90000398:	3802      	subs	r0, #2
9000039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
9000039e:	1be4      	subs	r4, r4, r7
900003a0:	2600      	movs	r6, #0
900003a2:	b11d      	cbz	r5, 900003ac <__udivmoddi4+0xa4>
900003a4:	40d4      	lsrs	r4, r2
900003a6:	2300      	movs	r3, #0
900003a8:	e9c5 4300 	strd	r4, r3, [r5]
900003ac:	4631      	mov	r1, r6
900003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900003b2:	428b      	cmp	r3, r1
900003b4:	d909      	bls.n	900003ca <__udivmoddi4+0xc2>
900003b6:	2d00      	cmp	r5, #0
900003b8:	f000 80ef 	beq.w	9000059a <__udivmoddi4+0x292>
900003bc:	2600      	movs	r6, #0
900003be:	e9c5 0100 	strd	r0, r1, [r5]
900003c2:	4630      	mov	r0, r6
900003c4:	4631      	mov	r1, r6
900003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900003ca:	fab3 f683 	clz	r6, r3
900003ce:	2e00      	cmp	r6, #0
900003d0:	d14a      	bne.n	90000468 <__udivmoddi4+0x160>
900003d2:	428b      	cmp	r3, r1
900003d4:	d302      	bcc.n	900003dc <__udivmoddi4+0xd4>
900003d6:	4282      	cmp	r2, r0
900003d8:	f200 80f9 	bhi.w	900005ce <__udivmoddi4+0x2c6>
900003dc:	1a84      	subs	r4, r0, r2
900003de:	eb61 0303 	sbc.w	r3, r1, r3
900003e2:	2001      	movs	r0, #1
900003e4:	469e      	mov	lr, r3
900003e6:	2d00      	cmp	r5, #0
900003e8:	d0e0      	beq.n	900003ac <__udivmoddi4+0xa4>
900003ea:	e9c5 4e00 	strd	r4, lr, [r5]
900003ee:	e7dd      	b.n	900003ac <__udivmoddi4+0xa4>
900003f0:	b902      	cbnz	r2, 900003f4 <__udivmoddi4+0xec>
900003f2:	deff      	udf	#255	; 0xff
900003f4:	fab2 f282 	clz	r2, r2
900003f8:	2a00      	cmp	r2, #0
900003fa:	f040 8092 	bne.w	90000522 <__udivmoddi4+0x21a>
900003fe:	eba1 010c 	sub.w	r1, r1, ip
90000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000406:	fa1f fe8c 	uxth.w	lr, ip
9000040a:	2601      	movs	r6, #1
9000040c:	0c20      	lsrs	r0, r4, #16
9000040e:	fbb1 f3f7 	udiv	r3, r1, r7
90000412:	fb07 1113 	mls	r1, r7, r3, r1
90000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
9000041a:	fb0e f003 	mul.w	r0, lr, r3
9000041e:	4288      	cmp	r0, r1
90000420:	d908      	bls.n	90000434 <__udivmoddi4+0x12c>
90000422:	eb1c 0101 	adds.w	r1, ip, r1
90000426:	f103 38ff 	add.w	r8, r3, #4294967295
9000042a:	d202      	bcs.n	90000432 <__udivmoddi4+0x12a>
9000042c:	4288      	cmp	r0, r1
9000042e:	f200 80cb 	bhi.w	900005c8 <__udivmoddi4+0x2c0>
90000432:	4643      	mov	r3, r8
90000434:	1a09      	subs	r1, r1, r0
90000436:	b2a4      	uxth	r4, r4
90000438:	fbb1 f0f7 	udiv	r0, r1, r7
9000043c:	fb07 1110 	mls	r1, r7, r0, r1
90000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
90000444:	fb0e fe00 	mul.w	lr, lr, r0
90000448:	45a6      	cmp	lr, r4
9000044a:	d908      	bls.n	9000045e <__udivmoddi4+0x156>
9000044c:	eb1c 0404 	adds.w	r4, ip, r4
90000450:	f100 31ff 	add.w	r1, r0, #4294967295
90000454:	d202      	bcs.n	9000045c <__udivmoddi4+0x154>
90000456:	45a6      	cmp	lr, r4
90000458:	f200 80bb 	bhi.w	900005d2 <__udivmoddi4+0x2ca>
9000045c:	4608      	mov	r0, r1
9000045e:	eba4 040e 	sub.w	r4, r4, lr
90000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
90000466:	e79c      	b.n	900003a2 <__udivmoddi4+0x9a>
90000468:	f1c6 0720 	rsb	r7, r6, #32
9000046c:	40b3      	lsls	r3, r6
9000046e:	fa22 fc07 	lsr.w	ip, r2, r7
90000472:	ea4c 0c03 	orr.w	ip, ip, r3
90000476:	fa20 f407 	lsr.w	r4, r0, r7
9000047a:	fa01 f306 	lsl.w	r3, r1, r6
9000047e:	431c      	orrs	r4, r3
90000480:	40f9      	lsrs	r1, r7
90000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
90000486:	fa00 f306 	lsl.w	r3, r0, r6
9000048a:	fbb1 f8f9 	udiv	r8, r1, r9
9000048e:	0c20      	lsrs	r0, r4, #16
90000490:	fa1f fe8c 	uxth.w	lr, ip
90000494:	fb09 1118 	mls	r1, r9, r8, r1
90000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
9000049c:	fb08 f00e 	mul.w	r0, r8, lr
900004a0:	4288      	cmp	r0, r1
900004a2:	fa02 f206 	lsl.w	r2, r2, r6
900004a6:	d90b      	bls.n	900004c0 <__udivmoddi4+0x1b8>
900004a8:	eb1c 0101 	adds.w	r1, ip, r1
900004ac:	f108 3aff 	add.w	sl, r8, #4294967295
900004b0:	f080 8088 	bcs.w	900005c4 <__udivmoddi4+0x2bc>
900004b4:	4288      	cmp	r0, r1
900004b6:	f240 8085 	bls.w	900005c4 <__udivmoddi4+0x2bc>
900004ba:	f1a8 0802 	sub.w	r8, r8, #2
900004be:	4461      	add	r1, ip
900004c0:	1a09      	subs	r1, r1, r0
900004c2:	b2a4      	uxth	r4, r4
900004c4:	fbb1 f0f9 	udiv	r0, r1, r9
900004c8:	fb09 1110 	mls	r1, r9, r0, r1
900004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
900004d0:	fb00 fe0e 	mul.w	lr, r0, lr
900004d4:	458e      	cmp	lr, r1
900004d6:	d908      	bls.n	900004ea <__udivmoddi4+0x1e2>
900004d8:	eb1c 0101 	adds.w	r1, ip, r1
900004dc:	f100 34ff 	add.w	r4, r0, #4294967295
900004e0:	d26c      	bcs.n	900005bc <__udivmoddi4+0x2b4>
900004e2:	458e      	cmp	lr, r1
900004e4:	d96a      	bls.n	900005bc <__udivmoddi4+0x2b4>
900004e6:	3802      	subs	r0, #2
900004e8:	4461      	add	r1, ip
900004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
900004ee:	fba0 9402 	umull	r9, r4, r0, r2
900004f2:	eba1 010e 	sub.w	r1, r1, lr
900004f6:	42a1      	cmp	r1, r4
900004f8:	46c8      	mov	r8, r9
900004fa:	46a6      	mov	lr, r4
900004fc:	d356      	bcc.n	900005ac <__udivmoddi4+0x2a4>
900004fe:	d053      	beq.n	900005a8 <__udivmoddi4+0x2a0>
90000500:	b15d      	cbz	r5, 9000051a <__udivmoddi4+0x212>
90000502:	ebb3 0208 	subs.w	r2, r3, r8
90000506:	eb61 010e 	sbc.w	r1, r1, lr
9000050a:	fa01 f707 	lsl.w	r7, r1, r7
9000050e:	fa22 f306 	lsr.w	r3, r2, r6
90000512:	40f1      	lsrs	r1, r6
90000514:	431f      	orrs	r7, r3
90000516:	e9c5 7100 	strd	r7, r1, [r5]
9000051a:	2600      	movs	r6, #0
9000051c:	4631      	mov	r1, r6
9000051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000522:	f1c2 0320 	rsb	r3, r2, #32
90000526:	40d8      	lsrs	r0, r3
90000528:	fa0c fc02 	lsl.w	ip, ip, r2
9000052c:	fa21 f303 	lsr.w	r3, r1, r3
90000530:	4091      	lsls	r1, r2
90000532:	4301      	orrs	r1, r0
90000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000538:	fa1f fe8c 	uxth.w	lr, ip
9000053c:	fbb3 f0f7 	udiv	r0, r3, r7
90000540:	fb07 3610 	mls	r6, r7, r0, r3
90000544:	0c0b      	lsrs	r3, r1, #16
90000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
9000054a:	fb00 f60e 	mul.w	r6, r0, lr
9000054e:	429e      	cmp	r6, r3
90000550:	fa04 f402 	lsl.w	r4, r4, r2
90000554:	d908      	bls.n	90000568 <__udivmoddi4+0x260>
90000556:	eb1c 0303 	adds.w	r3, ip, r3
9000055a:	f100 38ff 	add.w	r8, r0, #4294967295
9000055e:	d22f      	bcs.n	900005c0 <__udivmoddi4+0x2b8>
90000560:	429e      	cmp	r6, r3
90000562:	d92d      	bls.n	900005c0 <__udivmoddi4+0x2b8>
90000564:	3802      	subs	r0, #2
90000566:	4463      	add	r3, ip
90000568:	1b9b      	subs	r3, r3, r6
9000056a:	b289      	uxth	r1, r1
9000056c:	fbb3 f6f7 	udiv	r6, r3, r7
90000570:	fb07 3316 	mls	r3, r7, r6, r3
90000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000578:	fb06 f30e 	mul.w	r3, r6, lr
9000057c:	428b      	cmp	r3, r1
9000057e:	d908      	bls.n	90000592 <__udivmoddi4+0x28a>
90000580:	eb1c 0101 	adds.w	r1, ip, r1
90000584:	f106 38ff 	add.w	r8, r6, #4294967295
90000588:	d216      	bcs.n	900005b8 <__udivmoddi4+0x2b0>
9000058a:	428b      	cmp	r3, r1
9000058c:	d914      	bls.n	900005b8 <__udivmoddi4+0x2b0>
9000058e:	3e02      	subs	r6, #2
90000590:	4461      	add	r1, ip
90000592:	1ac9      	subs	r1, r1, r3
90000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
90000598:	e738      	b.n	9000040c <__udivmoddi4+0x104>
9000059a:	462e      	mov	r6, r5
9000059c:	4628      	mov	r0, r5
9000059e:	e705      	b.n	900003ac <__udivmoddi4+0xa4>
900005a0:	4606      	mov	r6, r0
900005a2:	e6e3      	b.n	9000036c <__udivmoddi4+0x64>
900005a4:	4618      	mov	r0, r3
900005a6:	e6f8      	b.n	9000039a <__udivmoddi4+0x92>
900005a8:	454b      	cmp	r3, r9
900005aa:	d2a9      	bcs.n	90000500 <__udivmoddi4+0x1f8>
900005ac:	ebb9 0802 	subs.w	r8, r9, r2
900005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
900005b4:	3801      	subs	r0, #1
900005b6:	e7a3      	b.n	90000500 <__udivmoddi4+0x1f8>
900005b8:	4646      	mov	r6, r8
900005ba:	e7ea      	b.n	90000592 <__udivmoddi4+0x28a>
900005bc:	4620      	mov	r0, r4
900005be:	e794      	b.n	900004ea <__udivmoddi4+0x1e2>
900005c0:	4640      	mov	r0, r8
900005c2:	e7d1      	b.n	90000568 <__udivmoddi4+0x260>
900005c4:	46d0      	mov	r8, sl
900005c6:	e77b      	b.n	900004c0 <__udivmoddi4+0x1b8>
900005c8:	3b02      	subs	r3, #2
900005ca:	4461      	add	r1, ip
900005cc:	e732      	b.n	90000434 <__udivmoddi4+0x12c>
900005ce:	4630      	mov	r0, r6
900005d0:	e709      	b.n	900003e6 <__udivmoddi4+0xde>
900005d2:	4464      	add	r4, ip
900005d4:	3802      	subs	r0, #2
900005d6:	e742      	b.n	9000045e <__udivmoddi4+0x156>

900005d8 <__aeabi_idiv0>:
900005d8:	4770      	bx	lr
900005da:	bf00      	nop

900005dc <_write>:
// Properties -> Settings -> MCU_Settings -> select use float with printf
/*
 * USART6, BaudRate = 115200, WordLength = UART_WORDLENGTH_8B, StopBits = UART_STOPBITS_1;
 * */
int _write(int file, char *ptr, int len)
{
900005dc:	b580      	push	{r7, lr}
900005de:	b084      	sub	sp, #16
900005e0:	af00      	add	r7, sp, #0
900005e2:	60f8      	str	r0, [r7, #12]
900005e4:	60b9      	str	r1, [r7, #8]
900005e6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t *)ptr, len, 10);
900005e8:	687b      	ldr	r3, [r7, #4]
900005ea:	b29a      	uxth	r2, r3
900005ec:	230a      	movs	r3, #10
900005ee:	68b9      	ldr	r1, [r7, #8]
900005f0:	4803      	ldr	r0, [pc, #12]	; (90000600 <_write+0x24>)
900005f2:	f007 f870 	bl	900076d6 <HAL_UART_Transmit>
	return len;
900005f6:	687b      	ldr	r3, [r7, #4]
}
900005f8:	4618      	mov	r0, r3
900005fa:	3710      	adds	r7, #16
900005fc:	46bd      	mov	sp, r7
900005fe:	bd80      	pop	{r7, pc}
90000600:	20000254 	.word	0x20000254

90000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
90000604:	b580      	push	{r7, lr}
90000606:	b084      	sub	sp, #16
90000608:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	 CPU_CACHE_Enable();
9000060a:	f000 fee3 	bl	900013d4 <CPU_CACHE_Enable>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
9000060e:	f001 fc49 	bl	90001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
90000612:	f000 f897 	bl	90000744 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
90000616:	f000 f91f 	bl	90000858 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
9000061a:	f000 fb29 	bl	90000c70 <MX_GPIO_Init>
  MX_ADC1_Init();
9000061e:	f000 f947 	bl	900008b0 <MX_ADC1_Init>
  MX_ADC2_Init();
90000622:	f000 f9bd 	bl	900009a0 <MX_ADC2_Init>
  MX_ADC3_Init();
90000626:	f000 fa1f 	bl	90000a68 <MX_ADC3_Init>
  MX_USART3_UART_Init();
9000062a:	f000 fad5 	bl	90000bd8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
9000062e:	f000 fa7d 	bl	90000b2c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  /* Configure LED2 */
  BSP_LED_Init(LED2);
90000632:	2001      	movs	r0, #1
90000634:	f001 fbba 	bl	90001dac <BSP_LED_Init>

  /*##-1- LCD Configuration ##################################################*/
  /* Configure 2 layers w/ Blending and CLUT loading for layer 1 */
  LCD_Config();
90000638:	f000 fdba 	bl	900011b0 <LCD_Config>

  /*##-2- CLUT Configuration #################################################*/
  HAL_LTDC_ConfigCLUT(&LtdcHandle, (uint32_t *)L8_320x240_CLUT, 256, 0);
9000063c:	2300      	movs	r3, #0
9000063e:	f44f 7280 	mov.w	r2, #256	; 0x100
90000642:	4938      	ldr	r1, [pc, #224]	; (90000724 <main+0x120>)
90000644:	4838      	ldr	r0, [pc, #224]	; (90000728 <main+0x124>)
90000646:	f003 faa2 	bl	90003b8e <HAL_LTDC_ConfigCLUT>

  /*##-3- Enable CLUT For Layer 1 ############################################*/
  HAL_LTDC_EnableCLUT(&LtdcHandle, 0);
9000064a:	2100      	movs	r1, #0
9000064c:	4836      	ldr	r0, [pc, #216]	; (90000728 <main+0x124>)
9000064e:	f003 fb0c 	bl	90003c6a <HAL_LTDC_EnableCLUT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("inf loop\n");
90000652:	4836      	ldr	r0, [pc, #216]	; (9000072c <main+0x128>)
90000654:	f008 f996 	bl	90008984 <puts>
	  for (int index = 0; index < 32; index++)
90000658:	2300      	movs	r3, #0
9000065a:	607b      	str	r3, [r7, #4]
9000065c:	e027      	b.n	900006ae <main+0xaa>
	    {
	      /* calculate new picture position */
	       PicturesPosition(&Xpos1, &Ypos1, &Xpos2, &Ypos2, (index+1));
9000065e:	687b      	ldr	r3, [r7, #4]
90000660:	3301      	adds	r3, #1
90000662:	9300      	str	r3, [sp, #0]
90000664:	4b32      	ldr	r3, [pc, #200]	; (90000730 <main+0x12c>)
90000666:	4a33      	ldr	r2, [pc, #204]	; (90000734 <main+0x130>)
90000668:	4933      	ldr	r1, [pc, #204]	; (90000738 <main+0x134>)
9000066a:	4834      	ldr	r0, [pc, #208]	; (9000073c <main+0x138>)
9000066c:	f000 fd6c 	bl	90001148 <PicturesPosition>

	       /* reconfigure the layer1 position  without Reloading*/
	       HAL_LTDC_SetWindowPosition_NoReload(&LtdcHandle, Xpos1, Ypos1, 0);
90000670:	4b32      	ldr	r3, [pc, #200]	; (9000073c <main+0x138>)
90000672:	6819      	ldr	r1, [r3, #0]
90000674:	4b30      	ldr	r3, [pc, #192]	; (90000738 <main+0x134>)
90000676:	681a      	ldr	r2, [r3, #0]
90000678:	2300      	movs	r3, #0
9000067a:	482b      	ldr	r0, [pc, #172]	; (90000728 <main+0x124>)
9000067c:	f003 fb5d 	bl	90003d3a <HAL_LTDC_SetWindowPosition_NoReload>
	       /* reconfigure the layer2 position  without Reloading*/
	       HAL_LTDC_SetWindowPosition_NoReload(&LtdcHandle, Xpos2, Ypos2, 1);
90000680:	4b2c      	ldr	r3, [pc, #176]	; (90000734 <main+0x130>)
90000682:	6819      	ldr	r1, [r3, #0]
90000684:	4b2a      	ldr	r3, [pc, #168]	; (90000730 <main+0x12c>)
90000686:	681a      	ldr	r2, [r3, #0]
90000688:	2301      	movs	r3, #1
9000068a:	4827      	ldr	r0, [pc, #156]	; (90000728 <main+0x124>)
9000068c:	f003 fb55 	bl	90003d3a <HAL_LTDC_SetWindowPosition_NoReload>
	       /*Ask for LTDC reload within next vertical blanking*/
	       ReloadFlag = 0;
90000690:	4b2b      	ldr	r3, [pc, #172]	; (90000740 <main+0x13c>)
90000692:	2200      	movs	r2, #0
90000694:	601a      	str	r2, [r3, #0]
	       HAL_LTDC_Reload(&LtdcHandle,LTDC_RELOAD_VERTICAL_BLANKING);
90000696:	2102      	movs	r1, #2
90000698:	4823      	ldr	r0, [pc, #140]	; (90000728 <main+0x124>)
9000069a:	f003 fb1f 	bl	90003cdc <HAL_LTDC_Reload>

	      while(ReloadFlag == 0)
9000069e:	bf00      	nop
900006a0:	4b27      	ldr	r3, [pc, #156]	; (90000740 <main+0x13c>)
900006a2:	681b      	ldr	r3, [r3, #0]
900006a4:	2b00      	cmp	r3, #0
900006a6:	d0fb      	beq.n	900006a0 <main+0x9c>
	  for (int index = 0; index < 32; index++)
900006a8:	687b      	ldr	r3, [r7, #4]
900006aa:	3301      	adds	r3, #1
900006ac:	607b      	str	r3, [r7, #4]
900006ae:	687b      	ldr	r3, [r7, #4]
900006b0:	2b1f      	cmp	r3, #31
900006b2:	ddd4      	ble.n	9000065e <main+0x5a>
	      {
	        /* wait till reload takes effect (in the next vertical blanking period) */
	      }
	    }
	    HAL_Delay(500);
900006b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
900006b8:	f001 fc86 	bl	90001fc8 <HAL_Delay>

	    for (int index = 0; index < 32; index++)
900006bc:	2300      	movs	r3, #0
900006be:	603b      	str	r3, [r7, #0]
900006c0:	e027      	b.n	90000712 <main+0x10e>
	    {
	      /* calculate new picture position */
	       PicturesPosition(&Xpos2, &Ypos2, &Xpos1, &Ypos1, (index+1));
900006c2:	683b      	ldr	r3, [r7, #0]
900006c4:	3301      	adds	r3, #1
900006c6:	9300      	str	r3, [sp, #0]
900006c8:	4b1b      	ldr	r3, [pc, #108]	; (90000738 <main+0x134>)
900006ca:	4a1c      	ldr	r2, [pc, #112]	; (9000073c <main+0x138>)
900006cc:	4918      	ldr	r1, [pc, #96]	; (90000730 <main+0x12c>)
900006ce:	4819      	ldr	r0, [pc, #100]	; (90000734 <main+0x130>)
900006d0:	f000 fd3a 	bl	90001148 <PicturesPosition>

	       /* reconfigure the layer1 position  without Reloading*/
	       HAL_LTDC_SetWindowPosition_NoReload(&LtdcHandle, Xpos1, Ypos1, 0);
900006d4:	4b19      	ldr	r3, [pc, #100]	; (9000073c <main+0x138>)
900006d6:	6819      	ldr	r1, [r3, #0]
900006d8:	4b17      	ldr	r3, [pc, #92]	; (90000738 <main+0x134>)
900006da:	681a      	ldr	r2, [r3, #0]
900006dc:	2300      	movs	r3, #0
900006de:	4812      	ldr	r0, [pc, #72]	; (90000728 <main+0x124>)
900006e0:	f003 fb2b 	bl	90003d3a <HAL_LTDC_SetWindowPosition_NoReload>
	       /* reconfigure the layer2 position  without Reloading*/
	       HAL_LTDC_SetWindowPosition_NoReload(&LtdcHandle, Xpos2, Ypos2, 1);
900006e4:	4b13      	ldr	r3, [pc, #76]	; (90000734 <main+0x130>)
900006e6:	6819      	ldr	r1, [r3, #0]
900006e8:	4b11      	ldr	r3, [pc, #68]	; (90000730 <main+0x12c>)
900006ea:	681a      	ldr	r2, [r3, #0]
900006ec:	2301      	movs	r3, #1
900006ee:	480e      	ldr	r0, [pc, #56]	; (90000728 <main+0x124>)
900006f0:	f003 fb23 	bl	90003d3a <HAL_LTDC_SetWindowPosition_NoReload>
	       /*Ask for LTDC reload within next vertical blanking*/
	       ReloadFlag = 0;
900006f4:	4b12      	ldr	r3, [pc, #72]	; (90000740 <main+0x13c>)
900006f6:	2200      	movs	r2, #0
900006f8:	601a      	str	r2, [r3, #0]
	       HAL_LTDC_Reload(&LtdcHandle,LTDC_RELOAD_VERTICAL_BLANKING);
900006fa:	2102      	movs	r1, #2
900006fc:	480a      	ldr	r0, [pc, #40]	; (90000728 <main+0x124>)
900006fe:	f003 faed 	bl	90003cdc <HAL_LTDC_Reload>

	      while(ReloadFlag == 0)
90000702:	bf00      	nop
90000704:	4b0e      	ldr	r3, [pc, #56]	; (90000740 <main+0x13c>)
90000706:	681b      	ldr	r3, [r3, #0]
90000708:	2b00      	cmp	r3, #0
9000070a:	d0fb      	beq.n	90000704 <main+0x100>
	    for (int index = 0; index < 32; index++)
9000070c:	683b      	ldr	r3, [r7, #0]
9000070e:	3301      	adds	r3, #1
90000710:	603b      	str	r3, [r7, #0]
90000712:	683b      	ldr	r3, [r7, #0]
90000714:	2b1f      	cmp	r3, #31
90000716:	ddd4      	ble.n	900006c2 <main+0xbe>
	    {
	        /* wait till reload takes effect (in the next vertical blanking period) */
	    }
	  }
	    HAL_Delay(500);
90000718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
9000071c:	f001 fc54 	bl	90001fc8 <HAL_Delay>
	  printf("inf loop\n");
90000720:	e797      	b.n	90000652 <main+0x4e>
90000722:	bf00      	nop
90000724:	9002eac8 	.word	0x9002eac8
90000728:	200002e4 	.word	0x200002e4
9000072c:	900092bc 	.word	0x900092bc
90000730:	20000004 	.word	0x20000004
90000734:	20000000 	.word	0x20000000
90000738:	20000394 	.word	0x20000394
9000073c:	20000390 	.word	0x20000390
90000740:	2000038c 	.word	0x2000038c

90000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
90000744:	b580      	push	{r7, lr}
90000746:	b09c      	sub	sp, #112	; 0x70
90000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
9000074a:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000074e:	224c      	movs	r2, #76	; 0x4c
90000750:	2100      	movs	r1, #0
90000752:	4618      	mov	r0, r3
90000754:	f008 f8a0 	bl	90008898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90000758:	1d3b      	adds	r3, r7, #4
9000075a:	2220      	movs	r2, #32
9000075c:	2100      	movs	r1, #0
9000075e:	4618      	mov	r0, r3
90000760:	f008 f89a 	bl	90008898 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
90000764:	2002      	movs	r0, #2
90000766:	f003 fcc5 	bl	900040f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
9000076a:	2300      	movs	r3, #0
9000076c:	603b      	str	r3, [r7, #0]
9000076e:	4b37      	ldr	r3, [pc, #220]	; (9000084c <SystemClock_Config+0x108>)
90000770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000772:	4a36      	ldr	r2, [pc, #216]	; (9000084c <SystemClock_Config+0x108>)
90000774:	f023 0301 	bic.w	r3, r3, #1
90000778:	62d3      	str	r3, [r2, #44]	; 0x2c
9000077a:	4b34      	ldr	r3, [pc, #208]	; (9000084c <SystemClock_Config+0x108>)
9000077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000077e:	f003 0301 	and.w	r3, r3, #1
90000782:	603b      	str	r3, [r7, #0]
90000784:	4b32      	ldr	r3, [pc, #200]	; (90000850 <SystemClock_Config+0x10c>)
90000786:	699b      	ldr	r3, [r3, #24]
90000788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
9000078c:	4a30      	ldr	r2, [pc, #192]	; (90000850 <SystemClock_Config+0x10c>)
9000078e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
90000792:	6193      	str	r3, [r2, #24]
90000794:	4b2e      	ldr	r3, [pc, #184]	; (90000850 <SystemClock_Config+0x10c>)
90000796:	699b      	ldr	r3, [r3, #24]
90000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
9000079c:	603b      	str	r3, [r7, #0]
9000079e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
900007a0:	bf00      	nop
900007a2:	4b2b      	ldr	r3, [pc, #172]	; (90000850 <SystemClock_Config+0x10c>)
900007a4:	699b      	ldr	r3, [r3, #24]
900007a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900007aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900007ae:	d1f8      	bne.n	900007a2 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
900007b0:	4b28      	ldr	r3, [pc, #160]	; (90000854 <SystemClock_Config+0x110>)
900007b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900007b4:	f023 0303 	bic.w	r3, r3, #3
900007b8:	4a26      	ldr	r2, [pc, #152]	; (90000854 <SystemClock_Config+0x110>)
900007ba:	f043 0302 	orr.w	r3, r3, #2
900007be:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
900007c0:	2303      	movs	r3, #3
900007c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
900007c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
900007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
900007ca:	2301      	movs	r3, #1
900007cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
900007ce:	2340      	movs	r3, #64	; 0x40
900007d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
900007d2:	2302      	movs	r3, #2
900007d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900007d6:	2302      	movs	r3, #2
900007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
900007da:	230a      	movs	r3, #10
900007dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
900007de:	23a0      	movs	r3, #160	; 0xa0
900007e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
900007e2:	2302      	movs	r3, #2
900007e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
900007e6:	2304      	movs	r3, #4
900007e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
900007ea:	2302      	movs	r3, #2
900007ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
900007ee:	2304      	movs	r3, #4
900007f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
900007f2:	2300      	movs	r3, #0
900007f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
900007f6:	2300      	movs	r3, #0
900007f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
900007fe:	4618      	mov	r0, r3
90000800:	f003 fcb2 	bl	90004168 <HAL_RCC_OscConfig>
90000804:	4603      	mov	r3, r0
90000806:	2b00      	cmp	r3, #0
90000808:	d001      	beq.n	9000080e <SystemClock_Config+0xca>
  {
    Error_Handler();
9000080a:	f000 fe51 	bl	900014b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
9000080e:	233f      	movs	r3, #63	; 0x3f
90000810:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000812:	2303      	movs	r3, #3
90000814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000816:	2300      	movs	r3, #0
90000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
9000081a:	2308      	movs	r3, #8
9000081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
9000081e:	2300      	movs	r3, #0
90000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
90000822:	2300      	movs	r3, #0
90000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
90000826:	2300      	movs	r3, #0
90000828:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
9000082a:	2300      	movs	r3, #0
9000082c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
9000082e:	1d3b      	adds	r3, r7, #4
90000830:	2101      	movs	r1, #1
90000832:	4618      	mov	r0, r3
90000834:	f004 f8c6 	bl	900049c4 <HAL_RCC_ClockConfig>
90000838:	4603      	mov	r3, r0
9000083a:	2b00      	cmp	r3, #0
9000083c:	d001      	beq.n	90000842 <SystemClock_Config+0xfe>
  {
    Error_Handler();
9000083e:	f000 fe37 	bl	900014b0 <Error_Handler>
  }
}
90000842:	bf00      	nop
90000844:	3770      	adds	r7, #112	; 0x70
90000846:	46bd      	mov	sp, r7
90000848:	bd80      	pop	{r7, pc}
9000084a:	bf00      	nop
9000084c:	58000400 	.word	0x58000400
90000850:	58024800 	.word	0x58024800
90000854:	58024400 	.word	0x58024400

90000858 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
90000858:	b580      	push	{r7, lr}
9000085a:	b0b0      	sub	sp, #192	; 0xc0
9000085c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
9000085e:	1d3b      	adds	r3, r7, #4
90000860:	22bc      	movs	r2, #188	; 0xbc
90000862:	2100      	movs	r1, #0
90000864:	4618      	mov	r0, r3
90000866:	f008 f817 	bl	90008898 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
9000086a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
9000086e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
90000870:	2302      	movs	r3, #2
90000872:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
90000874:	230c      	movs	r3, #12
90000876:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
90000878:	2305      	movs	r3, #5
9000087a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
9000087c:	2302      	movs	r3, #2
9000087e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
90000880:	2302      	movs	r3, #2
90000882:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
90000884:	23c0      	movs	r3, #192	; 0xc0
90000886:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
90000888:	2320      	movs	r3, #32
9000088a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
9000088c:	2300      	movs	r3, #0
9000088e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
90000890:	2300      	movs	r3, #0
90000892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000896:	1d3b      	adds	r3, r7, #4
90000898:	4618      	mov	r0, r3
9000089a:	f004 fc1f 	bl	900050dc <HAL_RCCEx_PeriphCLKConfig>
9000089e:	4603      	mov	r3, r0
900008a0:	2b00      	cmp	r3, #0
900008a2:	d001      	beq.n	900008a8 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
900008a4:	f000 fe04 	bl	900014b0 <Error_Handler>
  }
}
900008a8:	bf00      	nop
900008aa:	37c0      	adds	r7, #192	; 0xc0
900008ac:	46bd      	mov	sp, r7
900008ae:	bd80      	pop	{r7, pc}

900008b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
900008b0:	b580      	push	{r7, lr}
900008b2:	b08a      	sub	sp, #40	; 0x28
900008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
900008b6:	f107 031c 	add.w	r3, r7, #28
900008ba:	2200      	movs	r2, #0
900008bc:	601a      	str	r2, [r3, #0]
900008be:	605a      	str	r2, [r3, #4]
900008c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
900008c2:	463b      	mov	r3, r7
900008c4:	2200      	movs	r2, #0
900008c6:	601a      	str	r2, [r3, #0]
900008c8:	605a      	str	r2, [r3, #4]
900008ca:	609a      	str	r2, [r3, #8]
900008cc:	60da      	str	r2, [r3, #12]
900008ce:	611a      	str	r2, [r3, #16]
900008d0:	615a      	str	r2, [r3, #20]
900008d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
900008d4:	4b30      	ldr	r3, [pc, #192]	; (90000998 <MX_ADC1_Init+0xe8>)
900008d6:	4a31      	ldr	r2, [pc, #196]	; (9000099c <MX_ADC1_Init+0xec>)
900008d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
900008da:	4b2f      	ldr	r3, [pc, #188]	; (90000998 <MX_ADC1_Init+0xe8>)
900008dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
900008e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
900008e2:	4b2d      	ldr	r3, [pc, #180]	; (90000998 <MX_ADC1_Init+0xe8>)
900008e4:	2200      	movs	r2, #0
900008e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
900008e8:	4b2b      	ldr	r3, [pc, #172]	; (90000998 <MX_ADC1_Init+0xe8>)
900008ea:	2200      	movs	r2, #0
900008ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
900008ee:	4b2a      	ldr	r3, [pc, #168]	; (90000998 <MX_ADC1_Init+0xe8>)
900008f0:	2204      	movs	r2, #4
900008f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
900008f4:	4b28      	ldr	r3, [pc, #160]	; (90000998 <MX_ADC1_Init+0xe8>)
900008f6:	2200      	movs	r2, #0
900008f8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
900008fa:	4b27      	ldr	r3, [pc, #156]	; (90000998 <MX_ADC1_Init+0xe8>)
900008fc:	2200      	movs	r2, #0
900008fe:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
90000900:	4b25      	ldr	r3, [pc, #148]	; (90000998 <MX_ADC1_Init+0xe8>)
90000902:	2201      	movs	r2, #1
90000904:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
90000906:	4b24      	ldr	r3, [pc, #144]	; (90000998 <MX_ADC1_Init+0xe8>)
90000908:	2200      	movs	r2, #0
9000090a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
9000090c:	4b22      	ldr	r3, [pc, #136]	; (90000998 <MX_ADC1_Init+0xe8>)
9000090e:	2200      	movs	r2, #0
90000910:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
90000912:	4b21      	ldr	r3, [pc, #132]	; (90000998 <MX_ADC1_Init+0xe8>)
90000914:	2200      	movs	r2, #0
90000916:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
90000918:	4b1f      	ldr	r3, [pc, #124]	; (90000998 <MX_ADC1_Init+0xe8>)
9000091a:	2200      	movs	r2, #0
9000091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
9000091e:	4b1e      	ldr	r3, [pc, #120]	; (90000998 <MX_ADC1_Init+0xe8>)
90000920:	2200      	movs	r2, #0
90000922:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
90000924:	4b1c      	ldr	r3, [pc, #112]	; (90000998 <MX_ADC1_Init+0xe8>)
90000926:	2200      	movs	r2, #0
90000928:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
9000092a:	4b1b      	ldr	r3, [pc, #108]	; (90000998 <MX_ADC1_Init+0xe8>)
9000092c:	2200      	movs	r2, #0
9000092e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
90000932:	4819      	ldr	r0, [pc, #100]	; (90000998 <MX_ADC1_Init+0xe8>)
90000934:	f001 fd1a 	bl	9000236c <HAL_ADC_Init>
90000938:	4603      	mov	r3, r0
9000093a:	2b00      	cmp	r3, #0
9000093c:	d001      	beq.n	90000942 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
9000093e:	f000 fdb7 	bl	900014b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
90000942:	2300      	movs	r3, #0
90000944:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
90000946:	f107 031c 	add.w	r3, r7, #28
9000094a:	4619      	mov	r1, r3
9000094c:	4812      	ldr	r0, [pc, #72]	; (90000998 <MX_ADC1_Init+0xe8>)
9000094e:	f002 fb2f 	bl	90002fb0 <HAL_ADCEx_MultiModeConfigChannel>
90000952:	4603      	mov	r3, r0
90000954:	2b00      	cmp	r3, #0
90000956:	d001      	beq.n	9000095c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
90000958:	f000 fdaa 	bl	900014b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
9000095c:	2301      	movs	r3, #1
9000095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
90000960:	2306      	movs	r3, #6
90000962:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
90000964:	2300      	movs	r3, #0
90000966:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
90000968:	f240 73ff 	movw	r3, #2047	; 0x7ff
9000096c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
9000096e:	2304      	movs	r3, #4
90000970:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
90000972:	2300      	movs	r3, #0
90000974:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
90000976:	2300      	movs	r3, #0
90000978:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
9000097a:	463b      	mov	r3, r7
9000097c:	4619      	mov	r1, r3
9000097e:	4806      	ldr	r0, [pc, #24]	; (90000998 <MX_ADC1_Init+0xe8>)
90000980:	f001 fe96 	bl	900026b0 <HAL_ADC_ConfigChannel>
90000984:	4603      	mov	r3, r0
90000986:	2b00      	cmp	r3, #0
90000988:	d001      	beq.n	9000098e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
9000098a:	f000 fd91 	bl	900014b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
9000098e:	bf00      	nop
90000990:	3728      	adds	r7, #40	; 0x28
90000992:	46bd      	mov	sp, r7
90000994:	bd80      	pop	{r7, pc}
90000996:	bf00      	nop
90000998:	200000a0 	.word	0x200000a0
9000099c:	40022000 	.word	0x40022000

900009a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
900009a0:	b580      	push	{r7, lr}
900009a2:	b088      	sub	sp, #32
900009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
900009a6:	1d3b      	adds	r3, r7, #4
900009a8:	2200      	movs	r2, #0
900009aa:	601a      	str	r2, [r3, #0]
900009ac:	605a      	str	r2, [r3, #4]
900009ae:	609a      	str	r2, [r3, #8]
900009b0:	60da      	str	r2, [r3, #12]
900009b2:	611a      	str	r2, [r3, #16]
900009b4:	615a      	str	r2, [r3, #20]
900009b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
900009b8:	4b29      	ldr	r3, [pc, #164]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009ba:	4a2a      	ldr	r2, [pc, #168]	; (90000a64 <MX_ADC2_Init+0xc4>)
900009bc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
900009be:	4b28      	ldr	r3, [pc, #160]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
900009c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
900009c6:	4b26      	ldr	r3, [pc, #152]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009c8:	2200      	movs	r2, #0
900009ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
900009cc:	4b24      	ldr	r3, [pc, #144]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009ce:	2200      	movs	r2, #0
900009d0:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
900009d2:	4b23      	ldr	r3, [pc, #140]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009d4:	2204      	movs	r2, #4
900009d6:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
900009d8:	4b21      	ldr	r3, [pc, #132]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009da:	2200      	movs	r2, #0
900009dc:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
900009de:	4b20      	ldr	r3, [pc, #128]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009e0:	2200      	movs	r2, #0
900009e2:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
900009e4:	4b1e      	ldr	r3, [pc, #120]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009e6:	2201      	movs	r2, #1
900009e8:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
900009ea:	4b1d      	ldr	r3, [pc, #116]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009ec:	2200      	movs	r2, #0
900009ee:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
900009f0:	4b1b      	ldr	r3, [pc, #108]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009f2:	2200      	movs	r2, #0
900009f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
900009f6:	4b1a      	ldr	r3, [pc, #104]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009f8:	2200      	movs	r2, #0
900009fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
900009fc:	4b18      	ldr	r3, [pc, #96]	; (90000a60 <MX_ADC2_Init+0xc0>)
900009fe:	2200      	movs	r2, #0
90000a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
90000a02:	4b17      	ldr	r3, [pc, #92]	; (90000a60 <MX_ADC2_Init+0xc0>)
90000a04:	2200      	movs	r2, #0
90000a06:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
90000a08:	4b15      	ldr	r3, [pc, #84]	; (90000a60 <MX_ADC2_Init+0xc0>)
90000a0a:	2200      	movs	r2, #0
90000a0c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
90000a0e:	4b14      	ldr	r3, [pc, #80]	; (90000a60 <MX_ADC2_Init+0xc0>)
90000a10:	2200      	movs	r2, #0
90000a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
90000a16:	4812      	ldr	r0, [pc, #72]	; (90000a60 <MX_ADC2_Init+0xc0>)
90000a18:	f001 fca8 	bl	9000236c <HAL_ADC_Init>
90000a1c:	4603      	mov	r3, r0
90000a1e:	2b00      	cmp	r3, #0
90000a20:	d001      	beq.n	90000a26 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
90000a22:	f000 fd45 	bl	900014b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
90000a26:	2301      	movs	r3, #1
90000a28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
90000a2a:	2306      	movs	r3, #6
90000a2c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
90000a2e:	2300      	movs	r3, #0
90000a30:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
90000a32:	f240 73ff 	movw	r3, #2047	; 0x7ff
90000a36:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
90000a38:	2304      	movs	r3, #4
90000a3a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
90000a3c:	2300      	movs	r3, #0
90000a3e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
90000a40:	2300      	movs	r3, #0
90000a42:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
90000a44:	1d3b      	adds	r3, r7, #4
90000a46:	4619      	mov	r1, r3
90000a48:	4805      	ldr	r0, [pc, #20]	; (90000a60 <MX_ADC2_Init+0xc0>)
90000a4a:	f001 fe31 	bl	900026b0 <HAL_ADC_ConfigChannel>
90000a4e:	4603      	mov	r3, r0
90000a50:	2b00      	cmp	r3, #0
90000a52:	d001      	beq.n	90000a58 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
90000a54:	f000 fd2c 	bl	900014b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
90000a58:	bf00      	nop
90000a5a:	3720      	adds	r7, #32
90000a5c:	46bd      	mov	sp, r7
90000a5e:	bd80      	pop	{r7, pc}
90000a60:	20000104 	.word	0x20000104
90000a64:	40022100 	.word	0x40022100

90000a68 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
90000a68:	b580      	push	{r7, lr}
90000a6a:	b088      	sub	sp, #32
90000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
90000a6e:	1d3b      	adds	r3, r7, #4
90000a70:	2200      	movs	r2, #0
90000a72:	601a      	str	r2, [r3, #0]
90000a74:	605a      	str	r2, [r3, #4]
90000a76:	609a      	str	r2, [r3, #8]
90000a78:	60da      	str	r2, [r3, #12]
90000a7a:	611a      	str	r2, [r3, #16]
90000a7c:	615a      	str	r2, [r3, #20]
90000a7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
90000a80:	4b27      	ldr	r3, [pc, #156]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000a82:	4a28      	ldr	r2, [pc, #160]	; (90000b24 <MX_ADC3_Init+0xbc>)
90000a84:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
90000a86:	4b26      	ldr	r3, [pc, #152]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000a88:	2200      	movs	r2, #0
90000a8a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
90000a8c:	4b24      	ldr	r3, [pc, #144]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000a8e:	2200      	movs	r2, #0
90000a90:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
90000a92:	4b23      	ldr	r3, [pc, #140]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000a94:	2204      	movs	r2, #4
90000a96:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
90000a98:	4b21      	ldr	r3, [pc, #132]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000a9a:	2200      	movs	r2, #0
90000a9c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
90000a9e:	4b20      	ldr	r3, [pc, #128]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000aa0:	2200      	movs	r2, #0
90000aa2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
90000aa4:	4b1e      	ldr	r3, [pc, #120]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000aa6:	2201      	movs	r2, #1
90000aa8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
90000aaa:	4b1d      	ldr	r3, [pc, #116]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000aac:	2200      	movs	r2, #0
90000aae:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
90000ab0:	4b1b      	ldr	r3, [pc, #108]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000ab2:	2200      	movs	r2, #0
90000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
90000ab6:	4b1a      	ldr	r3, [pc, #104]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000ab8:	2200      	movs	r2, #0
90000aba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
90000abc:	4b18      	ldr	r3, [pc, #96]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000abe:	2200      	movs	r2, #0
90000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
90000ac2:	4b17      	ldr	r3, [pc, #92]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000ac4:	2200      	movs	r2, #0
90000ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
90000ac8:	4b15      	ldr	r3, [pc, #84]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000aca:	2200      	movs	r2, #0
90000acc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
90000ace:	4b14      	ldr	r3, [pc, #80]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000ad0:	2200      	movs	r2, #0
90000ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
90000ad6:	4812      	ldr	r0, [pc, #72]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000ad8:	f001 fc48 	bl	9000236c <HAL_ADC_Init>
90000adc:	4603      	mov	r3, r0
90000ade:	2b00      	cmp	r3, #0
90000ae0:	d001      	beq.n	90000ae6 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
90000ae2:	f000 fce5 	bl	900014b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
90000ae6:	4b10      	ldr	r3, [pc, #64]	; (90000b28 <MX_ADC3_Init+0xc0>)
90000ae8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
90000aea:	2306      	movs	r3, #6
90000aec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
90000aee:	2300      	movs	r3, #0
90000af0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
90000af2:	f240 73ff 	movw	r3, #2047	; 0x7ff
90000af6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
90000af8:	2304      	movs	r3, #4
90000afa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
90000afc:	2300      	movs	r3, #0
90000afe:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
90000b00:	2300      	movs	r3, #0
90000b02:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
90000b04:	1d3b      	adds	r3, r7, #4
90000b06:	4619      	mov	r1, r3
90000b08:	4805      	ldr	r0, [pc, #20]	; (90000b20 <MX_ADC3_Init+0xb8>)
90000b0a:	f001 fdd1 	bl	900026b0 <HAL_ADC_ConfigChannel>
90000b0e:	4603      	mov	r3, r0
90000b10:	2b00      	cmp	r3, #0
90000b12:	d001      	beq.n	90000b18 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
90000b14:	f000 fccc 	bl	900014b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
90000b18:	bf00      	nop
90000b1a:	3720      	adds	r7, #32
90000b1c:	46bd      	mov	sp, r7
90000b1e:	bd80      	pop	{r7, pc}
90000b20:	20000168 	.word	0x20000168
90000b24:	58026000 	.word	0x58026000
90000b28:	1d500080 	.word	0x1d500080

90000b2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
90000b2c:	b580      	push	{r7, lr}
90000b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
90000b30:	4b27      	ldr	r3, [pc, #156]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b32:	4a28      	ldr	r2, [pc, #160]	; (90000bd4 <MX_SPI2_Init+0xa8>)
90000b34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
90000b36:	4b26      	ldr	r3, [pc, #152]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
90000b3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
90000b3e:	4b24      	ldr	r3, [pc, #144]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b40:	2200      	movs	r2, #0
90000b42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
90000b44:	4b22      	ldr	r3, [pc, #136]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b46:	2207      	movs	r2, #7
90000b48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
90000b4a:	4b21      	ldr	r3, [pc, #132]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b4c:	2200      	movs	r2, #0
90000b4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
90000b50:	4b1f      	ldr	r3, [pc, #124]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b52:	2200      	movs	r2, #0
90000b54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
90000b56:	4b1e      	ldr	r3, [pc, #120]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90000b5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
90000b5e:	4b1c      	ldr	r3, [pc, #112]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
90000b64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
90000b66:	4b1a      	ldr	r3, [pc, #104]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b68:	2200      	movs	r2, #0
90000b6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
90000b6c:	4b18      	ldr	r3, [pc, #96]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b6e:	2200      	movs	r2, #0
90000b70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
90000b72:	4b17      	ldr	r3, [pc, #92]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b74:	2200      	movs	r2, #0
90000b76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
90000b78:	4b15      	ldr	r3, [pc, #84]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b7a:	2200      	movs	r2, #0
90000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
90000b7e:	4b14      	ldr	r3, [pc, #80]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
90000b84:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
90000b86:	4b12      	ldr	r3, [pc, #72]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b88:	2200      	movs	r2, #0
90000b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
90000b8c:	4b10      	ldr	r3, [pc, #64]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b8e:	2200      	movs	r2, #0
90000b90:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
90000b92:	4b0f      	ldr	r3, [pc, #60]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b94:	2200      	movs	r2, #0
90000b96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
90000b98:	4b0d      	ldr	r3, [pc, #52]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000b9a:	2200      	movs	r2, #0
90000b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
90000b9e:	4b0c      	ldr	r3, [pc, #48]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000ba0:	2200      	movs	r2, #0
90000ba2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
90000ba4:	4b0a      	ldr	r3, [pc, #40]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000ba6:	2200      	movs	r2, #0
90000ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
90000baa:	4b09      	ldr	r3, [pc, #36]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000bac:	2200      	movs	r2, #0
90000bae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
90000bb0:	4b07      	ldr	r3, [pc, #28]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000bb2:	2200      	movs	r2, #0
90000bb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
90000bb6:	4b06      	ldr	r3, [pc, #24]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000bb8:	2200      	movs	r2, #0
90000bba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
90000bbc:	4804      	ldr	r0, [pc, #16]	; (90000bd0 <MX_SPI2_Init+0xa4>)
90000bbe:	f006 fc19 	bl	900073f4 <HAL_SPI_Init>
90000bc2:	4603      	mov	r3, r0
90000bc4:	2b00      	cmp	r3, #0
90000bc6:	d001      	beq.n	90000bcc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
90000bc8:	f000 fc72 	bl	900014b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
90000bcc:	bf00      	nop
90000bce:	bd80      	pop	{r7, pc}
90000bd0:	200001cc 	.word	0x200001cc
90000bd4:	40003800 	.word	0x40003800

90000bd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
90000bd8:	b580      	push	{r7, lr}
90000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
90000bdc:	4b22      	ldr	r3, [pc, #136]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000bde:	4a23      	ldr	r2, [pc, #140]	; (90000c6c <MX_USART3_UART_Init+0x94>)
90000be0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000be2:	4b21      	ldr	r3, [pc, #132]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
90000be8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000bea:	4b1f      	ldr	r3, [pc, #124]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000bec:	2200      	movs	r2, #0
90000bee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000bf0:	4b1d      	ldr	r3, [pc, #116]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000bf2:	2200      	movs	r2, #0
90000bf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000bf6:	4b1c      	ldr	r3, [pc, #112]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000bf8:	2200      	movs	r2, #0
90000bfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000bfc:	4b1a      	ldr	r3, [pc, #104]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000bfe:	220c      	movs	r2, #12
90000c00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000c02:	4b19      	ldr	r3, [pc, #100]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000c04:	2200      	movs	r2, #0
90000c06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000c08:	4b17      	ldr	r3, [pc, #92]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000c0a:	2200      	movs	r2, #0
90000c0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000c0e:	4b16      	ldr	r3, [pc, #88]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000c10:	2200      	movs	r2, #0
90000c12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000c14:	4b14      	ldr	r3, [pc, #80]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000c16:	2200      	movs	r2, #0
90000c18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000c1a:	4b13      	ldr	r3, [pc, #76]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000c1c:	2200      	movs	r2, #0
90000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000c20:	4811      	ldr	r0, [pc, #68]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000c22:	f006 fd08 	bl	90007636 <HAL_UART_Init>
90000c26:	4603      	mov	r3, r0
90000c28:	2b00      	cmp	r3, #0
90000c2a:	d001      	beq.n	90000c30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000c2c:	f000 fc40 	bl	900014b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000c30:	2100      	movs	r1, #0
90000c32:	480d      	ldr	r0, [pc, #52]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000c34:	f007 fd3c 	bl	900086b0 <HAL_UARTEx_SetTxFifoThreshold>
90000c38:	4603      	mov	r3, r0
90000c3a:	2b00      	cmp	r3, #0
90000c3c:	d001      	beq.n	90000c42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000c3e:	f000 fc37 	bl	900014b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000c42:	2100      	movs	r1, #0
90000c44:	4808      	ldr	r0, [pc, #32]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000c46:	f007 fd71 	bl	9000872c <HAL_UARTEx_SetRxFifoThreshold>
90000c4a:	4603      	mov	r3, r0
90000c4c:	2b00      	cmp	r3, #0
90000c4e:	d001      	beq.n	90000c54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000c50:	f000 fc2e 	bl	900014b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000c54:	4804      	ldr	r0, [pc, #16]	; (90000c68 <MX_USART3_UART_Init+0x90>)
90000c56:	f007 fcf2 	bl	9000863e <HAL_UARTEx_DisableFifoMode>
90000c5a:	4603      	mov	r3, r0
90000c5c:	2b00      	cmp	r3, #0
90000c5e:	d001      	beq.n	90000c64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000c60:	f000 fc26 	bl	900014b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
90000c64:	bf00      	nop
90000c66:	bd80      	pop	{r7, pc}
90000c68:	20000254 	.word	0x20000254
90000c6c:	40004800 	.word	0x40004800

90000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
90000c70:	b580      	push	{r7, lr}
90000c72:	b090      	sub	sp, #64	; 0x40
90000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c7a:	2200      	movs	r2, #0
90000c7c:	601a      	str	r2, [r3, #0]
90000c7e:	605a      	str	r2, [r3, #4]
90000c80:	609a      	str	r2, [r3, #8]
90000c82:	60da      	str	r2, [r3, #12]
90000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
90000c86:	4bbe      	ldr	r3, [pc, #760]	; (90000f80 <MX_GPIO_Init+0x310>)
90000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000c8c:	4abc      	ldr	r2, [pc, #752]	; (90000f80 <MX_GPIO_Init+0x310>)
90000c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000c96:	4bba      	ldr	r3, [pc, #744]	; (90000f80 <MX_GPIO_Init+0x310>)
90000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
90000ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
90000ca4:	4bb6      	ldr	r3, [pc, #728]	; (90000f80 <MX_GPIO_Init+0x310>)
90000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000caa:	4ab5      	ldr	r2, [pc, #724]	; (90000f80 <MX_GPIO_Init+0x310>)
90000cac:	f043 0302 	orr.w	r3, r3, #2
90000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000cb4:	4bb2      	ldr	r3, [pc, #712]	; (90000f80 <MX_GPIO_Init+0x310>)
90000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000cba:	f003 0302 	and.w	r3, r3, #2
90000cbe:	627b      	str	r3, [r7, #36]	; 0x24
90000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
90000cc2:	4baf      	ldr	r3, [pc, #700]	; (90000f80 <MX_GPIO_Init+0x310>)
90000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000cc8:	4aad      	ldr	r2, [pc, #692]	; (90000f80 <MX_GPIO_Init+0x310>)
90000cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000cd2:	4bab      	ldr	r3, [pc, #684]	; (90000f80 <MX_GPIO_Init+0x310>)
90000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90000cdc:	623b      	str	r3, [r7, #32]
90000cde:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90000ce0:	4ba7      	ldr	r3, [pc, #668]	; (90000f80 <MX_GPIO_Init+0x310>)
90000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000ce6:	4aa6      	ldr	r2, [pc, #664]	; (90000f80 <MX_GPIO_Init+0x310>)
90000ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000cf0:	4ba3      	ldr	r3, [pc, #652]	; (90000f80 <MX_GPIO_Init+0x310>)
90000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
90000cfa:	61fb      	str	r3, [r7, #28]
90000cfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90000cfe:	4ba0      	ldr	r3, [pc, #640]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000d04:	4a9e      	ldr	r2, [pc, #632]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d06:	f043 0304 	orr.w	r3, r3, #4
90000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000d0e:	4b9c      	ldr	r3, [pc, #624]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000d14:	f003 0304 	and.w	r3, r3, #4
90000d18:	61bb      	str	r3, [r7, #24]
90000d1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90000d1c:	4b98      	ldr	r3, [pc, #608]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000d22:	4a97      	ldr	r2, [pc, #604]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d24:	f043 0310 	orr.w	r3, r3, #16
90000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000d2c:	4b94      	ldr	r3, [pc, #592]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000d32:	f003 0310 	and.w	r3, r3, #16
90000d36:	617b      	str	r3, [r7, #20]
90000d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90000d3a:	4b91      	ldr	r3, [pc, #580]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000d40:	4a8f      	ldr	r2, [pc, #572]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000d4a:	4b8d      	ldr	r3, [pc, #564]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
90000d54:	613b      	str	r3, [r7, #16]
90000d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90000d58:	4b89      	ldr	r3, [pc, #548]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000d5e:	4a88      	ldr	r2, [pc, #544]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d60:	f043 0308 	orr.w	r3, r3, #8
90000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000d68:	4b85      	ldr	r3, [pc, #532]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000d6e:	f003 0308 	and.w	r3, r3, #8
90000d72:	60fb      	str	r3, [r7, #12]
90000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90000d76:	4b82      	ldr	r3, [pc, #520]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000d7c:	4a80      	ldr	r2, [pc, #512]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000d86:	4b7e      	ldr	r3, [pc, #504]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
90000d90:	60bb      	str	r3, [r7, #8]
90000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
90000d94:	4b7a      	ldr	r3, [pc, #488]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000d9a:	4a79      	ldr	r2, [pc, #484]	; (90000f80 <MX_GPIO_Init+0x310>)
90000d9c:	f043 0301 	orr.w	r3, r3, #1
90000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000da4:	4b76      	ldr	r3, [pc, #472]	; (90000f80 <MX_GPIO_Init+0x310>)
90000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000daa:	f003 0301 	and.w	r3, r3, #1
90000dae:	607b      	str	r3, [r7, #4]
90000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90000db2:	4b73      	ldr	r3, [pc, #460]	; (90000f80 <MX_GPIO_Init+0x310>)
90000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000db8:	4a71      	ldr	r2, [pc, #452]	; (90000f80 <MX_GPIO_Init+0x310>)
90000dba:	f043 0320 	orr.w	r3, r3, #32
90000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000dc2:	4b6f      	ldr	r3, [pc, #444]	; (90000f80 <MX_GPIO_Init+0x310>)
90000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000dc8:	f003 0320 	and.w	r3, r3, #32
90000dcc:	603b      	str	r3, [r7, #0]
90000dce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
90000dd0:	2200      	movs	r2, #0
90000dd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90000dd6:	486b      	ldr	r0, [pc, #428]	; (90000f84 <MX_GPIO_Init+0x314>)
90000dd8:	f002 fc88 	bl	900036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
90000ddc:	2200      	movs	r2, #0
90000dde:	2104      	movs	r1, #4
90000de0:	4869      	ldr	r0, [pc, #420]	; (90000f88 <MX_GPIO_Init+0x318>)
90000de2:	f002 fc83 	bl	900036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
90000de6:	2200      	movs	r2, #0
90000de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90000dec:	4867      	ldr	r0, [pc, #412]	; (90000f8c <MX_GPIO_Init+0x31c>)
90000dee:	f002 fc7d 	bl	900036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
90000df2:	23f0      	movs	r3, #240	; 0xf0
90000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000df6:	2302      	movs	r3, #2
90000df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000dfa:	2300      	movs	r3, #0
90000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000dfe:	2300      	movs	r3, #0
90000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
90000e02:	230a      	movs	r3, #10
90000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e0a:	4619      	mov	r1, r3
90000e0c:	485d      	ldr	r0, [pc, #372]	; (90000f84 <MX_GPIO_Init+0x314>)
90000e0e:	f002 fabd 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
90000e12:	f242 0320 	movw	r3, #8224	; 0x2020
90000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e18:	2302      	movs	r3, #2
90000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e1c:	2300      	movs	r3, #0
90000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e20:	2300      	movs	r3, #0
90000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
90000e24:	2309      	movs	r3, #9
90000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e2c:	4619      	mov	r1, r3
90000e2e:	4857      	ldr	r0, [pc, #348]	; (90000f8c <MX_GPIO_Init+0x31c>)
90000e30:	f002 faac 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
90000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
90000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e3a:	2302      	movs	r3, #2
90000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e3e:	2300      	movs	r3, #0
90000e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e42:	2300      	movs	r3, #0
90000e44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
90000e46:	230a      	movs	r3, #10
90000e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e4e:	4619      	mov	r1, r3
90000e50:	484f      	ldr	r0, [pc, #316]	; (90000f90 <MX_GPIO_Init+0x320>)
90000e52:	f002 fa9b 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
90000e56:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
90000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e5c:	2302      	movs	r3, #2
90000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e60:	2300      	movs	r3, #0
90000e62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000e64:	2303      	movs	r3, #3
90000e66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
90000e68:	230c      	movs	r3, #12
90000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e70:	4619      	mov	r1, r3
90000e72:	4848      	ldr	r0, [pc, #288]	; (90000f94 <MX_GPIO_Init+0x324>)
90000e74:	f002 fa8a 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
90000e78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
90000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e7e:	2302      	movs	r3, #2
90000e80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e82:	2300      	movs	r3, #0
90000e84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e86:	2300      	movs	r3, #0
90000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000e8a:	230b      	movs	r3, #11
90000e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e92:	4619      	mov	r1, r3
90000e94:	483e      	ldr	r0, [pc, #248]	; (90000f90 <MX_GPIO_Init+0x320>)
90000e96:	f002 fa79 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
90000e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ea0:	2302      	movs	r3, #2
90000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ea4:	2300      	movs	r3, #0
90000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ea8:	2300      	movs	r3, #0
90000eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
90000eac:	2303      	movs	r3, #3
90000eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000eb4:	4619      	mov	r1, r3
90000eb6:	4838      	ldr	r0, [pc, #224]	; (90000f98 <MX_GPIO_Init+0x328>)
90000eb8:	f002 fa68 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
90000ebc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
90000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ec2:	2302      	movs	r3, #2
90000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ec6:	2300      	movs	r3, #0
90000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000eca:	2300      	movs	r3, #0
90000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
90000ece:	2309      	movs	r3, #9
90000ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ed6:	4619      	mov	r1, r3
90000ed8:	482f      	ldr	r0, [pc, #188]	; (90000f98 <MX_GPIO_Init+0x328>)
90000eda:	f002 fa57 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
90000ede:	2304      	movs	r3, #4
90000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ee2:	2302      	movs	r3, #2
90000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ee6:	2300      	movs	r3, #0
90000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000eea:	2300      	movs	r3, #0
90000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000eee:	230b      	movs	r3, #11
90000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
90000ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ef6:	4619      	mov	r1, r3
90000ef8:	4828      	ldr	r0, [pc, #160]	; (90000f9c <MX_GPIO_Init+0x32c>)
90000efa:	f002 fa47 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
90000efe:	2380      	movs	r3, #128	; 0x80
90000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000f02:	2300      	movs	r3, #0
90000f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f06:	2300      	movs	r3, #0
90000f08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
90000f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f0e:	4619      	mov	r1, r3
90000f10:	4823      	ldr	r0, [pc, #140]	; (90000fa0 <MX_GPIO_Init+0x330>)
90000f12:	f002 fa3b 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
90000f16:	2330      	movs	r3, #48	; 0x30
90000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000f1a:	2302      	movs	r3, #2
90000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f1e:	2300      	movs	r3, #0
90000f20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000f22:	2300      	movs	r3, #0
90000f24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
90000f26:	230a      	movs	r3, #10
90000f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f2e:	4619      	mov	r1, r3
90000f30:	481a      	ldr	r0, [pc, #104]	; (90000f9c <MX_GPIO_Init+0x32c>)
90000f32:	f002 fa2b 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
90000f36:	f44f 7340 	mov.w	r3, #768	; 0x300
90000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000f3c:	2302      	movs	r3, #2
90000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f40:	2300      	movs	r3, #0
90000f42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000f44:	2303      	movs	r3, #3
90000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
90000f48:	230c      	movs	r3, #12
90000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000f4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f50:	4619      	mov	r1, r3
90000f52:	480e      	ldr	r0, [pc, #56]	; (90000f8c <MX_GPIO_Init+0x31c>)
90000f54:	f002 fa1a 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
90000f58:	2304      	movs	r3, #4
90000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000f5c:	2302      	movs	r3, #2
90000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f60:	2300      	movs	r3, #0
90000f62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000f64:	2303      	movs	r3, #3
90000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
90000f68:	230c      	movs	r3, #12
90000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
90000f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f70:	4619      	mov	r1, r3
90000f72:	480b      	ldr	r0, [pc, #44]	; (90000fa0 <MX_GPIO_Init+0x330>)
90000f74:	f002 fa0a 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
90000f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
90000f7c:	e012      	b.n	90000fa4 <MX_GPIO_Init+0x334>
90000f7e:	bf00      	nop
90000f80:	58024400 	.word	0x58024400
90000f84:	58022000 	.word	0x58022000
90000f88:	58022400 	.word	0x58022400
90000f8c:	58020400 	.word	0x58020400
90000f90:	58021800 	.word	0x58021800
90000f94:	58020800 	.word	0x58020800
90000f98:	58021c00 	.word	0x58021c00
90000f9c:	58021000 	.word	0x58021000
90000fa0:	58020c00 	.word	0x58020c00
90000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000fa6:	2300      	movs	r3, #0
90000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000faa:	2300      	movs	r3, #0
90000fac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
90000fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000fb2:	4619      	mov	r1, r3
90000fb4:	485c      	ldr	r0, [pc, #368]	; (90001128 <MX_GPIO_Init+0x4b8>)
90000fb6:	f002 f9e9 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
90000fba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000fc0:	2300      	movs	r3, #0
90000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000fc4:	2300      	movs	r3, #0
90000fc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
90000fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000fcc:	4619      	mov	r1, r3
90000fce:	4857      	ldr	r0, [pc, #348]	; (9000112c <MX_GPIO_Init+0x4bc>)
90000fd0:	f002 f9dc 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
90000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
90000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000fda:	2302      	movs	r3, #2
90000fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000fde:	2300      	movs	r3, #0
90000fe0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000fe2:	2300      	movs	r3, #0
90000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
90000fe6:	2301      	movs	r3, #1
90000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000fee:	4619      	mov	r1, r3
90000ff0:	484d      	ldr	r0, [pc, #308]	; (90001128 <MX_GPIO_Init+0x4b8>)
90000ff2:	f002 f9cb 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_P_Pin USB_OTG_FS2_N_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
90000ff6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
90000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ffc:	2302      	movs	r3, #2
90000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001000:	2300      	movs	r3, #0
90001002:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001004:	2300      	movs	r3, #0
90001006:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
90001008:	230a      	movs	r3, #10
9000100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
9000100c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001010:	4619      	mov	r1, r3
90001012:	4845      	ldr	r0, [pc, #276]	; (90001128 <MX_GPIO_Init+0x4b8>)
90001014:	f002 f9ba 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
90001018:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000101e:	2302      	movs	r3, #2
90001020:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001022:	2300      	movs	r3, #0
90001024:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001026:	2300      	movs	r3, #0
90001028:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
9000102a:	230b      	movs	r3, #11
9000102c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
9000102e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001032:	4619      	mov	r1, r3
90001034:	483e      	ldr	r0, [pc, #248]	; (90001130 <MX_GPIO_Init+0x4c0>)
90001036:	f002 f9a9 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
9000103a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
9000103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90001040:	2301      	movs	r3, #1
90001042:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001044:	2300      	movs	r3, #0
90001046:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001048:	2300      	movs	r3, #0
9000104a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
9000104c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001050:	4619      	mov	r1, r3
90001052:	4837      	ldr	r0, [pc, #220]	; (90001130 <MX_GPIO_Init+0x4c0>)
90001054:	f002 f99a 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
90001058:	2304      	movs	r3, #4
9000105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
9000105c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
90001060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001062:	2300      	movs	r3, #0
90001064:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
90001066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000106a:	4619      	mov	r1, r3
9000106c:	4831      	ldr	r0, [pc, #196]	; (90001134 <MX_GPIO_Init+0x4c4>)
9000106e:	f002 f98d 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
90001072:	2301      	movs	r3, #1
90001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90001076:	2300      	movs	r3, #0
90001078:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000107a:	2300      	movs	r3, #0
9000107c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
9000107e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001082:	4619      	mov	r1, r3
90001084:	482c      	ldr	r0, [pc, #176]	; (90001138 <MX_GPIO_Init+0x4c8>)
90001086:	f002 f981 	bl	9000338c <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
9000108a:	f44f 6300 	mov.w	r3, #2048	; 0x800
9000108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
90001090:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
90001094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001096:	2300      	movs	r3, #0
90001098:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
9000109a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000109e:	4619      	mov	r1, r3
900010a0:	4826      	ldr	r0, [pc, #152]	; (9000113c <MX_GPIO_Init+0x4cc>)
900010a2:	f002 f973 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
900010a6:	2340      	movs	r3, #64	; 0x40
900010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900010aa:	2302      	movs	r3, #2
900010ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900010ae:	2300      	movs	r3, #0
900010b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900010b2:	2300      	movs	r3, #0
900010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
900010b6:	2309      	movs	r3, #9
900010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
900010ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900010be:	4619      	mov	r1, r3
900010c0:	4819      	ldr	r0, [pc, #100]	; (90001128 <MX_GPIO_Init+0x4b8>)
900010c2:	f002 f963 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
900010c6:	2303      	movs	r3, #3
900010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900010ca:	2302      	movs	r3, #2
900010cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900010ce:	2300      	movs	r3, #0
900010d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900010d2:	2300      	movs	r3, #0
900010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
900010d6:	230b      	movs	r3, #11
900010d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900010da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900010de:	4619      	mov	r1, r3
900010e0:	4817      	ldr	r0, [pc, #92]	; (90001140 <MX_GPIO_Init+0x4d0>)
900010e2:	f002 f953 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
900010e6:	2304      	movs	r3, #4
900010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900010ea:	2301      	movs	r3, #1
900010ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900010ee:	2300      	movs	r3, #0
900010f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900010f2:	2300      	movs	r3, #0
900010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
900010f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900010fa:	4619      	mov	r1, r3
900010fc:	4811      	ldr	r0, [pc, #68]	; (90001144 <MX_GPIO_Init+0x4d4>)
900010fe:	f002 f945 	bl	9000338c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
90001102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90001108:	2301      	movs	r3, #1
9000110a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000110c:	2300      	movs	r3, #0
9000110e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001110:	2300      	movs	r3, #0
90001112:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
90001114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001118:	4619      	mov	r1, r3
9000111a:	4809      	ldr	r0, [pc, #36]	; (90001140 <MX_GPIO_Init+0x4d0>)
9000111c:	f002 f936 	bl	9000338c <HAL_GPIO_Init>

}
90001120:	bf00      	nop
90001122:	3740      	adds	r7, #64	; 0x40
90001124:	46bd      	mov	sp, r7
90001126:	bd80      	pop	{r7, pc}
90001128:	58020000 	.word	0x58020000
9000112c:	58020800 	.word	0x58020800
90001130:	58022000 	.word	0x58022000
90001134:	58021800 	.word	0x58021800
90001138:	58022800 	.word	0x58022800
9000113c:	58021c00 	.word	0x58021c00
90001140:	58020400 	.word	0x58020400
90001144:	58022400 	.word	0x58022400

90001148 <PicturesPosition>:
  * @param  y2:    picture2 y position
  * @param  index:
  * @retval None
  */
static void PicturesPosition(uint32_t* x1, uint32_t* y1, uint32_t* x2, uint32_t* y2, uint32_t index)
{
90001148:	b480      	push	{r7}
9000114a:	b085      	sub	sp, #20
9000114c:	af00      	add	r7, sp, #0
9000114e:	60f8      	str	r0, [r7, #12]
90001150:	60b9      	str	r1, [r7, #8]
90001152:	607a      	str	r2, [r7, #4]
90001154:	603b      	str	r3, [r7, #0]
  /* picture1 position */
  *x1 = index*5;
90001156:	69ba      	ldr	r2, [r7, #24]
90001158:	4613      	mov	r3, r2
9000115a:	009b      	lsls	r3, r3, #2
9000115c:	441a      	add	r2, r3
9000115e:	68fb      	ldr	r3, [r7, #12]
90001160:	601a      	str	r2, [r3, #0]
  *y1 = index;
90001162:	68bb      	ldr	r3, [r7, #8]
90001164:	69ba      	ldr	r2, [r7, #24]
90001166:	601a      	str	r2, [r3, #0]

  /* picture2 position */
  *x2 = 160 - index*5;
90001168:	69ba      	ldr	r2, [r7, #24]
9000116a:	4613      	mov	r3, r2
9000116c:	009b      	lsls	r3, r3, #2
9000116e:	4413      	add	r3, r2
90001170:	f1c3 02a0 	rsb	r2, r3, #160	; 0xa0
90001174:	687b      	ldr	r3, [r7, #4]
90001176:	601a      	str	r2, [r3, #0]
  *y2 = 32 - index;
90001178:	69bb      	ldr	r3, [r7, #24]
9000117a:	f1c3 0220 	rsb	r2, r3, #32
9000117e:	683b      	ldr	r3, [r7, #0]
90001180:	601a      	str	r2, [r3, #0]
}
90001182:	bf00      	nop
90001184:	3714      	adds	r7, #20
90001186:	46bd      	mov	sp, r7
90001188:	f85d 7b04 	ldr.w	r7, [sp], #4
9000118c:	4770      	bx	lr
	...

90001190 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
90001190:	b480      	push	{r7}
90001192:	b083      	sub	sp, #12
90001194:	af00      	add	r7, sp, #0
90001196:	6078      	str	r0, [r7, #4]
  ReloadFlag = 1;
90001198:	4b04      	ldr	r3, [pc, #16]	; (900011ac <HAL_LTDC_ReloadEventCallback+0x1c>)
9000119a:	2201      	movs	r2, #1
9000119c:	601a      	str	r2, [r3, #0]
}
9000119e:	bf00      	nop
900011a0:	370c      	adds	r7, #12
900011a2:	46bd      	mov	sp, r7
900011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900011a8:	4770      	bx	lr
900011aa:	bf00      	nop
900011ac:	2000038c 	.word	0x2000038c

900011b0 <LCD_Config>:
  *        5) Load 256 colors in CLUT address for Layer 1
  * @retval
  *  None
 */
static void LCD_Config(void)
{
900011b0:	b580      	push	{r7, lr}
900011b2:	b0ca      	sub	sp, #296	; 0x128
900011b4:	af00      	add	r7, sp, #0
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
900011b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
900011ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  periph_clk_init_struct.PLL3.PLL3M = 5;
900011bc:	2305      	movs	r3, #5
900011be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  periph_clk_init_struct.PLL3.PLL3N = 160;
900011c2:	23a0      	movs	r3, #160	; 0xa0
900011c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  periph_clk_init_struct.PLL3.PLL3FRACN = 0;
900011c8:	2300      	movs	r3, #0
900011ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  periph_clk_init_struct.PLL3.PLL3P = 2;
900011ce:	2302      	movs	r3, #2
900011d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  periph_clk_init_struct.PLL3.PLL3Q = 2;
900011d4:	2302      	movs	r3, #2
900011d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  periph_clk_init_struct.PLL3.PLL3R = 83;
900011da:	2353      	movs	r3, #83	; 0x53
900011dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  periph_clk_init_struct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
900011e0:	2300      	movs	r3, #0
900011e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  periph_clk_init_struct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
900011e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
900011ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
900011ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
900011f2:	4618      	mov	r0, r3
900011f4:	f003 ff72 	bl	900050dc <HAL_RCCEx_PeriphCLKConfig>

  /* LTDC Initialization -------------------------------------------------------*/
  /* DeInit */
  LtdcHandle.Instance = LTDC;
900011f8:	4b72      	ldr	r3, [pc, #456]	; (900013c4 <LCD_Config+0x214>)
900011fa:	4a73      	ldr	r2, [pc, #460]	; (900013c8 <LCD_Config+0x218>)
900011fc:	601a      	str	r2, [r3, #0]
  HAL_LTDC_DeInit(&LtdcHandle);
900011fe:	4871      	ldr	r0, [pc, #452]	; (900013c4 <LCD_Config+0x214>)
90001200:	f002 fb78 	bl	900038f4 <HAL_LTDC_DeInit>

  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LtdcHandle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
90001204:	4b6f      	ldr	r3, [pc, #444]	; (900013c4 <LCD_Config+0x214>)
90001206:	2200      	movs	r2, #0
90001208:	605a      	str	r2, [r3, #4]
  /* Initialize the vertical synchronization polarity as active low */
  LtdcHandle.Init.VSPolarity = LTDC_VSPOLARITY_AL;
9000120a:	4b6e      	ldr	r3, [pc, #440]	; (900013c4 <LCD_Config+0x214>)
9000120c:	2200      	movs	r2, #0
9000120e:	609a      	str	r2, [r3, #8]
  /* Initialize the data enable polarity as active low */
  LtdcHandle.Init.DEPolarity = LTDC_DEPOLARITY_AL;
90001210:	4b6c      	ldr	r3, [pc, #432]	; (900013c4 <LCD_Config+0x214>)
90001212:	2200      	movs	r2, #0
90001214:	60da      	str	r2, [r3, #12]
  /* Initialize the pixel clock polarity as input pixel clock */
  LtdcHandle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001216:	4b6b      	ldr	r3, [pc, #428]	; (900013c4 <LCD_Config+0x214>)
90001218:	2200      	movs	r2, #0
9000121a:	611a      	str	r2, [r3, #16]
  /* Timing configuration */
  /* The LCD AMPIRE 640x480 is selected */
  /* Timing configuration */
  LtdcHandle.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
9000121c:	4b69      	ldr	r3, [pc, #420]	; (900013c4 <LCD_Config+0x214>)
9000121e:	2228      	movs	r2, #40	; 0x28
90001220:	615a      	str	r2, [r3, #20]
  LtdcHandle.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90001222:	4b68      	ldr	r3, [pc, #416]	; (900013c4 <LCD_Config+0x214>)
90001224:	2209      	movs	r2, #9
90001226:	619a      	str	r2, [r3, #24]
  LtdcHandle.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90001228:	4b66      	ldr	r3, [pc, #408]	; (900013c4 <LCD_Config+0x214>)
9000122a:	2235      	movs	r2, #53	; 0x35
9000122c:	61da      	str	r2, [r3, #28]
  LtdcHandle.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
9000122e:	4b65      	ldr	r3, [pc, #404]	; (900013c4 <LCD_Config+0x214>)
90001230:	220b      	movs	r2, #11
90001232:	621a      	str	r2, [r3, #32]
  LtdcHandle.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90001234:	4b63      	ldr	r3, [pc, #396]	; (900013c4 <LCD_Config+0x214>)
90001236:	f240 121b 	movw	r2, #283	; 0x11b
9000123a:	629a      	str	r2, [r3, #40]	; 0x28
  LtdcHandle.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
9000123c:	4b61      	ldr	r3, [pc, #388]	; (900013c4 <LCD_Config+0x214>)
9000123e:	f240 2215 	movw	r2, #533	; 0x215
90001242:	625a      	str	r2, [r3, #36]	; 0x24
  LtdcHandle.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
90001244:	4b5f      	ldr	r3, [pc, #380]	; (900013c4 <LCD_Config+0x214>)
90001246:	f240 121d 	movw	r2, #285	; 0x11d
9000124a:	631a      	str	r2, [r3, #48]	; 0x30
  LtdcHandle.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
9000124c:	4b5d      	ldr	r3, [pc, #372]	; (900013c4 <LCD_Config+0x214>)
9000124e:	f240 2235 	movw	r2, #565	; 0x235
90001252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure R,G,B component values for LCD background color */
  LtdcHandle.Init.Backcolor.Blue = 0;
90001254:	4b5b      	ldr	r3, [pc, #364]	; (900013c4 <LCD_Config+0x214>)
90001256:	2200      	movs	r2, #0
90001258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  LtdcHandle.Init.Backcolor.Green = 0;
9000125c:	4b59      	ldr	r3, [pc, #356]	; (900013c4 <LCD_Config+0x214>)
9000125e:	2200      	movs	r2, #0
90001260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  LtdcHandle.Init.Backcolor.Red = 0;
90001264:	4b57      	ldr	r3, [pc, #348]	; (900013c4 <LCD_Config+0x214>)
90001266:	2200      	movs	r2, #0
90001268:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  LtdcHandle.Instance = LTDC;
9000126c:	4b55      	ldr	r3, [pc, #340]	; (900013c4 <LCD_Config+0x214>)
9000126e:	4a56      	ldr	r2, [pc, #344]	; (900013c8 <LCD_Config+0x218>)
90001270:	601a      	str	r2, [r3, #0]

/* Layer1 Configuration ------------------------------------------------------*/

  /* Windowing configuration */
  pLayerCfg.WindowX0 = 0;
90001272:	2300      	movs	r3, #0
90001274:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowX1 = 320;
90001276:	f44f 73a0 	mov.w	r3, #320	; 0x140
9000127a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY0 = 0;
9000127c:	2300      	movs	r3, #0
9000127e:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.WindowY1 = 240;
90001280:	23f0      	movs	r3, #240	; 0xf0
90001282:	647b      	str	r3, [r7, #68]	; 0x44

  /* Pixel Format configuration*/
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8;
90001284:	2305      	movs	r3, #5
90001286:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Start Address configuration : frame buffer is located at FLASH memory */
  pLayerCfg.FBStartAdress = (uint32_t)&L8_320x240;
90001288:	4b50      	ldr	r3, [pc, #320]	; (900013cc <LCD_Config+0x21c>)
9000128a:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Alpha constant (255 totally opaque) */
  pLayerCfg.Alpha = 255;
9000128c:	23ff      	movs	r3, #255	; 0xff
9000128e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Default Color configuration (configure A,R,G,B component values) */
  pLayerCfg.Alpha0 = 0;
90001290:	2300      	movs	r3, #0
90001292:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.Backcolor.Blue = 0;
90001294:	2300      	movs	r3, #0
90001296:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  pLayerCfg.Backcolor.Green = 0;
9000129a:	2300      	movs	r3, #0
9000129c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  pLayerCfg.Backcolor.Red = 0;
900012a0:	2300      	movs	r3, #0
900012a2:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a

  /* Configure blending factors */
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
900012a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
900012aa:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900012ac:	2307      	movs	r3, #7
900012ae:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Configure the number of lines and number of pixels per line */
  pLayerCfg.ImageWidth = 320;
900012b0:	f44f 73a0 	mov.w	r3, #320	; 0x140
900012b4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.ImageHeight = 240;
900012b6:	23f0      	movs	r3, #240	; 0xf0
900012b8:	667b      	str	r3, [r7, #100]	; 0x64

/* Layer2 Configuration ------------------------------------------------------*/

  /* Windowing configuration */
  pLayerCfg1.WindowX0 = 160;
900012ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
900012be:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
900012c2:	22a0      	movs	r2, #160	; 0xa0
900012c4:	601a      	str	r2, [r3, #0]
  pLayerCfg1.WindowX1 = 480;
900012c6:	f507 7394 	add.w	r3, r7, #296	; 0x128
900012ca:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
900012ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
900012d2:	605a      	str	r2, [r3, #4]
  pLayerCfg1.WindowY0 = 32;
900012d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
900012d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
900012dc:	2220      	movs	r2, #32
900012de:	609a      	str	r2, [r3, #8]
  pLayerCfg1.WindowY1 = 272;
900012e0:	f507 7394 	add.w	r3, r7, #296	; 0x128
900012e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
900012e8:	f44f 7288 	mov.w	r2, #272	; 0x110
900012ec:	60da      	str	r2, [r3, #12]

  /* Pixel Format configuration*/
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
900012ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
900012f2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
900012f6:	2202      	movs	r2, #2
900012f8:	611a      	str	r2, [r3, #16]

  /* Start Address configuration : frame buffer is located at FLASH memory */
  pLayerCfg1.FBStartAdress = (uint32_t)&RGB565_320x240;
900012fa:	4a35      	ldr	r2, [pc, #212]	; (900013d0 <LCD_Config+0x220>)
900012fc:	f507 7394 	add.w	r3, r7, #296	; 0x128
90001300:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
90001304:	625a      	str	r2, [r3, #36]	; 0x24

  /* Alpha constant (255 totally opaque) */
  pLayerCfg1.Alpha = 200;
90001306:	f507 7394 	add.w	r3, r7, #296	; 0x128
9000130a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
9000130e:	22c8      	movs	r2, #200	; 0xc8
90001310:	615a      	str	r2, [r3, #20]

  /* Default Color configuration (configure A,R,G,B component values) */
  pLayerCfg1.Alpha0 = 0;
90001312:	f507 7394 	add.w	r3, r7, #296	; 0x128
90001316:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
9000131a:	2200      	movs	r2, #0
9000131c:	619a      	str	r2, [r3, #24]
  pLayerCfg1.Backcolor.Blue = 0;
9000131e:	f507 7394 	add.w	r3, r7, #296	; 0x128
90001322:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
90001326:	2200      	movs	r2, #0
90001328:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
9000132c:	f507 7394 	add.w	r3, r7, #296	; 0x128
90001330:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
90001334:	2200      	movs	r2, #0
90001336:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
9000133a:	f507 7394 	add.w	r3, r7, #296	; 0x128
9000133e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
90001342:	2200      	movs	r2, #0
90001344:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Configure blending factors */
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90001348:	f507 7394 	add.w	r3, r7, #296	; 0x128
9000134c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
90001350:	f44f 62c0 	mov.w	r2, #1536	; 0x600
90001354:	61da      	str	r2, [r3, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90001356:	f507 7394 	add.w	r3, r7, #296	; 0x128
9000135a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
9000135e:	2207      	movs	r2, #7
90001360:	621a      	str	r2, [r3, #32]

  /* Configure the number of lines and number of pixels per line */
  pLayerCfg1.ImageWidth = 320;
90001362:	f507 7394 	add.w	r3, r7, #296	; 0x128
90001366:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
9000136a:	f44f 72a0 	mov.w	r2, #320	; 0x140
9000136e:	629a      	str	r2, [r3, #40]	; 0x28
  pLayerCfg1.ImageHeight = 240;
90001370:	f507 7394 	add.w	r3, r7, #296	; 0x128
90001374:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
90001378:	22f0      	movs	r2, #240	; 0xf0
9000137a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the LTDC */
  if(HAL_LTDC_Init(&LtdcHandle) != HAL_OK)
9000137c:	4811      	ldr	r0, [pc, #68]	; (900013c4 <LCD_Config+0x214>)
9000137e:	f002 f9e9 	bl	90003754 <HAL_LTDC_Init>
90001382:	4603      	mov	r3, r0
90001384:	2b00      	cmp	r3, #0
90001386:	d001      	beq.n	9000138c <LCD_Config+0x1dc>
  {
    /* Initialization Error */
    Error_Handler();
90001388:	f000 f892 	bl	900014b0 <Error_Handler>
  }

  /* Configure the Background Layer*/
  if(HAL_LTDC_ConfigLayer(&LtdcHandle, &pLayerCfg, 0) != HAL_OK)
9000138c:	f107 0338 	add.w	r3, r7, #56	; 0x38
90001390:	2200      	movs	r2, #0
90001392:	4619      	mov	r1, r3
90001394:	480b      	ldr	r0, [pc, #44]	; (900013c4 <LCD_Config+0x214>)
90001396:	f002 fbbc 	bl	90003b12 <HAL_LTDC_ConfigLayer>
9000139a:	4603      	mov	r3, r0
9000139c:	2b00      	cmp	r3, #0
9000139e:	d001      	beq.n	900013a4 <LCD_Config+0x1f4>
  {
    /* Initialization Error */
    Error_Handler();
900013a0:	f000 f886 	bl	900014b0 <Error_Handler>
  }

  /* Configure the Foreground Layer*/
  if(HAL_LTDC_ConfigLayer(&LtdcHandle, &pLayerCfg1, 1) != HAL_OK)
900013a4:	1d3b      	adds	r3, r7, #4
900013a6:	2201      	movs	r2, #1
900013a8:	4619      	mov	r1, r3
900013aa:	4806      	ldr	r0, [pc, #24]	; (900013c4 <LCD_Config+0x214>)
900013ac:	f002 fbb1 	bl	90003b12 <HAL_LTDC_ConfigLayer>
900013b0:	4603      	mov	r3, r0
900013b2:	2b00      	cmp	r3, #0
900013b4:	d001      	beq.n	900013ba <LCD_Config+0x20a>
  {
    /* Initialization Error */
    Error_Handler();
900013b6:	f000 f87b 	bl	900014b0 <Error_Handler>
  }
}
900013ba:	bf00      	nop
900013bc:	f507 7794 	add.w	r7, r7, #296	; 0x128
900013c0:	46bd      	mov	sp, r7
900013c2:	bd80      	pop	{r7, pc}
900013c4:	200002e4 	.word	0x200002e4
900013c8:	50001000 	.word	0x50001000
900013cc:	9002eec8 	.word	0x9002eec8
900013d0:	900092c8 	.word	0x900092c8

900013d4 <CPU_CACHE_Enable>:
* @brief  CPU L1-Cache enable.
* @param  None
* @retval None
*/
static void CPU_CACHE_Enable(void)
{
900013d4:	b480      	push	{r7}
900013d6:	b085      	sub	sp, #20
900013d8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
900013da:	4b34      	ldr	r3, [pc, #208]	; (900014ac <CPU_CACHE_Enable+0xd8>)
900013dc:	695b      	ldr	r3, [r3, #20]
900013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900013e2:	2b00      	cmp	r3, #0
900013e4:	d11b      	bne.n	9000141e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
900013e6:	f3bf 8f4f 	dsb	sy
}
900013ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900013ec:	f3bf 8f6f 	isb	sy
}
900013f0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900013f2:	4b2e      	ldr	r3, [pc, #184]	; (900014ac <CPU_CACHE_Enable+0xd8>)
900013f4:	2200      	movs	r2, #0
900013f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900013fa:	f3bf 8f4f 	dsb	sy
}
900013fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001400:	f3bf 8f6f 	isb	sy
}
90001404:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90001406:	4b29      	ldr	r3, [pc, #164]	; (900014ac <CPU_CACHE_Enable+0xd8>)
90001408:	695b      	ldr	r3, [r3, #20]
9000140a:	4a28      	ldr	r2, [pc, #160]	; (900014ac <CPU_CACHE_Enable+0xd8>)
9000140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001410:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90001412:	f3bf 8f4f 	dsb	sy
}
90001416:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001418:	f3bf 8f6f 	isb	sy
}
9000141c:	e000      	b.n	90001420 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000141e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90001420:	4b22      	ldr	r3, [pc, #136]	; (900014ac <CPU_CACHE_Enable+0xd8>)
90001422:	695b      	ldr	r3, [r3, #20]
90001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90001428:	2b00      	cmp	r3, #0
9000142a:	d138      	bne.n	9000149e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000142c:	4b1f      	ldr	r3, [pc, #124]	; (900014ac <CPU_CACHE_Enable+0xd8>)
9000142e:	2200      	movs	r2, #0
90001430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90001434:	f3bf 8f4f 	dsb	sy
}
90001438:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
9000143a:	4b1c      	ldr	r3, [pc, #112]	; (900014ac <CPU_CACHE_Enable+0xd8>)
9000143c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90001440:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90001442:	68fb      	ldr	r3, [r7, #12]
90001444:	0b5b      	lsrs	r3, r3, #13
90001446:	f3c3 030e 	ubfx	r3, r3, #0, #15
9000144a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000144c:	68fb      	ldr	r3, [r7, #12]
9000144e:	08db      	lsrs	r3, r3, #3
90001450:	f3c3 0309 	ubfx	r3, r3, #0, #10
90001454:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001456:	68bb      	ldr	r3, [r7, #8]
90001458:	015a      	lsls	r2, r3, #5
9000145a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
9000145e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90001460:	687a      	ldr	r2, [r7, #4]
90001462:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001464:	4911      	ldr	r1, [pc, #68]	; (900014ac <CPU_CACHE_Enable+0xd8>)
90001466:	4313      	orrs	r3, r2
90001468:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
9000146c:	687b      	ldr	r3, [r7, #4]
9000146e:	1e5a      	subs	r2, r3, #1
90001470:	607a      	str	r2, [r7, #4]
90001472:	2b00      	cmp	r3, #0
90001474:	d1ef      	bne.n	90001456 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90001476:	68bb      	ldr	r3, [r7, #8]
90001478:	1e5a      	subs	r2, r3, #1
9000147a:	60ba      	str	r2, [r7, #8]
9000147c:	2b00      	cmp	r3, #0
9000147e:	d1e5      	bne.n	9000144c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90001480:	f3bf 8f4f 	dsb	sy
}
90001484:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90001486:	4b09      	ldr	r3, [pc, #36]	; (900014ac <CPU_CACHE_Enable+0xd8>)
90001488:	695b      	ldr	r3, [r3, #20]
9000148a:	4a08      	ldr	r2, [pc, #32]	; (900014ac <CPU_CACHE_Enable+0xd8>)
9000148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001490:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90001492:	f3bf 8f4f 	dsb	sy
}
90001496:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001498:	f3bf 8f6f 	isb	sy
}
9000149c:	e000      	b.n	900014a0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
9000149e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
900014a0:	bf00      	nop
900014a2:	3714      	adds	r7, #20
900014a4:	46bd      	mov	sp, r7
900014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900014aa:	4770      	bx	lr
900014ac:	e000ed00 	.word	0xe000ed00

900014b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
900014b0:	b580      	push	{r7, lr}
900014b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
900014b4:	b672      	cpsid	i
}
900014b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED2);
900014b8:	2001      	movs	r0, #1
900014ba:	f000 fcd5 	bl	90001e68 <BSP_LED_Toggle>
900014be:	e7fb      	b.n	900014b8 <Error_Handler+0x8>

900014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
900014c0:	b480      	push	{r7}
900014c2:	b083      	sub	sp, #12
900014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
900014c6:	4b0a      	ldr	r3, [pc, #40]	; (900014f0 <HAL_MspInit+0x30>)
900014c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900014cc:	4a08      	ldr	r2, [pc, #32]	; (900014f0 <HAL_MspInit+0x30>)
900014ce:	f043 0302 	orr.w	r3, r3, #2
900014d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
900014d6:	4b06      	ldr	r3, [pc, #24]	; (900014f0 <HAL_MspInit+0x30>)
900014d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900014dc:	f003 0302 	and.w	r3, r3, #2
900014e0:	607b      	str	r3, [r7, #4]
900014e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
900014e4:	bf00      	nop
900014e6:	370c      	adds	r7, #12
900014e8:	46bd      	mov	sp, r7
900014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
900014ee:	4770      	bx	lr
900014f0:	58024400 	.word	0x58024400

900014f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
900014f4:	b580      	push	{r7, lr}
900014f6:	b090      	sub	sp, #64	; 0x40
900014f8:	af00      	add	r7, sp, #0
900014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900014fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001500:	2200      	movs	r2, #0
90001502:	601a      	str	r2, [r3, #0]
90001504:	605a      	str	r2, [r3, #4]
90001506:	609a      	str	r2, [r3, #8]
90001508:	60da      	str	r2, [r3, #12]
9000150a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
9000150c:	687b      	ldr	r3, [r7, #4]
9000150e:	681b      	ldr	r3, [r3, #0]
90001510:	4a72      	ldr	r2, [pc, #456]	; (900016dc <HAL_ADC_MspInit+0x1e8>)
90001512:	4293      	cmp	r3, r2
90001514:	d14e      	bne.n	900015b4 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
90001516:	4b72      	ldr	r3, [pc, #456]	; (900016e0 <HAL_ADC_MspInit+0x1ec>)
90001518:	681b      	ldr	r3, [r3, #0]
9000151a:	3301      	adds	r3, #1
9000151c:	4a70      	ldr	r2, [pc, #448]	; (900016e0 <HAL_ADC_MspInit+0x1ec>)
9000151e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
90001520:	4b6f      	ldr	r3, [pc, #444]	; (900016e0 <HAL_ADC_MspInit+0x1ec>)
90001522:	681b      	ldr	r3, [r3, #0]
90001524:	2b01      	cmp	r3, #1
90001526:	d10e      	bne.n	90001546 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
90001528:	4b6e      	ldr	r3, [pc, #440]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
9000152a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
9000152e:	4a6d      	ldr	r2, [pc, #436]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001530:	f043 0320 	orr.w	r3, r3, #32
90001534:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
90001538:	4b6a      	ldr	r3, [pc, #424]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
9000153a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
9000153e:	f003 0320 	and.w	r3, r3, #32
90001542:	62bb      	str	r3, [r7, #40]	; 0x28
90001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
90001546:	4b67      	ldr	r3, [pc, #412]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000154c:	4a65      	ldr	r2, [pc, #404]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
9000154e:	f043 0304 	orr.w	r3, r3, #4
90001552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001556:	4b63      	ldr	r3, [pc, #396]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000155c:	f003 0304 	and.w	r3, r3, #4
90001560:	627b      	str	r3, [r7, #36]	; 0x24
90001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
90001564:	4b5f      	ldr	r3, [pc, #380]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000156a:	4a5e      	ldr	r2, [pc, #376]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
9000156c:	f043 0301 	orr.w	r3, r3, #1
90001570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001574:	4b5b      	ldr	r3, [pc, #364]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000157a:	f003 0301 	and.w	r3, r3, #1
9000157e:	623b      	str	r3, [r7, #32]
90001580:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
90001582:	2301      	movs	r3, #1
90001584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
90001586:	2303      	movs	r3, #3
90001588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000158a:	2300      	movs	r3, #0
9000158c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000158e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001592:	4619      	mov	r1, r3
90001594:	4854      	ldr	r0, [pc, #336]	; (900016e8 <HAL_ADC_MspInit+0x1f4>)
90001596:	f001 fef9 	bl	9000338c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
9000159a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
9000159e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
900015a2:	f000 fd41 	bl	90002028 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
900015a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
900015aa:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
900015ae:	f000 fd3b 	bl	90002028 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
900015b2:	e08f      	b.n	900016d4 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
900015b4:	687b      	ldr	r3, [r7, #4]
900015b6:	681b      	ldr	r3, [r3, #0]
900015b8:	4a4c      	ldr	r2, [pc, #304]	; (900016ec <HAL_ADC_MspInit+0x1f8>)
900015ba:	4293      	cmp	r3, r2
900015bc:	d133      	bne.n	90001626 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
900015be:	4b48      	ldr	r3, [pc, #288]	; (900016e0 <HAL_ADC_MspInit+0x1ec>)
900015c0:	681b      	ldr	r3, [r3, #0]
900015c2:	3301      	adds	r3, #1
900015c4:	4a46      	ldr	r2, [pc, #280]	; (900016e0 <HAL_ADC_MspInit+0x1ec>)
900015c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
900015c8:	4b45      	ldr	r3, [pc, #276]	; (900016e0 <HAL_ADC_MspInit+0x1ec>)
900015ca:	681b      	ldr	r3, [r3, #0]
900015cc:	2b01      	cmp	r3, #1
900015ce:	d10e      	bne.n	900015ee <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
900015d0:	4b44      	ldr	r3, [pc, #272]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
900015d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900015d6:	4a43      	ldr	r2, [pc, #268]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
900015d8:	f043 0320 	orr.w	r3, r3, #32
900015dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
900015e0:	4b40      	ldr	r3, [pc, #256]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
900015e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900015e6:	f003 0320 	and.w	r3, r3, #32
900015ea:	61fb      	str	r3, [r7, #28]
900015ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
900015ee:	4b3d      	ldr	r3, [pc, #244]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
900015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900015f4:	4a3b      	ldr	r2, [pc, #236]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
900015f6:	f043 0301 	orr.w	r3, r3, #1
900015fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900015fe:	4b39      	ldr	r3, [pc, #228]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001604:	f003 0301 	and.w	r3, r3, #1
90001608:	61bb      	str	r3, [r7, #24]
9000160a:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
9000160c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
90001610:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
90001614:	f000 fd08 	bl	90002028 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
90001618:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
9000161c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
90001620:	f000 fd02 	bl	90002028 <HAL_SYSCFG_AnalogSwitchConfig>
}
90001624:	e056      	b.n	900016d4 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
90001626:	687b      	ldr	r3, [r7, #4]
90001628:	681b      	ldr	r3, [r3, #0]
9000162a:	4a31      	ldr	r2, [pc, #196]	; (900016f0 <HAL_ADC_MspInit+0x1fc>)
9000162c:	4293      	cmp	r3, r2
9000162e:	d151      	bne.n	900016d4 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
90001630:	4b2c      	ldr	r3, [pc, #176]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001636:	4a2b      	ldr	r2, [pc, #172]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000163c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001640:	4b28      	ldr	r3, [pc, #160]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
9000164a:	617b      	str	r3, [r7, #20]
9000164c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
9000164e:	4b25      	ldr	r3, [pc, #148]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001654:	4a23      	ldr	r2, [pc, #140]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001656:	f043 0320 	orr.w	r3, r3, #32
9000165a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000165e:	4b21      	ldr	r3, [pc, #132]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001664:	f003 0320 	and.w	r3, r3, #32
90001668:	613b      	str	r3, [r7, #16]
9000166a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
9000166c:	4b1d      	ldr	r3, [pc, #116]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
9000166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001672:	4a1c      	ldr	r2, [pc, #112]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
90001674:	f043 0304 	orr.w	r3, r3, #4
90001678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000167c:	4b19      	ldr	r3, [pc, #100]	; (900016e4 <HAL_ADC_MspInit+0x1f0>)
9000167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001682:	f003 0304 	and.w	r3, r3, #4
90001686:	60fb      	str	r3, [r7, #12]
90001688:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
9000168a:	f44f 7380 	mov.w	r3, #256	; 0x100
9000168e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
90001690:	2303      	movs	r3, #3
90001692:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001694:	2300      	movs	r3, #0
90001696:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90001698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000169c:	4619      	mov	r1, r3
9000169e:	4815      	ldr	r0, [pc, #84]	; (900016f4 <HAL_ADC_MspInit+0x200>)
900016a0:	f001 fe74 	bl	9000338c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
900016a4:	2301      	movs	r3, #1
900016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
900016a8:	2303      	movs	r3, #3
900016aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900016ac:	2300      	movs	r3, #0
900016ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
900016b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900016b4:	4619      	mov	r1, r3
900016b6:	480c      	ldr	r0, [pc, #48]	; (900016e8 <HAL_ADC_MspInit+0x1f4>)
900016b8:	f001 fe68 	bl	9000338c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
900016bc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
900016c0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
900016c4:	f000 fcb0 	bl	90002028 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
900016c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
900016cc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
900016d0:	f000 fcaa 	bl	90002028 <HAL_SYSCFG_AnalogSwitchConfig>
}
900016d4:	bf00      	nop
900016d6:	3740      	adds	r7, #64	; 0x40
900016d8:	46bd      	mov	sp, r7
900016da:	bd80      	pop	{r7, pc}
900016dc:	40022000 	.word	0x40022000
900016e0:	20000398 	.word	0x20000398
900016e4:	58024400 	.word	0x58024400
900016e8:	58020800 	.word	0x58020800
900016ec:	40022100 	.word	0x40022100
900016f0:	58026000 	.word	0x58026000
900016f4:	58021400 	.word	0x58021400

900016f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
900016f8:	b580      	push	{r7, lr}
900016fa:	b0ba      	sub	sp, #232	; 0xe8
900016fc:	af00      	add	r7, sp, #0
900016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90001700:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
90001704:	2200      	movs	r2, #0
90001706:	601a      	str	r2, [r3, #0]
90001708:	605a      	str	r2, [r3, #4]
9000170a:	609a      	str	r2, [r3, #8]
9000170c:	60da      	str	r2, [r3, #12]
9000170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90001710:	f107 0318 	add.w	r3, r7, #24
90001714:	22bc      	movs	r2, #188	; 0xbc
90001716:	2100      	movs	r1, #0
90001718:	4618      	mov	r0, r3
9000171a:	f007 f8bd 	bl	90008898 <memset>
  if(hspi->Instance==SPI2)
9000171e:	687b      	ldr	r3, [r7, #4]
90001720:	681b      	ldr	r3, [r3, #0]
90001722:	4a54      	ldr	r2, [pc, #336]	; (90001874 <HAL_SPI_MspInit+0x17c>)
90001724:	4293      	cmp	r3, r2
90001726:	f040 80a0 	bne.w	9000186a <HAL_SPI_MspInit+0x172>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
9000172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000172e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
90001730:	2300      	movs	r3, #0
90001732:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001734:	f107 0318 	add.w	r3, r7, #24
90001738:	4618      	mov	r0, r3
9000173a:	f003 fccf 	bl	900050dc <HAL_RCCEx_PeriphCLKConfig>
9000173e:	4603      	mov	r3, r0
90001740:	2b00      	cmp	r3, #0
90001742:	d001      	beq.n	90001748 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
90001744:	f7ff feb4 	bl	900014b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
90001748:	4b4b      	ldr	r3, [pc, #300]	; (90001878 <HAL_SPI_MspInit+0x180>)
9000174a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
9000174e:	4a4a      	ldr	r2, [pc, #296]	; (90001878 <HAL_SPI_MspInit+0x180>)
90001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90001754:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90001758:	4b47      	ldr	r3, [pc, #284]	; (90001878 <HAL_SPI_MspInit+0x180>)
9000175a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
9000175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90001762:	617b      	str	r3, [r7, #20]
90001764:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90001766:	4b44      	ldr	r3, [pc, #272]	; (90001878 <HAL_SPI_MspInit+0x180>)
90001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000176c:	4a42      	ldr	r2, [pc, #264]	; (90001878 <HAL_SPI_MspInit+0x180>)
9000176e:	f043 0302 	orr.w	r3, r3, #2
90001772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001776:	4b40      	ldr	r3, [pc, #256]	; (90001878 <HAL_SPI_MspInit+0x180>)
90001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000177c:	f003 0302 	and.w	r3, r3, #2
90001780:	613b      	str	r3, [r7, #16]
90001782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90001784:	4b3c      	ldr	r3, [pc, #240]	; (90001878 <HAL_SPI_MspInit+0x180>)
90001786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000178a:	4a3b      	ldr	r2, [pc, #236]	; (90001878 <HAL_SPI_MspInit+0x180>)
9000178c:	f043 0308 	orr.w	r3, r3, #8
90001790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001794:	4b38      	ldr	r3, [pc, #224]	; (90001878 <HAL_SPI_MspInit+0x180>)
90001796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000179a:	f003 0308 	and.w	r3, r3, #8
9000179e:	60fb      	str	r3, [r7, #12]
900017a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
900017a2:	4b35      	ldr	r3, [pc, #212]	; (90001878 <HAL_SPI_MspInit+0x180>)
900017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900017a8:	4a33      	ldr	r2, [pc, #204]	; (90001878 <HAL_SPI_MspInit+0x180>)
900017aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900017ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900017b2:	4b31      	ldr	r3, [pc, #196]	; (90001878 <HAL_SPI_MspInit+0x180>)
900017b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
900017bc:	60bb      	str	r3, [r7, #8]
900017be:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
900017c0:	2310      	movs	r3, #16
900017c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900017c6:	2302      	movs	r3, #2
900017c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900017cc:	2300      	movs	r3, #0
900017ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900017d2:	2300      	movs	r3, #0
900017d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
900017d8:	2307      	movs	r3, #7
900017da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900017de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
900017e2:	4619      	mov	r1, r3
900017e4:	4825      	ldr	r0, [pc, #148]	; (9000187c <HAL_SPI_MspInit+0x184>)
900017e6:	f001 fdd1 	bl	9000338c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
900017ea:	2308      	movs	r3, #8
900017ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900017f0:	2302      	movs	r3, #2
900017f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900017f6:	2300      	movs	r3, #0
900017f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900017fc:	2300      	movs	r3, #0
900017fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
90001802:	2305      	movs	r3, #5
90001804:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90001808:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
9000180c:	4619      	mov	r1, r3
9000180e:	481c      	ldr	r0, [pc, #112]	; (90001880 <HAL_SPI_MspInit+0x188>)
90001810:	f001 fdbc 	bl	9000338c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
90001814:	2304      	movs	r3, #4
90001816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000181a:	2302      	movs	r3, #2
9000181c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001820:	2300      	movs	r3, #0
90001822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001826:	2300      	movs	r3, #0
90001828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
9000182c:	2305      	movs	r3, #5
9000182e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90001832:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
90001836:	4619      	mov	r1, r3
90001838:	4812      	ldr	r0, [pc, #72]	; (90001884 <HAL_SPI_MspInit+0x18c>)
9000183a:	f001 fda7 	bl	9000338c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
9000183e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90001842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001846:	2302      	movs	r3, #2
90001848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000184c:	2300      	movs	r3, #0
9000184e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001852:	2300      	movs	r3, #0
90001854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
90001858:	2305      	movs	r3, #5
9000185a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
9000185e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
90001862:	4619      	mov	r1, r3
90001864:	4805      	ldr	r0, [pc, #20]	; (9000187c <HAL_SPI_MspInit+0x184>)
90001866:	f001 fd91 	bl	9000338c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
9000186a:	bf00      	nop
9000186c:	37e8      	adds	r7, #232	; 0xe8
9000186e:	46bd      	mov	sp, r7
90001870:	bd80      	pop	{r7, pc}
90001872:	bf00      	nop
90001874:	40003800 	.word	0x40003800
90001878:	58024400 	.word	0x58024400
9000187c:	58020400 	.word	0x58020400
90001880:	58020c00 	.word	0x58020c00
90001884:	58022000 	.word	0x58022000

90001888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
90001888:	b580      	push	{r7, lr}
9000188a:	b0b8      	sub	sp, #224	; 0xe0
9000188c:	af00      	add	r7, sp, #0
9000188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90001890:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
90001894:	2200      	movs	r2, #0
90001896:	601a      	str	r2, [r3, #0]
90001898:	605a      	str	r2, [r3, #4]
9000189a:	609a      	str	r2, [r3, #8]
9000189c:	60da      	str	r2, [r3, #12]
9000189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900018a0:	f107 0310 	add.w	r3, r7, #16
900018a4:	22bc      	movs	r2, #188	; 0xbc
900018a6:	2100      	movs	r1, #0
900018a8:	4618      	mov	r0, r3
900018aa:	f006 fff5 	bl	90008898 <memset>
  if(huart->Instance==USART3)
900018ae:	687b      	ldr	r3, [r7, #4]
900018b0:	681b      	ldr	r3, [r3, #0]
900018b2:	4a25      	ldr	r2, [pc, #148]	; (90001948 <HAL_UART_MspInit+0xc0>)
900018b4:	4293      	cmp	r3, r2
900018b6:	d142      	bne.n	9000193e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
900018b8:	2302      	movs	r3, #2
900018ba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
900018bc:	2303      	movs	r3, #3
900018be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900018c2:	f107 0310 	add.w	r3, r7, #16
900018c6:	4618      	mov	r0, r3
900018c8:	f003 fc08 	bl	900050dc <HAL_RCCEx_PeriphCLKConfig>
900018cc:	4603      	mov	r3, r0
900018ce:	2b00      	cmp	r3, #0
900018d0:	d001      	beq.n	900018d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
900018d2:	f7ff fded 	bl	900014b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
900018d6:	4b1d      	ldr	r3, [pc, #116]	; (9000194c <HAL_UART_MspInit+0xc4>)
900018d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900018dc:	4a1b      	ldr	r2, [pc, #108]	; (9000194c <HAL_UART_MspInit+0xc4>)
900018de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
900018e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
900018e6:	4b19      	ldr	r3, [pc, #100]	; (9000194c <HAL_UART_MspInit+0xc4>)
900018e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900018ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
900018f0:	60fb      	str	r3, [r7, #12]
900018f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
900018f4:	4b15      	ldr	r3, [pc, #84]	; (9000194c <HAL_UART_MspInit+0xc4>)
900018f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900018fa:	4a14      	ldr	r2, [pc, #80]	; (9000194c <HAL_UART_MspInit+0xc4>)
900018fc:	f043 0302 	orr.w	r3, r3, #2
90001900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001904:	4b11      	ldr	r3, [pc, #68]	; (9000194c <HAL_UART_MspInit+0xc4>)
90001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000190a:	f003 0302 	and.w	r3, r3, #2
9000190e:	60bb      	str	r3, [r7, #8]
90001910:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
90001912:	f44f 6340 	mov.w	r3, #3072	; 0xc00
90001916:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000191a:	2302      	movs	r3, #2
9000191c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001920:	2300      	movs	r3, #0
90001922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001926:	2300      	movs	r3, #0
90001928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
9000192c:	2307      	movs	r3, #7
9000192e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90001932:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
90001936:	4619      	mov	r1, r3
90001938:	4805      	ldr	r0, [pc, #20]	; (90001950 <HAL_UART_MspInit+0xc8>)
9000193a:	f001 fd27 	bl	9000338c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
9000193e:	bf00      	nop
90001940:	37e0      	adds	r7, #224	; 0xe0
90001942:	46bd      	mov	sp, r7
90001944:	bd80      	pop	{r7, pc}
90001946:	bf00      	nop
90001948:	40004800 	.word	0x40004800
9000194c:	58024400 	.word	0x58024400
90001950:	58020400 	.word	0x58020400

90001954 <HAL_LTDC_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{  
90001954:	b580      	push	{r7, lr}
90001956:	b08e      	sub	sp, #56	; 0x38
90001958:	af00      	add	r7, sp, #0
9000195a:	6078      	str	r0, [r7, #4]
 GPIO_InitTypeDef gpio_init_structure;

  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
9000195c:	4b5b      	ldr	r3, [pc, #364]	; (90001acc <HAL_LTDC_MspInit+0x178>)
9000195e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
90001962:	4a5a      	ldr	r2, [pc, #360]	; (90001acc <HAL_LTDC_MspInit+0x178>)
90001964:	f043 0308 	orr.w	r3, r3, #8
90001968:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
9000196c:	4b57      	ldr	r3, [pc, #348]	; (90001acc <HAL_LTDC_MspInit+0x178>)
9000196e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
90001972:	f003 0308 	and.w	r3, r3, #8
90001976:	623b      	str	r3, [r7, #32]
90001978:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOI_CLK_ENABLE();
9000197a:	4b54      	ldr	r3, [pc, #336]	; (90001acc <HAL_LTDC_MspInit+0x178>)
9000197c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001980:	4a52      	ldr	r2, [pc, #328]	; (90001acc <HAL_LTDC_MspInit+0x178>)
90001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000198a:	4b50      	ldr	r3, [pc, #320]	; (90001acc <HAL_LTDC_MspInit+0x178>)
9000198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001994:	61fb      	str	r3, [r7, #28]
90001996:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90001998:	4b4c      	ldr	r3, [pc, #304]	; (90001acc <HAL_LTDC_MspInit+0x178>)
9000199a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000199e:	4a4b      	ldr	r2, [pc, #300]	; (90001acc <HAL_LTDC_MspInit+0x178>)
900019a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900019a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900019a8:	4b48      	ldr	r3, [pc, #288]	; (90001acc <HAL_LTDC_MspInit+0x178>)
900019aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900019ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
900019b2:	61bb      	str	r3, [r7, #24]
900019b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
900019b6:	4b45      	ldr	r3, [pc, #276]	; (90001acc <HAL_LTDC_MspInit+0x178>)
900019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900019bc:	4a43      	ldr	r2, [pc, #268]	; (90001acc <HAL_LTDC_MspInit+0x178>)
900019be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900019c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900019c6:	4b41      	ldr	r3, [pc, #260]	; (90001acc <HAL_LTDC_MspInit+0x178>)
900019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900019d0:	617b      	str	r3, [r7, #20]
900019d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900019d4:	4b3d      	ldr	r3, [pc, #244]	; (90001acc <HAL_LTDC_MspInit+0x178>)
900019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900019da:	4a3c      	ldr	r2, [pc, #240]	; (90001acc <HAL_LTDC_MspInit+0x178>)
900019dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900019e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900019e4:	4b39      	ldr	r3, [pc, #228]	; (90001acc <HAL_LTDC_MspInit+0x178>)
900019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900019ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
900019ee:	613b      	str	r3, [r7, #16]
900019f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
900019f2:	4b36      	ldr	r3, [pc, #216]	; (90001acc <HAL_LTDC_MspInit+0x178>)
900019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900019f8:	4a34      	ldr	r2, [pc, #208]	; (90001acc <HAL_LTDC_MspInit+0x178>)
900019fa:	f043 0308 	orr.w	r3, r3, #8
900019fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001a02:	4b32      	ldr	r3, [pc, #200]	; (90001acc <HAL_LTDC_MspInit+0x178>)
90001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001a08:	f003 0308 	and.w	r3, r3, #8
90001a0c:	60fb      	str	r3, [r7, #12]
90001a0e:	68fb      	ldr	r3, [r7, #12]
  /*** LTDC Pins configuration ***/
  /* GPIOI configuration */
  gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 |GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
90001a10:	f24d 2303 	movw	r3, #53763	; 0xd203
90001a14:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001a16:	2302      	movs	r3, #2
90001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001a1a:	2300      	movs	r3, #0
90001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001a1e:	2302      	movs	r3, #2
90001a20:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001a22:	230e      	movs	r3, #14
90001a24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90001a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
90001a2a:	4619      	mov	r1, r3
90001a2c:	4828      	ldr	r0, [pc, #160]	; (90001ad0 <HAL_LTDC_MspInit+0x17c>)
90001a2e:	f001 fcad 	bl	9000338c <HAL_GPIO_Init>

  /* GPIOJ configuration */
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_3 | \
90001a32:	f64f 73fb 	movw	r3, #65531	; 0xfffb
90001a36:	627b      	str	r3, [r7, #36]	; 0x24
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001a38:	2302      	movs	r3, #2
90001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001a3c:	2300      	movs	r3, #0
90001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001a40:	2302      	movs	r3, #2
90001a42:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001a44:	230e      	movs	r3, #14
90001a46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90001a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
90001a4c:	4619      	mov	r1, r3
90001a4e:	4821      	ldr	r0, [pc, #132]	; (90001ad4 <HAL_LTDC_MspInit+0x180>)
90001a50:	f001 fc9c 	bl	9000338c <HAL_GPIO_Init>

  /* GPIOK configuration */
  gpio_init_structure.Pin       = GPIO_PIN_2 | GPIO_PIN_3 | \
90001a54:	237c      	movs	r3, #124	; 0x7c
90001a56:	627b      	str	r3, [r7, #36]	; 0x24
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 ;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001a58:	2302      	movs	r3, #2
90001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001a5c:	2300      	movs	r3, #0
90001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001a60:	2302      	movs	r3, #2
90001a62:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001a64:	230e      	movs	r3, #14
90001a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90001a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
90001a6c:	4619      	mov	r1, r3
90001a6e:	481a      	ldr	r0, [pc, #104]	; (90001ad8 <HAL_LTDC_MspInit+0x184>)
90001a70:	f001 fc8c 	bl	9000338c <HAL_GPIO_Init>
  
  /* GPIOH configuration */
  gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
90001a74:	f240 2302 	movw	r3, #514	; 0x202
90001a78:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001a7a:	2302      	movs	r3, #2
90001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001a7e:	2300      	movs	r3, #0
90001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001a82:	2302      	movs	r3, #2
90001a84:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001a86:	230e      	movs	r3, #14
90001a88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);  
90001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
90001a8e:	4619      	mov	r1, r3
90001a90:	4812      	ldr	r0, [pc, #72]	; (90001adc <HAL_LTDC_MspInit+0x188>)
90001a92:	f001 fc7b 	bl	9000338c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90001a96:	2380      	movs	r3, #128	; 0x80
90001a98:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90001a9a:	2301      	movs	r3, #1
90001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);  
90001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
90001aa2:	4619      	mov	r1, r3
90001aa4:	480e      	ldr	r0, [pc, #56]	; (90001ae0 <HAL_LTDC_MspInit+0x18c>)
90001aa6:	f001 fc71 	bl	9000338c <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
90001aaa:	2201      	movs	r2, #1
90001aac:	2180      	movs	r1, #128	; 0x80
90001aae:	480c      	ldr	r0, [pc, #48]	; (90001ae0 <HAL_LTDC_MspInit+0x18c>)
90001ab0:	f001 fe1c 	bl	900036ec <HAL_GPIO_WritePin>

  /* Set LTDC Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0xF, 0);   
90001ab4:	2200      	movs	r2, #0
90001ab6:	210f      	movs	r1, #15
90001ab8:	2058      	movs	r0, #88	; 0x58
90001aba:	f001 fc32 	bl	90003322 <HAL_NVIC_SetPriority>

  /* Enable LTDC Interrupt */
  HAL_NVIC_EnableIRQ(LTDC_IRQn);   
90001abe:	2058      	movs	r0, #88	; 0x58
90001ac0:	f001 fc49 	bl	90003356 <HAL_NVIC_EnableIRQ>
}
90001ac4:	bf00      	nop
90001ac6:	3738      	adds	r7, #56	; 0x38
90001ac8:	46bd      	mov	sp, r7
90001aca:	bd80      	pop	{r7, pc}
90001acc:	58024400 	.word	0x58024400
90001ad0:	58022000 	.word	0x58022000
90001ad4:	58022400 	.word	0x58022400
90001ad8:	58022800 	.word	0x58022800
90001adc:	58021c00 	.word	0x58021c00
90001ae0:	58020c00 	.word	0x58020c00

90001ae4 <HAL_LTDC_MspDeInit>:
  *          - Disable the Peripheral's clock
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
90001ae4:	b480      	push	{r7}
90001ae6:	b083      	sub	sp, #12
90001ae8:	af00      	add	r7, sp, #0
90001aea:	6078      	str	r0, [r7, #4]
  
  /*##-1- Reset peripherals ##################################################*/
  /* Enable LTDC reset state */
  __HAL_RCC_LTDC_FORCE_RESET();
90001aec:	4b0a      	ldr	r3, [pc, #40]	; (90001b18 <HAL_LTDC_MspDeInit+0x34>)
90001aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90001af2:	4a09      	ldr	r2, [pc, #36]	; (90001b18 <HAL_LTDC_MspDeInit+0x34>)
90001af4:	f043 0308 	orr.w	r3, r3, #8
90001af8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  /* Release LTDC from reset state */ 
  __HAL_RCC_LTDC_RELEASE_RESET();
90001afc:	4b06      	ldr	r3, [pc, #24]	; (90001b18 <HAL_LTDC_MspDeInit+0x34>)
90001afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90001b02:	4a05      	ldr	r2, [pc, #20]	; (90001b18 <HAL_LTDC_MspDeInit+0x34>)
90001b04:	f023 0308 	bic.w	r3, r3, #8
90001b08:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
90001b0c:	bf00      	nop
90001b0e:	370c      	adds	r7, #12
90001b10:	46bd      	mov	sp, r7
90001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
90001b16:	4770      	bx	lr
90001b18:	58024400 	.word	0x58024400

90001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
90001b1c:	b480      	push	{r7}
90001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
90001b20:	e7fe      	b.n	90001b20 <NMI_Handler+0x4>

90001b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
90001b22:	b480      	push	{r7}
90001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90001b26:	e7fe      	b.n	90001b26 <HardFault_Handler+0x4>

90001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
90001b28:	b480      	push	{r7}
90001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90001b2c:	e7fe      	b.n	90001b2c <MemManage_Handler+0x4>

90001b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
90001b2e:	b480      	push	{r7}
90001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90001b32:	e7fe      	b.n	90001b32 <BusFault_Handler+0x4>

90001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
90001b34:	b480      	push	{r7}
90001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90001b38:	e7fe      	b.n	90001b38 <UsageFault_Handler+0x4>

90001b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
90001b3a:	b480      	push	{r7}
90001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
90001b3e:	bf00      	nop
90001b40:	46bd      	mov	sp, r7
90001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
90001b46:	4770      	bx	lr

90001b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
90001b48:	b480      	push	{r7}
90001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
90001b4c:	bf00      	nop
90001b4e:	46bd      	mov	sp, r7
90001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
90001b54:	4770      	bx	lr

90001b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
90001b56:	b480      	push	{r7}
90001b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
90001b5a:	bf00      	nop
90001b5c:	46bd      	mov	sp, r7
90001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001b62:	4770      	bx	lr

90001b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
90001b64:	b580      	push	{r7, lr}
90001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
90001b68:	f000 fa0e 	bl	90001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
90001b6c:	bf00      	nop
90001b6e:	bd80      	pop	{r7, pc}

90001b70 <LTDC_IRQHandler>:
  * @brief  This function handles LTDC global interrupt request.
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
90001b70:	b580      	push	{r7, lr}
90001b72:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&LtdcHandle);
90001b74:	4802      	ldr	r0, [pc, #8]	; (90001b80 <LTDC_IRQHandler+0x10>)
90001b76:	f001 ff14 	bl	900039a2 <HAL_LTDC_IRQHandler>
}
90001b7a:	bf00      	nop
90001b7c:	bd80      	pop	{r7, pc}
90001b7e:	bf00      	nop
90001b80:	200002e4 	.word	0x200002e4

90001b84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90001b84:	b580      	push	{r7, lr}
90001b86:	b086      	sub	sp, #24
90001b88:	af00      	add	r7, sp, #0
90001b8a:	60f8      	str	r0, [r7, #12]
90001b8c:	60b9      	str	r1, [r7, #8]
90001b8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001b90:	2300      	movs	r3, #0
90001b92:	617b      	str	r3, [r7, #20]
90001b94:	e00a      	b.n	90001bac <_read+0x28>
	{
		*ptr++ = __io_getchar();
90001b96:	f3af 8000 	nop.w
90001b9a:	4601      	mov	r1, r0
90001b9c:	68bb      	ldr	r3, [r7, #8]
90001b9e:	1c5a      	adds	r2, r3, #1
90001ba0:	60ba      	str	r2, [r7, #8]
90001ba2:	b2ca      	uxtb	r2, r1
90001ba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001ba6:	697b      	ldr	r3, [r7, #20]
90001ba8:	3301      	adds	r3, #1
90001baa:	617b      	str	r3, [r7, #20]
90001bac:	697a      	ldr	r2, [r7, #20]
90001bae:	687b      	ldr	r3, [r7, #4]
90001bb0:	429a      	cmp	r2, r3
90001bb2:	dbf0      	blt.n	90001b96 <_read+0x12>
	}

return len;
90001bb4:	687b      	ldr	r3, [r7, #4]
}
90001bb6:	4618      	mov	r0, r3
90001bb8:	3718      	adds	r7, #24
90001bba:	46bd      	mov	sp, r7
90001bbc:	bd80      	pop	{r7, pc}

90001bbe <_close>:
	}
	return len;
}

int _close(int file)
{
90001bbe:	b480      	push	{r7}
90001bc0:	b083      	sub	sp, #12
90001bc2:	af00      	add	r7, sp, #0
90001bc4:	6078      	str	r0, [r7, #4]
	return -1;
90001bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
90001bca:	4618      	mov	r0, r3
90001bcc:	370c      	adds	r7, #12
90001bce:	46bd      	mov	sp, r7
90001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
90001bd4:	4770      	bx	lr

90001bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
90001bd6:	b480      	push	{r7}
90001bd8:	b083      	sub	sp, #12
90001bda:	af00      	add	r7, sp, #0
90001bdc:	6078      	str	r0, [r7, #4]
90001bde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
90001be0:	683b      	ldr	r3, [r7, #0]
90001be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
90001be6:	605a      	str	r2, [r3, #4]
	return 0;
90001be8:	2300      	movs	r3, #0
}
90001bea:	4618      	mov	r0, r3
90001bec:	370c      	adds	r7, #12
90001bee:	46bd      	mov	sp, r7
90001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
90001bf4:	4770      	bx	lr

90001bf6 <_isatty>:

int _isatty(int file)
{
90001bf6:	b480      	push	{r7}
90001bf8:	b083      	sub	sp, #12
90001bfa:	af00      	add	r7, sp, #0
90001bfc:	6078      	str	r0, [r7, #4]
	return 1;
90001bfe:	2301      	movs	r3, #1
}
90001c00:	4618      	mov	r0, r3
90001c02:	370c      	adds	r7, #12
90001c04:	46bd      	mov	sp, r7
90001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
90001c0a:	4770      	bx	lr

90001c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90001c0c:	b480      	push	{r7}
90001c0e:	b085      	sub	sp, #20
90001c10:	af00      	add	r7, sp, #0
90001c12:	60f8      	str	r0, [r7, #12]
90001c14:	60b9      	str	r1, [r7, #8]
90001c16:	607a      	str	r2, [r7, #4]
	return 0;
90001c18:	2300      	movs	r3, #0
}
90001c1a:	4618      	mov	r0, r3
90001c1c:	3714      	adds	r7, #20
90001c1e:	46bd      	mov	sp, r7
90001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
90001c24:	4770      	bx	lr
	...

90001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90001c28:	b580      	push	{r7, lr}
90001c2a:	b086      	sub	sp, #24
90001c2c:	af00      	add	r7, sp, #0
90001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90001c30:	4a14      	ldr	r2, [pc, #80]	; (90001c84 <_sbrk+0x5c>)
90001c32:	4b15      	ldr	r3, [pc, #84]	; (90001c88 <_sbrk+0x60>)
90001c34:	1ad3      	subs	r3, r2, r3
90001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90001c38:	697b      	ldr	r3, [r7, #20]
90001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90001c3c:	4b13      	ldr	r3, [pc, #76]	; (90001c8c <_sbrk+0x64>)
90001c3e:	681b      	ldr	r3, [r3, #0]
90001c40:	2b00      	cmp	r3, #0
90001c42:	d102      	bne.n	90001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90001c44:	4b11      	ldr	r3, [pc, #68]	; (90001c8c <_sbrk+0x64>)
90001c46:	4a12      	ldr	r2, [pc, #72]	; (90001c90 <_sbrk+0x68>)
90001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90001c4a:	4b10      	ldr	r3, [pc, #64]	; (90001c8c <_sbrk+0x64>)
90001c4c:	681a      	ldr	r2, [r3, #0]
90001c4e:	687b      	ldr	r3, [r7, #4]
90001c50:	4413      	add	r3, r2
90001c52:	693a      	ldr	r2, [r7, #16]
90001c54:	429a      	cmp	r2, r3
90001c56:	d207      	bcs.n	90001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
90001c58:	f006 fdf4 	bl	90008844 <__errno>
90001c5c:	4603      	mov	r3, r0
90001c5e:	220c      	movs	r2, #12
90001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
90001c62:	f04f 33ff 	mov.w	r3, #4294967295
90001c66:	e009      	b.n	90001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90001c68:	4b08      	ldr	r3, [pc, #32]	; (90001c8c <_sbrk+0x64>)
90001c6a:	681b      	ldr	r3, [r3, #0]
90001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90001c6e:	4b07      	ldr	r3, [pc, #28]	; (90001c8c <_sbrk+0x64>)
90001c70:	681a      	ldr	r2, [r3, #0]
90001c72:	687b      	ldr	r3, [r7, #4]
90001c74:	4413      	add	r3, r2
90001c76:	4a05      	ldr	r2, [pc, #20]	; (90001c8c <_sbrk+0x64>)
90001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90001c7a:	68fb      	ldr	r3, [r7, #12]
}
90001c7c:	4618      	mov	r0, r3
90001c7e:	3718      	adds	r7, #24
90001c80:	46bd      	mov	sp, r7
90001c82:	bd80      	pop	{r7, pc}
90001c84:	20020000 	.word	0x20020000
90001c88:	00000400 	.word	0x00000400
90001c8c:	2000039c 	.word	0x2000039c
90001c90:	200003b8 	.word	0x200003b8

90001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90001c94:	b480      	push	{r7}
90001c96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90001c98:	4b29      	ldr	r3, [pc, #164]	; (90001d40 <SystemInit+0xac>)
90001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001c9e:	4a28      	ldr	r2, [pc, #160]	; (90001d40 <SystemInit+0xac>)
90001ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90001ca8:	4b26      	ldr	r3, [pc, #152]	; (90001d44 <SystemInit+0xb0>)
90001caa:	681b      	ldr	r3, [r3, #0]
90001cac:	4a25      	ldr	r2, [pc, #148]	; (90001d44 <SystemInit+0xb0>)
90001cae:	f043 0301 	orr.w	r3, r3, #1
90001cb2:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90001cb4:	4b23      	ldr	r3, [pc, #140]	; (90001d44 <SystemInit+0xb0>)
90001cb6:	2200      	movs	r2, #0
90001cb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90001cba:	4b22      	ldr	r3, [pc, #136]	; (90001d44 <SystemInit+0xb0>)
90001cbc:	681a      	ldr	r2, [r3, #0]
90001cbe:	4921      	ldr	r1, [pc, #132]	; (90001d44 <SystemInit+0xb0>)
90001cc0:	4b21      	ldr	r3, [pc, #132]	; (90001d48 <SystemInit+0xb4>)
90001cc2:	4013      	ands	r3, r2
90001cc4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90001cc6:	4b1f      	ldr	r3, [pc, #124]	; (90001d44 <SystemInit+0xb0>)
90001cc8:	2200      	movs	r2, #0
90001cca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90001ccc:	4b1d      	ldr	r3, [pc, #116]	; (90001d44 <SystemInit+0xb0>)
90001cce:	2200      	movs	r2, #0
90001cd0:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90001cd2:	4b1c      	ldr	r3, [pc, #112]	; (90001d44 <SystemInit+0xb0>)
90001cd4:	2200      	movs	r2, #0
90001cd6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90001cd8:	4b1a      	ldr	r3, [pc, #104]	; (90001d44 <SystemInit+0xb0>)
90001cda:	2200      	movs	r2, #0
90001cdc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90001cde:	4b19      	ldr	r3, [pc, #100]	; (90001d44 <SystemInit+0xb0>)
90001ce0:	2200      	movs	r2, #0
90001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90001ce4:	4b17      	ldr	r3, [pc, #92]	; (90001d44 <SystemInit+0xb0>)
90001ce6:	2200      	movs	r2, #0
90001ce8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90001cea:	4b16      	ldr	r3, [pc, #88]	; (90001d44 <SystemInit+0xb0>)
90001cec:	2200      	movs	r2, #0
90001cee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90001cf0:	4b14      	ldr	r3, [pc, #80]	; (90001d44 <SystemInit+0xb0>)
90001cf2:	2200      	movs	r2, #0
90001cf4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
90001cf6:	4b13      	ldr	r3, [pc, #76]	; (90001d44 <SystemInit+0xb0>)
90001cf8:	2200      	movs	r2, #0
90001cfa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90001cfc:	4b11      	ldr	r3, [pc, #68]	; (90001d44 <SystemInit+0xb0>)
90001cfe:	2200      	movs	r2, #0
90001d00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90001d02:	4b10      	ldr	r3, [pc, #64]	; (90001d44 <SystemInit+0xb0>)
90001d04:	2200      	movs	r2, #0
90001d06:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90001d08:	4b0e      	ldr	r3, [pc, #56]	; (90001d44 <SystemInit+0xb0>)
90001d0a:	681b      	ldr	r3, [r3, #0]
90001d0c:	4a0d      	ldr	r2, [pc, #52]	; (90001d44 <SystemInit+0xb0>)
90001d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90001d12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90001d14:	4b0b      	ldr	r3, [pc, #44]	; (90001d44 <SystemInit+0xb0>)
90001d16:	2200      	movs	r2, #0
90001d18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90001d1a:	4b0c      	ldr	r3, [pc, #48]	; (90001d4c <SystemInit+0xb8>)
90001d1c:	681a      	ldr	r2, [r3, #0]
90001d1e:	4b0c      	ldr	r3, [pc, #48]	; (90001d50 <SystemInit+0xbc>)
90001d20:	4013      	ands	r3, r2
90001d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90001d26:	d202      	bcs.n	90001d2e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
90001d28:	4b0a      	ldr	r3, [pc, #40]	; (90001d54 <SystemInit+0xc0>)
90001d2a:	2201      	movs	r2, #1
90001d2c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90001d2e:	4b04      	ldr	r3, [pc, #16]	; (90001d40 <SystemInit+0xac>)
90001d30:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90001d34:	609a      	str	r2, [r3, #8]
#endif  


}
90001d36:	bf00      	nop
90001d38:	46bd      	mov	sp, r7
90001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
90001d3e:	4770      	bx	lr
90001d40:	e000ed00 	.word	0xe000ed00
90001d44:	58024400 	.word	0x58024400
90001d48:	eaf6ed7f 	.word	0xeaf6ed7f
90001d4c:	5c001000 	.word	0x5c001000
90001d50:	ffff0000 	.word	0xffff0000
90001d54:	51008108 	.word	0x51008108

90001d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90001d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 90001d90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
90001d5c:	f7ff ff9a 	bl	90001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90001d60:	480c      	ldr	r0, [pc, #48]	; (90001d94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
90001d62:	490d      	ldr	r1, [pc, #52]	; (90001d98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
90001d64:	4a0d      	ldr	r2, [pc, #52]	; (90001d9c <LoopFillZerobss+0x1a>)
  movs r3, #0
90001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
90001d68:	e002      	b.n	90001d70 <LoopCopyDataInit>

90001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90001d6e:	3304      	adds	r3, #4

90001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
90001d74:	d3f9      	bcc.n	90001d6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90001d76:	4a0a      	ldr	r2, [pc, #40]	; (90001da0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90001d78:	4c0a      	ldr	r4, [pc, #40]	; (90001da4 <LoopFillZerobss+0x22>)
  movs r3, #0
90001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
90001d7c:	e001      	b.n	90001d82 <LoopFillZerobss>

90001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90001d80:	3204      	adds	r2, #4

90001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
90001d84:	d3fb      	bcc.n	90001d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90001d86:	f006 fd63 	bl	90008850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90001d8a:	f7fe fc3b 	bl	90000604 <main>
  bx  lr
90001d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90001d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
90001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
90001d98:	20000084 	.word	0x20000084
  ldr r2, =_sidata
90001d9c:	90041b7c 	.word	0x90041b7c
  ldr r2, =_sbss
90001da0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
90001da4:	200003b4 	.word	0x200003b4

90001da8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90001da8:	e7fe      	b.n	90001da8 <ADC3_IRQHandler>
	...

90001dac <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
90001dac:	b580      	push	{r7, lr}
90001dae:	b08a      	sub	sp, #40	; 0x28
90001db0:	af00      	add	r7, sp, #0
90001db2:	4603      	mov	r3, r0
90001db4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
90001db6:	2300      	movs	r3, #0
90001db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
90001dba:	79fb      	ldrb	r3, [r7, #7]
90001dbc:	2b00      	cmp	r3, #0
90001dbe:	d10f      	bne.n	90001de0 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
90001dc0:	4b26      	ldr	r3, [pc, #152]	; (90001e5c <BSP_LED_Init+0xb0>)
90001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001dc6:	4a25      	ldr	r2, [pc, #148]	; (90001e5c <BSP_LED_Init+0xb0>)
90001dc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90001dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001dd0:	4b22      	ldr	r3, [pc, #136]	; (90001e5c <BSP_LED_Init+0xb0>)
90001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
90001dda:	60fb      	str	r3, [r7, #12]
90001ddc:	68fb      	ldr	r3, [r7, #12]
90001dde:	e015      	b.n	90001e0c <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
90001de0:	79fb      	ldrb	r3, [r7, #7]
90001de2:	2b01      	cmp	r3, #1
90001de4:	d10f      	bne.n	90001e06 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
90001de6:	4b1d      	ldr	r3, [pc, #116]	; (90001e5c <BSP_LED_Init+0xb0>)
90001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001dec:	4a1b      	ldr	r2, [pc, #108]	; (90001e5c <BSP_LED_Init+0xb0>)
90001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001df6:	4b19      	ldr	r3, [pc, #100]	; (90001e5c <BSP_LED_Init+0xb0>)
90001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001e00:	60bb      	str	r3, [r7, #8]
90001e02:	68bb      	ldr	r3, [r7, #8]
90001e04:	e002      	b.n	90001e0c <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001e06:	f06f 0301 	mvn.w	r3, #1
90001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
90001e0c:	79fb      	ldrb	r3, [r7, #7]
90001e0e:	4a14      	ldr	r2, [pc, #80]	; (90001e60 <BSP_LED_Init+0xb4>)
90001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001e14:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
90001e16:	2301      	movs	r3, #1
90001e18:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
90001e1a:	2301      	movs	r3, #1
90001e1c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001e1e:	2303      	movs	r3, #3
90001e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
90001e22:	79fb      	ldrb	r3, [r7, #7]
90001e24:	4a0f      	ldr	r2, [pc, #60]	; (90001e64 <BSP_LED_Init+0xb8>)
90001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001e2a:	f107 0210 	add.w	r2, r7, #16
90001e2e:	4611      	mov	r1, r2
90001e30:	4618      	mov	r0, r3
90001e32:	f001 faab 	bl	9000338c <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
90001e36:	79fb      	ldrb	r3, [r7, #7]
90001e38:	4a0a      	ldr	r2, [pc, #40]	; (90001e64 <BSP_LED_Init+0xb8>)
90001e3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90001e3e:	79fb      	ldrb	r3, [r7, #7]
90001e40:	4a07      	ldr	r2, [pc, #28]	; (90001e60 <BSP_LED_Init+0xb4>)
90001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001e46:	b29b      	uxth	r3, r3
90001e48:	2201      	movs	r2, #1
90001e4a:	4619      	mov	r1, r3
90001e4c:	f001 fc4e 	bl	900036ec <HAL_GPIO_WritePin>
  return ret;
90001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
90001e52:	4618      	mov	r0, r3
90001e54:	3728      	adds	r7, #40	; 0x28
90001e56:	46bd      	mov	sp, r7
90001e58:	bd80      	pop	{r7, pc}
90001e5a:	bf00      	nop
90001e5c:	58024400 	.word	0x58024400
90001e60:	90041ad8 	.word	0x90041ad8
90001e64:	20000010 	.word	0x20000010

90001e68 <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
90001e68:	b580      	push	{r7, lr}
90001e6a:	b084      	sub	sp, #16
90001e6c:	af00      	add	r7, sp, #0
90001e6e:	4603      	mov	r3, r0
90001e70:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
90001e72:	2300      	movs	r3, #0
90001e74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
90001e76:	79fb      	ldrb	r3, [r7, #7]
90001e78:	4a08      	ldr	r2, [pc, #32]	; (90001e9c <BSP_LED_Toggle+0x34>)
90001e7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
90001e7e:	79fb      	ldrb	r3, [r7, #7]
90001e80:	4907      	ldr	r1, [pc, #28]	; (90001ea0 <BSP_LED_Toggle+0x38>)
90001e82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
90001e86:	b29b      	uxth	r3, r3
90001e88:	4619      	mov	r1, r3
90001e8a:	4610      	mov	r0, r2
90001e8c:	f001 fc47 	bl	9000371e <HAL_GPIO_TogglePin>
  return ret;
90001e90:	68fb      	ldr	r3, [r7, #12]
}
90001e92:	4618      	mov	r0, r3
90001e94:	3710      	adds	r7, #16
90001e96:	46bd      	mov	sp, r7
90001e98:	bd80      	pop	{r7, pc}
90001e9a:	bf00      	nop
90001e9c:	20000010 	.word	0x20000010
90001ea0:	90041ad8 	.word	0x90041ad8

90001ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90001ea4:	b580      	push	{r7, lr}
90001ea6:	b082      	sub	sp, #8
90001ea8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90001eaa:	2003      	movs	r0, #3
90001eac:	f001 fa2e 	bl	9000330c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90001eb0:	f002 ff3e 	bl	90004d30 <HAL_RCC_GetSysClockFreq>
90001eb4:	4602      	mov	r2, r0
90001eb6:	4b15      	ldr	r3, [pc, #84]	; (90001f0c <HAL_Init+0x68>)
90001eb8:	699b      	ldr	r3, [r3, #24]
90001eba:	0a1b      	lsrs	r3, r3, #8
90001ebc:	f003 030f 	and.w	r3, r3, #15
90001ec0:	4913      	ldr	r1, [pc, #76]	; (90001f10 <HAL_Init+0x6c>)
90001ec2:	5ccb      	ldrb	r3, [r1, r3]
90001ec4:	f003 031f 	and.w	r3, r3, #31
90001ec8:	fa22 f303 	lsr.w	r3, r2, r3
90001ecc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90001ece:	4b0f      	ldr	r3, [pc, #60]	; (90001f0c <HAL_Init+0x68>)
90001ed0:	699b      	ldr	r3, [r3, #24]
90001ed2:	f003 030f 	and.w	r3, r3, #15
90001ed6:	4a0e      	ldr	r2, [pc, #56]	; (90001f10 <HAL_Init+0x6c>)
90001ed8:	5cd3      	ldrb	r3, [r2, r3]
90001eda:	f003 031f 	and.w	r3, r3, #31
90001ede:	687a      	ldr	r2, [r7, #4]
90001ee0:	fa22 f303 	lsr.w	r3, r2, r3
90001ee4:	4a0b      	ldr	r2, [pc, #44]	; (90001f14 <HAL_Init+0x70>)
90001ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90001ee8:	4a0b      	ldr	r2, [pc, #44]	; (90001f18 <HAL_Init+0x74>)
90001eea:	687b      	ldr	r3, [r7, #4]
90001eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90001eee:	2000      	movs	r0, #0
90001ef0:	f000 f814 	bl	90001f1c <HAL_InitTick>
90001ef4:	4603      	mov	r3, r0
90001ef6:	2b00      	cmp	r3, #0
90001ef8:	d001      	beq.n	90001efe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90001efa:	2301      	movs	r3, #1
90001efc:	e002      	b.n	90001f04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90001efe:	f7ff fadf 	bl	900014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90001f02:	2300      	movs	r3, #0
}
90001f04:	4618      	mov	r0, r3
90001f06:	3708      	adds	r7, #8
90001f08:	46bd      	mov	sp, r7
90001f0a:	bd80      	pop	{r7, pc}
90001f0c:	58024400 	.word	0x58024400
90001f10:	90041ac8 	.word	0x90041ac8
90001f14:	2000000c 	.word	0x2000000c
90001f18:	20000008 	.word	0x20000008

90001f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90001f1c:	b580      	push	{r7, lr}
90001f1e:	b082      	sub	sp, #8
90001f20:	af00      	add	r7, sp, #0
90001f22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
90001f24:	4b15      	ldr	r3, [pc, #84]	; (90001f7c <HAL_InitTick+0x60>)
90001f26:	781b      	ldrb	r3, [r3, #0]
90001f28:	2b00      	cmp	r3, #0
90001f2a:	d101      	bne.n	90001f30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
90001f2c:	2301      	movs	r3, #1
90001f2e:	e021      	b.n	90001f74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90001f30:	4b13      	ldr	r3, [pc, #76]	; (90001f80 <HAL_InitTick+0x64>)
90001f32:	681a      	ldr	r2, [r3, #0]
90001f34:	4b11      	ldr	r3, [pc, #68]	; (90001f7c <HAL_InitTick+0x60>)
90001f36:	781b      	ldrb	r3, [r3, #0]
90001f38:	4619      	mov	r1, r3
90001f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
90001f42:	fbb2 f3f3 	udiv	r3, r2, r3
90001f46:	4618      	mov	r0, r3
90001f48:	f001 fa13 	bl	90003372 <HAL_SYSTICK_Config>
90001f4c:	4603      	mov	r3, r0
90001f4e:	2b00      	cmp	r3, #0
90001f50:	d001      	beq.n	90001f56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
90001f52:	2301      	movs	r3, #1
90001f54:	e00e      	b.n	90001f74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90001f56:	687b      	ldr	r3, [r7, #4]
90001f58:	2b0f      	cmp	r3, #15
90001f5a:	d80a      	bhi.n	90001f72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90001f5c:	2200      	movs	r2, #0
90001f5e:	6879      	ldr	r1, [r7, #4]
90001f60:	f04f 30ff 	mov.w	r0, #4294967295
90001f64:	f001 f9dd 	bl	90003322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90001f68:	4a06      	ldr	r2, [pc, #24]	; (90001f84 <HAL_InitTick+0x68>)
90001f6a:	687b      	ldr	r3, [r7, #4]
90001f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90001f6e:	2300      	movs	r3, #0
90001f70:	e000      	b.n	90001f74 <HAL_InitTick+0x58>
    return HAL_ERROR;
90001f72:	2301      	movs	r3, #1
}
90001f74:	4618      	mov	r0, r3
90001f76:	3708      	adds	r7, #8
90001f78:	46bd      	mov	sp, r7
90001f7a:	bd80      	pop	{r7, pc}
90001f7c:	2000001c 	.word	0x2000001c
90001f80:	20000008 	.word	0x20000008
90001f84:	20000018 	.word	0x20000018

90001f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90001f88:	b480      	push	{r7}
90001f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90001f8c:	4b06      	ldr	r3, [pc, #24]	; (90001fa8 <HAL_IncTick+0x20>)
90001f8e:	781b      	ldrb	r3, [r3, #0]
90001f90:	461a      	mov	r2, r3
90001f92:	4b06      	ldr	r3, [pc, #24]	; (90001fac <HAL_IncTick+0x24>)
90001f94:	681b      	ldr	r3, [r3, #0]
90001f96:	4413      	add	r3, r2
90001f98:	4a04      	ldr	r2, [pc, #16]	; (90001fac <HAL_IncTick+0x24>)
90001f9a:	6013      	str	r3, [r2, #0]
}
90001f9c:	bf00      	nop
90001f9e:	46bd      	mov	sp, r7
90001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
90001fa4:	4770      	bx	lr
90001fa6:	bf00      	nop
90001fa8:	2000001c 	.word	0x2000001c
90001fac:	200003a0 	.word	0x200003a0

90001fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90001fb0:	b480      	push	{r7}
90001fb2:	af00      	add	r7, sp, #0
  return uwTick;
90001fb4:	4b03      	ldr	r3, [pc, #12]	; (90001fc4 <HAL_GetTick+0x14>)
90001fb6:	681b      	ldr	r3, [r3, #0]
}
90001fb8:	4618      	mov	r0, r3
90001fba:	46bd      	mov	sp, r7
90001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
90001fc0:	4770      	bx	lr
90001fc2:	bf00      	nop
90001fc4:	200003a0 	.word	0x200003a0

90001fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90001fc8:	b580      	push	{r7, lr}
90001fca:	b084      	sub	sp, #16
90001fcc:	af00      	add	r7, sp, #0
90001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90001fd0:	f7ff ffee 	bl	90001fb0 <HAL_GetTick>
90001fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90001fd6:	687b      	ldr	r3, [r7, #4]
90001fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90001fda:	68fb      	ldr	r3, [r7, #12]
90001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
90001fe0:	d005      	beq.n	90001fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90001fe2:	4b0a      	ldr	r3, [pc, #40]	; (9000200c <HAL_Delay+0x44>)
90001fe4:	781b      	ldrb	r3, [r3, #0]
90001fe6:	461a      	mov	r2, r3
90001fe8:	68fb      	ldr	r3, [r7, #12]
90001fea:	4413      	add	r3, r2
90001fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
90001fee:	bf00      	nop
90001ff0:	f7ff ffde 	bl	90001fb0 <HAL_GetTick>
90001ff4:	4602      	mov	r2, r0
90001ff6:	68bb      	ldr	r3, [r7, #8]
90001ff8:	1ad3      	subs	r3, r2, r3
90001ffa:	68fa      	ldr	r2, [r7, #12]
90001ffc:	429a      	cmp	r2, r3
90001ffe:	d8f7      	bhi.n	90001ff0 <HAL_Delay+0x28>
  {
  }
}
90002000:	bf00      	nop
90002002:	bf00      	nop
90002004:	3710      	adds	r7, #16
90002006:	46bd      	mov	sp, r7
90002008:	bd80      	pop	{r7, pc}
9000200a:	bf00      	nop
9000200c:	2000001c 	.word	0x2000001c

90002010 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90002010:	b480      	push	{r7}
90002012:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90002014:	4b03      	ldr	r3, [pc, #12]	; (90002024 <HAL_GetREVID+0x14>)
90002016:	681b      	ldr	r3, [r3, #0]
90002018:	0c1b      	lsrs	r3, r3, #16
}
9000201a:	4618      	mov	r0, r3
9000201c:	46bd      	mov	sp, r7
9000201e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002022:	4770      	bx	lr
90002024:	5c001000 	.word	0x5c001000

90002028 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
90002028:	b480      	push	{r7}
9000202a:	b083      	sub	sp, #12
9000202c:	af00      	add	r7, sp, #0
9000202e:	6078      	str	r0, [r7, #4]
90002030:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
90002032:	4b07      	ldr	r3, [pc, #28]	; (90002050 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
90002034:	685a      	ldr	r2, [r3, #4]
90002036:	687b      	ldr	r3, [r7, #4]
90002038:	43db      	mvns	r3, r3
9000203a:	401a      	ands	r2, r3
9000203c:	4904      	ldr	r1, [pc, #16]	; (90002050 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
9000203e:	683b      	ldr	r3, [r7, #0]
90002040:	4313      	orrs	r3, r2
90002042:	604b      	str	r3, [r1, #4]
}
90002044:	bf00      	nop
90002046:	370c      	adds	r7, #12
90002048:	46bd      	mov	sp, r7
9000204a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000204e:	4770      	bx	lr
90002050:	58000400 	.word	0x58000400

90002054 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
90002054:	b480      	push	{r7}
90002056:	b083      	sub	sp, #12
90002058:	af00      	add	r7, sp, #0
9000205a:	6078      	str	r0, [r7, #4]
9000205c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
9000205e:	687b      	ldr	r3, [r7, #4]
90002060:	689b      	ldr	r3, [r3, #8]
90002062:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
90002066:	683b      	ldr	r3, [r7, #0]
90002068:	431a      	orrs	r2, r3
9000206a:	687b      	ldr	r3, [r7, #4]
9000206c:	609a      	str	r2, [r3, #8]
}
9000206e:	bf00      	nop
90002070:	370c      	adds	r7, #12
90002072:	46bd      	mov	sp, r7
90002074:	f85d 7b04 	ldr.w	r7, [sp], #4
90002078:	4770      	bx	lr

9000207a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
9000207a:	b480      	push	{r7}
9000207c:	b083      	sub	sp, #12
9000207e:	af00      	add	r7, sp, #0
90002080:	6078      	str	r0, [r7, #4]
90002082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
90002084:	687b      	ldr	r3, [r7, #4]
90002086:	689b      	ldr	r3, [r3, #8]
90002088:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
9000208c:	683b      	ldr	r3, [r7, #0]
9000208e:	431a      	orrs	r2, r3
90002090:	687b      	ldr	r3, [r7, #4]
90002092:	609a      	str	r2, [r3, #8]
}
90002094:	bf00      	nop
90002096:	370c      	adds	r7, #12
90002098:	46bd      	mov	sp, r7
9000209a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000209e:	4770      	bx	lr

900020a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
900020a0:	b480      	push	{r7}
900020a2:	b083      	sub	sp, #12
900020a4:	af00      	add	r7, sp, #0
900020a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
900020a8:	687b      	ldr	r3, [r7, #4]
900020aa:	689b      	ldr	r3, [r3, #8]
900020ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
900020b0:	4618      	mov	r0, r3
900020b2:	370c      	adds	r7, #12
900020b4:	46bd      	mov	sp, r7
900020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
900020ba:	4770      	bx	lr

900020bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
900020bc:	b480      	push	{r7}
900020be:	b087      	sub	sp, #28
900020c0:	af00      	add	r7, sp, #0
900020c2:	60f8      	str	r0, [r7, #12]
900020c4:	60b9      	str	r1, [r7, #8]
900020c6:	607a      	str	r2, [r7, #4]
900020c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
900020ca:	68fb      	ldr	r3, [r7, #12]
900020cc:	3360      	adds	r3, #96	; 0x60
900020ce:	461a      	mov	r2, r3
900020d0:	68bb      	ldr	r3, [r7, #8]
900020d2:	009b      	lsls	r3, r3, #2
900020d4:	4413      	add	r3, r2
900020d6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
900020d8:	697b      	ldr	r3, [r7, #20]
900020da:	681b      	ldr	r3, [r3, #0]
900020dc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
900020e0:	687b      	ldr	r3, [r7, #4]
900020e2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
900020e6:	683b      	ldr	r3, [r7, #0]
900020e8:	430b      	orrs	r3, r1
900020ea:	431a      	orrs	r2, r3
900020ec:	697b      	ldr	r3, [r7, #20]
900020ee:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
900020f0:	bf00      	nop
900020f2:	371c      	adds	r7, #28
900020f4:	46bd      	mov	sp, r7
900020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
900020fa:	4770      	bx	lr

900020fc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
900020fc:	b480      	push	{r7}
900020fe:	b085      	sub	sp, #20
90002100:	af00      	add	r7, sp, #0
90002102:	60f8      	str	r0, [r7, #12]
90002104:	60b9      	str	r1, [r7, #8]
90002106:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
90002108:	68fb      	ldr	r3, [r7, #12]
9000210a:	691b      	ldr	r3, [r3, #16]
9000210c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
90002110:	68bb      	ldr	r3, [r7, #8]
90002112:	f003 031f 	and.w	r3, r3, #31
90002116:	6879      	ldr	r1, [r7, #4]
90002118:	fa01 f303 	lsl.w	r3, r1, r3
9000211c:	431a      	orrs	r2, r3
9000211e:	68fb      	ldr	r3, [r7, #12]
90002120:	611a      	str	r2, [r3, #16]
}
90002122:	bf00      	nop
90002124:	3714      	adds	r7, #20
90002126:	46bd      	mov	sp, r7
90002128:	f85d 7b04 	ldr.w	r7, [sp], #4
9000212c:	4770      	bx	lr

9000212e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
9000212e:	b480      	push	{r7}
90002130:	b087      	sub	sp, #28
90002132:	af00      	add	r7, sp, #0
90002134:	60f8      	str	r0, [r7, #12]
90002136:	60b9      	str	r1, [r7, #8]
90002138:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
9000213a:	68fb      	ldr	r3, [r7, #12]
9000213c:	3360      	adds	r3, #96	; 0x60
9000213e:	461a      	mov	r2, r3
90002140:	68bb      	ldr	r3, [r7, #8]
90002142:	009b      	lsls	r3, r3, #2
90002144:	4413      	add	r3, r2
90002146:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
90002148:	697b      	ldr	r3, [r7, #20]
9000214a:	681b      	ldr	r3, [r3, #0]
9000214c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90002150:	687b      	ldr	r3, [r7, #4]
90002152:	431a      	orrs	r2, r3
90002154:	697b      	ldr	r3, [r7, #20]
90002156:	601a      	str	r2, [r3, #0]
  }
}
90002158:	bf00      	nop
9000215a:	371c      	adds	r7, #28
9000215c:	46bd      	mov	sp, r7
9000215e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002162:	4770      	bx	lr

90002164 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
90002164:	b480      	push	{r7}
90002166:	b087      	sub	sp, #28
90002168:	af00      	add	r7, sp, #0
9000216a:	60f8      	str	r0, [r7, #12]
9000216c:	60b9      	str	r1, [r7, #8]
9000216e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
90002170:	68fb      	ldr	r3, [r7, #12]
90002172:	3330      	adds	r3, #48	; 0x30
90002174:	461a      	mov	r2, r3
90002176:	68bb      	ldr	r3, [r7, #8]
90002178:	0a1b      	lsrs	r3, r3, #8
9000217a:	009b      	lsls	r3, r3, #2
9000217c:	f003 030c 	and.w	r3, r3, #12
90002180:	4413      	add	r3, r2
90002182:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
90002184:	697b      	ldr	r3, [r7, #20]
90002186:	681a      	ldr	r2, [r3, #0]
90002188:	68bb      	ldr	r3, [r7, #8]
9000218a:	f003 031f 	and.w	r3, r3, #31
9000218e:	211f      	movs	r1, #31
90002190:	fa01 f303 	lsl.w	r3, r1, r3
90002194:	43db      	mvns	r3, r3
90002196:	401a      	ands	r2, r3
90002198:	687b      	ldr	r3, [r7, #4]
9000219a:	0e9b      	lsrs	r3, r3, #26
9000219c:	f003 011f 	and.w	r1, r3, #31
900021a0:	68bb      	ldr	r3, [r7, #8]
900021a2:	f003 031f 	and.w	r3, r3, #31
900021a6:	fa01 f303 	lsl.w	r3, r1, r3
900021aa:	431a      	orrs	r2, r3
900021ac:	697b      	ldr	r3, [r7, #20]
900021ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
900021b0:	bf00      	nop
900021b2:	371c      	adds	r7, #28
900021b4:	46bd      	mov	sp, r7
900021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
900021ba:	4770      	bx	lr

900021bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
900021bc:	b480      	push	{r7}
900021be:	b087      	sub	sp, #28
900021c0:	af00      	add	r7, sp, #0
900021c2:	60f8      	str	r0, [r7, #12]
900021c4:	60b9      	str	r1, [r7, #8]
900021c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
900021c8:	68fb      	ldr	r3, [r7, #12]
900021ca:	3314      	adds	r3, #20
900021cc:	461a      	mov	r2, r3
900021ce:	68bb      	ldr	r3, [r7, #8]
900021d0:	0e5b      	lsrs	r3, r3, #25
900021d2:	009b      	lsls	r3, r3, #2
900021d4:	f003 0304 	and.w	r3, r3, #4
900021d8:	4413      	add	r3, r2
900021da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
900021dc:	697b      	ldr	r3, [r7, #20]
900021de:	681a      	ldr	r2, [r3, #0]
900021e0:	68bb      	ldr	r3, [r7, #8]
900021e2:	0d1b      	lsrs	r3, r3, #20
900021e4:	f003 031f 	and.w	r3, r3, #31
900021e8:	2107      	movs	r1, #7
900021ea:	fa01 f303 	lsl.w	r3, r1, r3
900021ee:	43db      	mvns	r3, r3
900021f0:	401a      	ands	r2, r3
900021f2:	68bb      	ldr	r3, [r7, #8]
900021f4:	0d1b      	lsrs	r3, r3, #20
900021f6:	f003 031f 	and.w	r3, r3, #31
900021fa:	6879      	ldr	r1, [r7, #4]
900021fc:	fa01 f303 	lsl.w	r3, r1, r3
90002200:	431a      	orrs	r2, r3
90002202:	697b      	ldr	r3, [r7, #20]
90002204:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
90002206:	bf00      	nop
90002208:	371c      	adds	r7, #28
9000220a:	46bd      	mov	sp, r7
9000220c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002210:	4770      	bx	lr
	...

90002214 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
90002214:	b480      	push	{r7}
90002216:	b085      	sub	sp, #20
90002218:	af00      	add	r7, sp, #0
9000221a:	60f8      	str	r0, [r7, #12]
9000221c:	60b9      	str	r1, [r7, #8]
9000221e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
90002220:	68fb      	ldr	r3, [r7, #12]
90002222:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
90002226:	68bb      	ldr	r3, [r7, #8]
90002228:	f3c3 0313 	ubfx	r3, r3, #0, #20
9000222c:	43db      	mvns	r3, r3
9000222e:	401a      	ands	r2, r3
90002230:	687b      	ldr	r3, [r7, #4]
90002232:	f003 0318 	and.w	r3, r3, #24
90002236:	4908      	ldr	r1, [pc, #32]	; (90002258 <LL_ADC_SetChannelSingleDiff+0x44>)
90002238:	40d9      	lsrs	r1, r3
9000223a:	68bb      	ldr	r3, [r7, #8]
9000223c:	400b      	ands	r3, r1
9000223e:	f3c3 0313 	ubfx	r3, r3, #0, #20
90002242:	431a      	orrs	r2, r3
90002244:	68fb      	ldr	r3, [r7, #12]
90002246:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
9000224a:	bf00      	nop
9000224c:	3714      	adds	r7, #20
9000224e:	46bd      	mov	sp, r7
90002250:	f85d 7b04 	ldr.w	r7, [sp], #4
90002254:	4770      	bx	lr
90002256:	bf00      	nop
90002258:	000fffff 	.word	0x000fffff

9000225c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
9000225c:	b480      	push	{r7}
9000225e:	b083      	sub	sp, #12
90002260:	af00      	add	r7, sp, #0
90002262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
90002264:	687b      	ldr	r3, [r7, #4]
90002266:	689a      	ldr	r2, [r3, #8]
90002268:	4b04      	ldr	r3, [pc, #16]	; (9000227c <LL_ADC_DisableDeepPowerDown+0x20>)
9000226a:	4013      	ands	r3, r2
9000226c:	687a      	ldr	r2, [r7, #4]
9000226e:	6093      	str	r3, [r2, #8]
}
90002270:	bf00      	nop
90002272:	370c      	adds	r7, #12
90002274:	46bd      	mov	sp, r7
90002276:	f85d 7b04 	ldr.w	r7, [sp], #4
9000227a:	4770      	bx	lr
9000227c:	5fffffc0 	.word	0x5fffffc0

90002280 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
90002280:	b480      	push	{r7}
90002282:	b083      	sub	sp, #12
90002284:	af00      	add	r7, sp, #0
90002286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
90002288:	687b      	ldr	r3, [r7, #4]
9000228a:	689b      	ldr	r3, [r3, #8]
9000228c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90002290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90002294:	d101      	bne.n	9000229a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
90002296:	2301      	movs	r3, #1
90002298:	e000      	b.n	9000229c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
9000229a:	2300      	movs	r3, #0
}
9000229c:	4618      	mov	r0, r3
9000229e:	370c      	adds	r7, #12
900022a0:	46bd      	mov	sp, r7
900022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
900022a6:	4770      	bx	lr

900022a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
900022a8:	b480      	push	{r7}
900022aa:	b083      	sub	sp, #12
900022ac:	af00      	add	r7, sp, #0
900022ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
900022b0:	687b      	ldr	r3, [r7, #4]
900022b2:	689a      	ldr	r2, [r3, #8]
900022b4:	4b05      	ldr	r3, [pc, #20]	; (900022cc <LL_ADC_EnableInternalRegulator+0x24>)
900022b6:	4013      	ands	r3, r2
900022b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
900022bc:	687b      	ldr	r3, [r7, #4]
900022be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
900022c0:	bf00      	nop
900022c2:	370c      	adds	r7, #12
900022c4:	46bd      	mov	sp, r7
900022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900022ca:	4770      	bx	lr
900022cc:	6fffffc0 	.word	0x6fffffc0

900022d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
900022d0:	b480      	push	{r7}
900022d2:	b083      	sub	sp, #12
900022d4:	af00      	add	r7, sp, #0
900022d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
900022d8:	687b      	ldr	r3, [r7, #4]
900022da:	689b      	ldr	r3, [r3, #8]
900022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900022e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900022e4:	d101      	bne.n	900022ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
900022e6:	2301      	movs	r3, #1
900022e8:	e000      	b.n	900022ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
900022ea:	2300      	movs	r3, #0
}
900022ec:	4618      	mov	r0, r3
900022ee:	370c      	adds	r7, #12
900022f0:	46bd      	mov	sp, r7
900022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
900022f6:	4770      	bx	lr

900022f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
900022f8:	b480      	push	{r7}
900022fa:	b083      	sub	sp, #12
900022fc:	af00      	add	r7, sp, #0
900022fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90002300:	687b      	ldr	r3, [r7, #4]
90002302:	689b      	ldr	r3, [r3, #8]
90002304:	f003 0301 	and.w	r3, r3, #1
90002308:	2b01      	cmp	r3, #1
9000230a:	d101      	bne.n	90002310 <LL_ADC_IsEnabled+0x18>
9000230c:	2301      	movs	r3, #1
9000230e:	e000      	b.n	90002312 <LL_ADC_IsEnabled+0x1a>
90002310:	2300      	movs	r3, #0
}
90002312:	4618      	mov	r0, r3
90002314:	370c      	adds	r7, #12
90002316:	46bd      	mov	sp, r7
90002318:	f85d 7b04 	ldr.w	r7, [sp], #4
9000231c:	4770      	bx	lr

9000231e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
9000231e:	b480      	push	{r7}
90002320:	b083      	sub	sp, #12
90002322:	af00      	add	r7, sp, #0
90002324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90002326:	687b      	ldr	r3, [r7, #4]
90002328:	689b      	ldr	r3, [r3, #8]
9000232a:	f003 0304 	and.w	r3, r3, #4
9000232e:	2b04      	cmp	r3, #4
90002330:	d101      	bne.n	90002336 <LL_ADC_REG_IsConversionOngoing+0x18>
90002332:	2301      	movs	r3, #1
90002334:	e000      	b.n	90002338 <LL_ADC_REG_IsConversionOngoing+0x1a>
90002336:	2300      	movs	r3, #0
}
90002338:	4618      	mov	r0, r3
9000233a:	370c      	adds	r7, #12
9000233c:	46bd      	mov	sp, r7
9000233e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002342:	4770      	bx	lr

90002344 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
90002344:	b480      	push	{r7}
90002346:	b083      	sub	sp, #12
90002348:	af00      	add	r7, sp, #0
9000234a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
9000234c:	687b      	ldr	r3, [r7, #4]
9000234e:	689b      	ldr	r3, [r3, #8]
90002350:	f003 0308 	and.w	r3, r3, #8
90002354:	2b08      	cmp	r3, #8
90002356:	d101      	bne.n	9000235c <LL_ADC_INJ_IsConversionOngoing+0x18>
90002358:	2301      	movs	r3, #1
9000235a:	e000      	b.n	9000235e <LL_ADC_INJ_IsConversionOngoing+0x1a>
9000235c:	2300      	movs	r3, #0
}
9000235e:	4618      	mov	r0, r3
90002360:	370c      	adds	r7, #12
90002362:	46bd      	mov	sp, r7
90002364:	f85d 7b04 	ldr.w	r7, [sp], #4
90002368:	4770      	bx	lr
	...

9000236c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
9000236c:	b590      	push	{r4, r7, lr}
9000236e:	b089      	sub	sp, #36	; 0x24
90002370:	af00      	add	r7, sp, #0
90002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90002374:	2300      	movs	r3, #0
90002376:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
90002378:	2300      	movs	r3, #0
9000237a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
9000237c:	687b      	ldr	r3, [r7, #4]
9000237e:	2b00      	cmp	r3, #0
90002380:	d101      	bne.n	90002386 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
90002382:	2301      	movs	r3, #1
90002384:	e18f      	b.n	900026a6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
90002386:	687b      	ldr	r3, [r7, #4]
90002388:	68db      	ldr	r3, [r3, #12]
9000238a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
9000238c:	687b      	ldr	r3, [r7, #4]
9000238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002390:	2b00      	cmp	r3, #0
90002392:	d109      	bne.n	900023a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
90002394:	6878      	ldr	r0, [r7, #4]
90002396:	f7ff f8ad 	bl	900014f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
9000239a:	687b      	ldr	r3, [r7, #4]
9000239c:	2200      	movs	r2, #0
9000239e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
900023a0:	687b      	ldr	r3, [r7, #4]
900023a2:	2200      	movs	r2, #0
900023a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
900023a8:	687b      	ldr	r3, [r7, #4]
900023aa:	681b      	ldr	r3, [r3, #0]
900023ac:	4618      	mov	r0, r3
900023ae:	f7ff ff67 	bl	90002280 <LL_ADC_IsDeepPowerDownEnabled>
900023b2:	4603      	mov	r3, r0
900023b4:	2b00      	cmp	r3, #0
900023b6:	d004      	beq.n	900023c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
900023b8:	687b      	ldr	r3, [r7, #4]
900023ba:	681b      	ldr	r3, [r3, #0]
900023bc:	4618      	mov	r0, r3
900023be:	f7ff ff4d 	bl	9000225c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
900023c2:	687b      	ldr	r3, [r7, #4]
900023c4:	681b      	ldr	r3, [r3, #0]
900023c6:	4618      	mov	r0, r3
900023c8:	f7ff ff82 	bl	900022d0 <LL_ADC_IsInternalRegulatorEnabled>
900023cc:	4603      	mov	r3, r0
900023ce:	2b00      	cmp	r3, #0
900023d0:	d114      	bne.n	900023fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
900023d2:	687b      	ldr	r3, [r7, #4]
900023d4:	681b      	ldr	r3, [r3, #0]
900023d6:	4618      	mov	r0, r3
900023d8:	f7ff ff66 	bl	900022a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
900023dc:	4b87      	ldr	r3, [pc, #540]	; (900025fc <HAL_ADC_Init+0x290>)
900023de:	681b      	ldr	r3, [r3, #0]
900023e0:	099b      	lsrs	r3, r3, #6
900023e2:	4a87      	ldr	r2, [pc, #540]	; (90002600 <HAL_ADC_Init+0x294>)
900023e4:	fba2 2303 	umull	r2, r3, r2, r3
900023e8:	099b      	lsrs	r3, r3, #6
900023ea:	3301      	adds	r3, #1
900023ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
900023ee:	e002      	b.n	900023f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
900023f0:	68bb      	ldr	r3, [r7, #8]
900023f2:	3b01      	subs	r3, #1
900023f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
900023f6:	68bb      	ldr	r3, [r7, #8]
900023f8:	2b00      	cmp	r3, #0
900023fa:	d1f9      	bne.n	900023f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
900023fc:	687b      	ldr	r3, [r7, #4]
900023fe:	681b      	ldr	r3, [r3, #0]
90002400:	4618      	mov	r0, r3
90002402:	f7ff ff65 	bl	900022d0 <LL_ADC_IsInternalRegulatorEnabled>
90002406:	4603      	mov	r3, r0
90002408:	2b00      	cmp	r3, #0
9000240a:	d10d      	bne.n	90002428 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000240c:	687b      	ldr	r3, [r7, #4]
9000240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002410:	f043 0210 	orr.w	r2, r3, #16
90002414:	687b      	ldr	r3, [r7, #4]
90002416:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
90002418:	687b      	ldr	r3, [r7, #4]
9000241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000241c:	f043 0201 	orr.w	r2, r3, #1
90002420:	687b      	ldr	r3, [r7, #4]
90002422:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
90002424:	2301      	movs	r3, #1
90002426:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
90002428:	687b      	ldr	r3, [r7, #4]
9000242a:	681b      	ldr	r3, [r3, #0]
9000242c:	4618      	mov	r0, r3
9000242e:	f7ff ff76 	bl	9000231e <LL_ADC_REG_IsConversionOngoing>
90002432:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
90002434:	687b      	ldr	r3, [r7, #4]
90002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002438:	f003 0310 	and.w	r3, r3, #16
9000243c:	2b00      	cmp	r3, #0
9000243e:	f040 8129 	bne.w	90002694 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
90002442:	697b      	ldr	r3, [r7, #20]
90002444:	2b00      	cmp	r3, #0
90002446:	f040 8125 	bne.w	90002694 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
9000244a:	687b      	ldr	r3, [r7, #4]
9000244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000244e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
90002452:	f043 0202 	orr.w	r2, r3, #2
90002456:	687b      	ldr	r3, [r7, #4]
90002458:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
9000245a:	687b      	ldr	r3, [r7, #4]
9000245c:	681b      	ldr	r3, [r3, #0]
9000245e:	4618      	mov	r0, r3
90002460:	f7ff ff4a 	bl	900022f8 <LL_ADC_IsEnabled>
90002464:	4603      	mov	r3, r0
90002466:	2b00      	cmp	r3, #0
90002468:	d136      	bne.n	900024d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
9000246a:	687b      	ldr	r3, [r7, #4]
9000246c:	681b      	ldr	r3, [r3, #0]
9000246e:	4a65      	ldr	r2, [pc, #404]	; (90002604 <HAL_ADC_Init+0x298>)
90002470:	4293      	cmp	r3, r2
90002472:	d004      	beq.n	9000247e <HAL_ADC_Init+0x112>
90002474:	687b      	ldr	r3, [r7, #4]
90002476:	681b      	ldr	r3, [r3, #0]
90002478:	4a63      	ldr	r2, [pc, #396]	; (90002608 <HAL_ADC_Init+0x29c>)
9000247a:	4293      	cmp	r3, r2
9000247c:	d10e      	bne.n	9000249c <HAL_ADC_Init+0x130>
9000247e:	4861      	ldr	r0, [pc, #388]	; (90002604 <HAL_ADC_Init+0x298>)
90002480:	f7ff ff3a 	bl	900022f8 <LL_ADC_IsEnabled>
90002484:	4604      	mov	r4, r0
90002486:	4860      	ldr	r0, [pc, #384]	; (90002608 <HAL_ADC_Init+0x29c>)
90002488:	f7ff ff36 	bl	900022f8 <LL_ADC_IsEnabled>
9000248c:	4603      	mov	r3, r0
9000248e:	4323      	orrs	r3, r4
90002490:	2b00      	cmp	r3, #0
90002492:	bf0c      	ite	eq
90002494:	2301      	moveq	r3, #1
90002496:	2300      	movne	r3, #0
90002498:	b2db      	uxtb	r3, r3
9000249a:	e008      	b.n	900024ae <HAL_ADC_Init+0x142>
9000249c:	485b      	ldr	r0, [pc, #364]	; (9000260c <HAL_ADC_Init+0x2a0>)
9000249e:	f7ff ff2b 	bl	900022f8 <LL_ADC_IsEnabled>
900024a2:	4603      	mov	r3, r0
900024a4:	2b00      	cmp	r3, #0
900024a6:	bf0c      	ite	eq
900024a8:	2301      	moveq	r3, #1
900024aa:	2300      	movne	r3, #0
900024ac:	b2db      	uxtb	r3, r3
900024ae:	2b00      	cmp	r3, #0
900024b0:	d012      	beq.n	900024d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
900024b2:	687b      	ldr	r3, [r7, #4]
900024b4:	681b      	ldr	r3, [r3, #0]
900024b6:	4a53      	ldr	r2, [pc, #332]	; (90002604 <HAL_ADC_Init+0x298>)
900024b8:	4293      	cmp	r3, r2
900024ba:	d004      	beq.n	900024c6 <HAL_ADC_Init+0x15a>
900024bc:	687b      	ldr	r3, [r7, #4]
900024be:	681b      	ldr	r3, [r3, #0]
900024c0:	4a51      	ldr	r2, [pc, #324]	; (90002608 <HAL_ADC_Init+0x29c>)
900024c2:	4293      	cmp	r3, r2
900024c4:	d101      	bne.n	900024ca <HAL_ADC_Init+0x15e>
900024c6:	4a52      	ldr	r2, [pc, #328]	; (90002610 <HAL_ADC_Init+0x2a4>)
900024c8:	e000      	b.n	900024cc <HAL_ADC_Init+0x160>
900024ca:	4a52      	ldr	r2, [pc, #328]	; (90002614 <HAL_ADC_Init+0x2a8>)
900024cc:	687b      	ldr	r3, [r7, #4]
900024ce:	685b      	ldr	r3, [r3, #4]
900024d0:	4619      	mov	r1, r3
900024d2:	4610      	mov	r0, r2
900024d4:	f7ff fdbe 	bl	90002054 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
900024d8:	f7ff fd9a 	bl	90002010 <HAL_GetREVID>
900024dc:	4603      	mov	r3, r0
900024de:	f241 0203 	movw	r2, #4099	; 0x1003
900024e2:	4293      	cmp	r3, r2
900024e4:	d914      	bls.n	90002510 <HAL_ADC_Init+0x1a4>
900024e6:	687b      	ldr	r3, [r7, #4]
900024e8:	689b      	ldr	r3, [r3, #8]
900024ea:	2b10      	cmp	r3, #16
900024ec:	d110      	bne.n	90002510 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
900024ee:	687b      	ldr	r3, [r7, #4]
900024f0:	7d5b      	ldrb	r3, [r3, #21]
900024f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
900024f4:	687b      	ldr	r3, [r7, #4]
900024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
900024f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
900024fa:	687b      	ldr	r3, [r7, #4]
900024fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
900024fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
90002500:	687b      	ldr	r3, [r7, #4]
90002502:	7f1b      	ldrb	r3, [r3, #28]
90002504:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
90002506:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
90002508:	f043 030c 	orr.w	r3, r3, #12
9000250c:	61bb      	str	r3, [r7, #24]
9000250e:	e00d      	b.n	9000252c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
90002510:	687b      	ldr	r3, [r7, #4]
90002512:	7d5b      	ldrb	r3, [r3, #21]
90002514:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
90002516:	687b      	ldr	r3, [r7, #4]
90002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
9000251a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
9000251c:	687b      	ldr	r3, [r7, #4]
9000251e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
90002520:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
90002522:	687b      	ldr	r3, [r7, #4]
90002524:	7f1b      	ldrb	r3, [r3, #28]
90002526:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
90002528:	4313      	orrs	r3, r2
9000252a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
9000252c:	687b      	ldr	r3, [r7, #4]
9000252e:	7f1b      	ldrb	r3, [r3, #28]
90002530:	2b01      	cmp	r3, #1
90002532:	d106      	bne.n	90002542 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
90002534:	687b      	ldr	r3, [r7, #4]
90002536:	6a1b      	ldr	r3, [r3, #32]
90002538:	3b01      	subs	r3, #1
9000253a:	045b      	lsls	r3, r3, #17
9000253c:	69ba      	ldr	r2, [r7, #24]
9000253e:	4313      	orrs	r3, r2
90002540:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
90002542:	687b      	ldr	r3, [r7, #4]
90002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002546:	2b00      	cmp	r3, #0
90002548:	d009      	beq.n	9000255e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
9000254a:	687b      	ldr	r3, [r7, #4]
9000254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000254e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
90002552:	687b      	ldr	r3, [r7, #4]
90002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002556:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
90002558:	69ba      	ldr	r2, [r7, #24]
9000255a:	4313      	orrs	r3, r2
9000255c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
9000255e:	687b      	ldr	r3, [r7, #4]
90002560:	681b      	ldr	r3, [r3, #0]
90002562:	68da      	ldr	r2, [r3, #12]
90002564:	4b2c      	ldr	r3, [pc, #176]	; (90002618 <HAL_ADC_Init+0x2ac>)
90002566:	4013      	ands	r3, r2
90002568:	687a      	ldr	r2, [r7, #4]
9000256a:	6812      	ldr	r2, [r2, #0]
9000256c:	69b9      	ldr	r1, [r7, #24]
9000256e:	430b      	orrs	r3, r1
90002570:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
90002572:	687b      	ldr	r3, [r7, #4]
90002574:	681b      	ldr	r3, [r3, #0]
90002576:	4618      	mov	r0, r3
90002578:	f7ff fed1 	bl	9000231e <LL_ADC_REG_IsConversionOngoing>
9000257c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
9000257e:	687b      	ldr	r3, [r7, #4]
90002580:	681b      	ldr	r3, [r3, #0]
90002582:	4618      	mov	r0, r3
90002584:	f7ff fede 	bl	90002344 <LL_ADC_INJ_IsConversionOngoing>
90002588:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
9000258a:	693b      	ldr	r3, [r7, #16]
9000258c:	2b00      	cmp	r3, #0
9000258e:	d15f      	bne.n	90002650 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
90002590:	68fb      	ldr	r3, [r7, #12]
90002592:	2b00      	cmp	r3, #0
90002594:	d15c      	bne.n	90002650 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
90002596:	687b      	ldr	r3, [r7, #4]
90002598:	7d1b      	ldrb	r3, [r3, #20]
9000259a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
9000259c:	687b      	ldr	r3, [r7, #4]
9000259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
900025a0:	4313      	orrs	r3, r2
900025a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
900025a4:	687b      	ldr	r3, [r7, #4]
900025a6:	681b      	ldr	r3, [r3, #0]
900025a8:	68da      	ldr	r2, [r3, #12]
900025aa:	4b1c      	ldr	r3, [pc, #112]	; (9000261c <HAL_ADC_Init+0x2b0>)
900025ac:	4013      	ands	r3, r2
900025ae:	687a      	ldr	r2, [r7, #4]
900025b0:	6812      	ldr	r2, [r2, #0]
900025b2:	69b9      	ldr	r1, [r7, #24]
900025b4:	430b      	orrs	r3, r1
900025b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
900025b8:	687b      	ldr	r3, [r7, #4]
900025ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
900025be:	2b01      	cmp	r3, #1
900025c0:	d130      	bne.n	90002624 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
900025c2:	687b      	ldr	r3, [r7, #4]
900025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900025c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
900025c8:	687b      	ldr	r3, [r7, #4]
900025ca:	681b      	ldr	r3, [r3, #0]
900025cc:	691a      	ldr	r2, [r3, #16]
900025ce:	4b14      	ldr	r3, [pc, #80]	; (90002620 <HAL_ADC_Init+0x2b4>)
900025d0:	4013      	ands	r3, r2
900025d2:	687a      	ldr	r2, [r7, #4]
900025d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
900025d6:	3a01      	subs	r2, #1
900025d8:	0411      	lsls	r1, r2, #16
900025da:	687a      	ldr	r2, [r7, #4]
900025dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
900025de:	4311      	orrs	r1, r2
900025e0:	687a      	ldr	r2, [r7, #4]
900025e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
900025e4:	4311      	orrs	r1, r2
900025e6:	687a      	ldr	r2, [r7, #4]
900025e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
900025ea:	430a      	orrs	r2, r1
900025ec:	431a      	orrs	r2, r3
900025ee:	687b      	ldr	r3, [r7, #4]
900025f0:	681b      	ldr	r3, [r3, #0]
900025f2:	f042 0201 	orr.w	r2, r2, #1
900025f6:	611a      	str	r2, [r3, #16]
900025f8:	e01c      	b.n	90002634 <HAL_ADC_Init+0x2c8>
900025fa:	bf00      	nop
900025fc:	20000008 	.word	0x20000008
90002600:	053e2d63 	.word	0x053e2d63
90002604:	40022000 	.word	0x40022000
90002608:	40022100 	.word	0x40022100
9000260c:	58026000 	.word	0x58026000
90002610:	40022300 	.word	0x40022300
90002614:	58026300 	.word	0x58026300
90002618:	fff0c003 	.word	0xfff0c003
9000261c:	ffffbffc 	.word	0xffffbffc
90002620:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
90002624:	687b      	ldr	r3, [r7, #4]
90002626:	681b      	ldr	r3, [r3, #0]
90002628:	691a      	ldr	r2, [r3, #16]
9000262a:	687b      	ldr	r3, [r7, #4]
9000262c:	681b      	ldr	r3, [r3, #0]
9000262e:	f022 0201 	bic.w	r2, r2, #1
90002632:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
90002634:	687b      	ldr	r3, [r7, #4]
90002636:	681b      	ldr	r3, [r3, #0]
90002638:	691b      	ldr	r3, [r3, #16]
9000263a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
9000263e:	687b      	ldr	r3, [r7, #4]
90002640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90002642:	687b      	ldr	r3, [r7, #4]
90002644:	681b      	ldr	r3, [r3, #0]
90002646:	430a      	orrs	r2, r1
90002648:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
9000264a:	6878      	ldr	r0, [r7, #4]
9000264c:	f000 fb80 	bl	90002d50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
90002650:	687b      	ldr	r3, [r7, #4]
90002652:	68db      	ldr	r3, [r3, #12]
90002654:	2b01      	cmp	r3, #1
90002656:	d10c      	bne.n	90002672 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
90002658:	687b      	ldr	r3, [r7, #4]
9000265a:	681b      	ldr	r3, [r3, #0]
9000265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000265e:	f023 010f 	bic.w	r1, r3, #15
90002662:	687b      	ldr	r3, [r7, #4]
90002664:	699b      	ldr	r3, [r3, #24]
90002666:	1e5a      	subs	r2, r3, #1
90002668:	687b      	ldr	r3, [r7, #4]
9000266a:	681b      	ldr	r3, [r3, #0]
9000266c:	430a      	orrs	r2, r1
9000266e:	631a      	str	r2, [r3, #48]	; 0x30
90002670:	e007      	b.n	90002682 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
90002672:	687b      	ldr	r3, [r7, #4]
90002674:	681b      	ldr	r3, [r3, #0]
90002676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002678:	687b      	ldr	r3, [r7, #4]
9000267a:	681b      	ldr	r3, [r3, #0]
9000267c:	f022 020f 	bic.w	r2, r2, #15
90002680:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
90002682:	687b      	ldr	r3, [r7, #4]
90002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002686:	f023 0303 	bic.w	r3, r3, #3
9000268a:	f043 0201 	orr.w	r2, r3, #1
9000268e:	687b      	ldr	r3, [r7, #4]
90002690:	655a      	str	r2, [r3, #84]	; 0x54
90002692:	e007      	b.n	900026a4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
90002694:	687b      	ldr	r3, [r7, #4]
90002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002698:	f043 0210 	orr.w	r2, r3, #16
9000269c:	687b      	ldr	r3, [r7, #4]
9000269e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
900026a0:	2301      	movs	r3, #1
900026a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
900026a4:	7ffb      	ldrb	r3, [r7, #31]
}
900026a6:	4618      	mov	r0, r3
900026a8:	3724      	adds	r7, #36	; 0x24
900026aa:	46bd      	mov	sp, r7
900026ac:	bd90      	pop	{r4, r7, pc}
900026ae:	bf00      	nop

900026b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
900026b0:	b590      	push	{r4, r7, lr}
900026b2:	b0a1      	sub	sp, #132	; 0x84
900026b4:	af00      	add	r7, sp, #0
900026b6:	6078      	str	r0, [r7, #4]
900026b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
900026ba:	2300      	movs	r3, #0
900026bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
900026c0:	2300      	movs	r3, #0
900026c2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
900026c4:	683b      	ldr	r3, [r7, #0]
900026c6:	68db      	ldr	r3, [r3, #12]
900026c8:	4a9d      	ldr	r2, [pc, #628]	; (90002940 <HAL_ADC_ConfigChannel+0x290>)
900026ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
900026cc:	687b      	ldr	r3, [r7, #4]
900026ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
900026d2:	2b01      	cmp	r3, #1
900026d4:	d101      	bne.n	900026da <HAL_ADC_ConfigChannel+0x2a>
900026d6:	2302      	movs	r3, #2
900026d8:	e321      	b.n	90002d1e <HAL_ADC_ConfigChannel+0x66e>
900026da:	687b      	ldr	r3, [r7, #4]
900026dc:	2201      	movs	r2, #1
900026de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
900026e2:	687b      	ldr	r3, [r7, #4]
900026e4:	681b      	ldr	r3, [r3, #0]
900026e6:	4618      	mov	r0, r3
900026e8:	f7ff fe19 	bl	9000231e <LL_ADC_REG_IsConversionOngoing>
900026ec:	4603      	mov	r3, r0
900026ee:	2b00      	cmp	r3, #0
900026f0:	f040 8306 	bne.w	90002d00 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
900026f4:	683b      	ldr	r3, [r7, #0]
900026f6:	681b      	ldr	r3, [r3, #0]
900026f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
900026fc:	2b00      	cmp	r3, #0
900026fe:	d108      	bne.n	90002712 <HAL_ADC_ConfigChannel+0x62>
90002700:	683b      	ldr	r3, [r7, #0]
90002702:	681b      	ldr	r3, [r3, #0]
90002704:	0e9b      	lsrs	r3, r3, #26
90002706:	f003 031f 	and.w	r3, r3, #31
9000270a:	2201      	movs	r2, #1
9000270c:	fa02 f303 	lsl.w	r3, r2, r3
90002710:	e016      	b.n	90002740 <HAL_ADC_ConfigChannel+0x90>
90002712:	683b      	ldr	r3, [r7, #0]
90002714:	681b      	ldr	r3, [r3, #0]
90002716:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90002718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000271a:	fa93 f3a3 	rbit	r3, r3
9000271e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
90002720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
90002722:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
90002724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
90002726:	2b00      	cmp	r3, #0
90002728:	d101      	bne.n	9000272e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
9000272a:	2320      	movs	r3, #32
9000272c:	e003      	b.n	90002736 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
9000272e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
90002730:	fab3 f383 	clz	r3, r3
90002734:	b2db      	uxtb	r3, r3
90002736:	f003 031f 	and.w	r3, r3, #31
9000273a:	2201      	movs	r2, #1
9000273c:	fa02 f303 	lsl.w	r3, r2, r3
90002740:	687a      	ldr	r2, [r7, #4]
90002742:	6812      	ldr	r2, [r2, #0]
90002744:	69d1      	ldr	r1, [r2, #28]
90002746:	687a      	ldr	r2, [r7, #4]
90002748:	6812      	ldr	r2, [r2, #0]
9000274a:	430b      	orrs	r3, r1
9000274c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
9000274e:	687b      	ldr	r3, [r7, #4]
90002750:	6818      	ldr	r0, [r3, #0]
90002752:	683b      	ldr	r3, [r7, #0]
90002754:	6859      	ldr	r1, [r3, #4]
90002756:	683b      	ldr	r3, [r7, #0]
90002758:	681b      	ldr	r3, [r3, #0]
9000275a:	461a      	mov	r2, r3
9000275c:	f7ff fd02 	bl	90002164 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
90002760:	687b      	ldr	r3, [r7, #4]
90002762:	681b      	ldr	r3, [r3, #0]
90002764:	4618      	mov	r0, r3
90002766:	f7ff fdda 	bl	9000231e <LL_ADC_REG_IsConversionOngoing>
9000276a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
9000276c:	687b      	ldr	r3, [r7, #4]
9000276e:	681b      	ldr	r3, [r3, #0]
90002770:	4618      	mov	r0, r3
90002772:	f7ff fde7 	bl	90002344 <LL_ADC_INJ_IsConversionOngoing>
90002776:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
90002778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000277a:	2b00      	cmp	r3, #0
9000277c:	f040 80b3 	bne.w	900028e6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
90002780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
90002782:	2b00      	cmp	r3, #0
90002784:	f040 80af 	bne.w	900028e6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
90002788:	687b      	ldr	r3, [r7, #4]
9000278a:	6818      	ldr	r0, [r3, #0]
9000278c:	683b      	ldr	r3, [r7, #0]
9000278e:	6819      	ldr	r1, [r3, #0]
90002790:	683b      	ldr	r3, [r7, #0]
90002792:	689b      	ldr	r3, [r3, #8]
90002794:	461a      	mov	r2, r3
90002796:	f7ff fd11 	bl	900021bc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
9000279a:	4b6a      	ldr	r3, [pc, #424]	; (90002944 <HAL_ADC_ConfigChannel+0x294>)
9000279c:	681b      	ldr	r3, [r3, #0]
9000279e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
900027a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900027a6:	d10b      	bne.n	900027c0 <HAL_ADC_ConfigChannel+0x110>
900027a8:	683b      	ldr	r3, [r7, #0]
900027aa:	695a      	ldr	r2, [r3, #20]
900027ac:	687b      	ldr	r3, [r7, #4]
900027ae:	681b      	ldr	r3, [r3, #0]
900027b0:	68db      	ldr	r3, [r3, #12]
900027b2:	089b      	lsrs	r3, r3, #2
900027b4:	f003 0307 	and.w	r3, r3, #7
900027b8:	005b      	lsls	r3, r3, #1
900027ba:	fa02 f303 	lsl.w	r3, r2, r3
900027be:	e01d      	b.n	900027fc <HAL_ADC_ConfigChannel+0x14c>
900027c0:	687b      	ldr	r3, [r7, #4]
900027c2:	681b      	ldr	r3, [r3, #0]
900027c4:	68db      	ldr	r3, [r3, #12]
900027c6:	f003 0310 	and.w	r3, r3, #16
900027ca:	2b00      	cmp	r3, #0
900027cc:	d10b      	bne.n	900027e6 <HAL_ADC_ConfigChannel+0x136>
900027ce:	683b      	ldr	r3, [r7, #0]
900027d0:	695a      	ldr	r2, [r3, #20]
900027d2:	687b      	ldr	r3, [r7, #4]
900027d4:	681b      	ldr	r3, [r3, #0]
900027d6:	68db      	ldr	r3, [r3, #12]
900027d8:	089b      	lsrs	r3, r3, #2
900027da:	f003 0307 	and.w	r3, r3, #7
900027de:	005b      	lsls	r3, r3, #1
900027e0:	fa02 f303 	lsl.w	r3, r2, r3
900027e4:	e00a      	b.n	900027fc <HAL_ADC_ConfigChannel+0x14c>
900027e6:	683b      	ldr	r3, [r7, #0]
900027e8:	695a      	ldr	r2, [r3, #20]
900027ea:	687b      	ldr	r3, [r7, #4]
900027ec:	681b      	ldr	r3, [r3, #0]
900027ee:	68db      	ldr	r3, [r3, #12]
900027f0:	089b      	lsrs	r3, r3, #2
900027f2:	f003 0304 	and.w	r3, r3, #4
900027f6:	005b      	lsls	r3, r3, #1
900027f8:	fa02 f303 	lsl.w	r3, r2, r3
900027fc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
900027fe:	683b      	ldr	r3, [r7, #0]
90002800:	691b      	ldr	r3, [r3, #16]
90002802:	2b04      	cmp	r3, #4
90002804:	d027      	beq.n	90002856 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
90002806:	687b      	ldr	r3, [r7, #4]
90002808:	6818      	ldr	r0, [r3, #0]
9000280a:	683b      	ldr	r3, [r7, #0]
9000280c:	6919      	ldr	r1, [r3, #16]
9000280e:	683b      	ldr	r3, [r7, #0]
90002810:	681a      	ldr	r2, [r3, #0]
90002812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90002814:	f7ff fc52 	bl	900020bc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
90002818:	687b      	ldr	r3, [r7, #4]
9000281a:	6818      	ldr	r0, [r3, #0]
9000281c:	683b      	ldr	r3, [r7, #0]
9000281e:	6919      	ldr	r1, [r3, #16]
90002820:	683b      	ldr	r3, [r7, #0]
90002822:	7e5b      	ldrb	r3, [r3, #25]
90002824:	2b01      	cmp	r3, #1
90002826:	d102      	bne.n	9000282e <HAL_ADC_ConfigChannel+0x17e>
90002828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
9000282c:	e000      	b.n	90002830 <HAL_ADC_ConfigChannel+0x180>
9000282e:	2300      	movs	r3, #0
90002830:	461a      	mov	r2, r3
90002832:	f7ff fc7c 	bl	9000212e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
90002836:	687b      	ldr	r3, [r7, #4]
90002838:	6818      	ldr	r0, [r3, #0]
9000283a:	683b      	ldr	r3, [r7, #0]
9000283c:	6919      	ldr	r1, [r3, #16]
9000283e:	683b      	ldr	r3, [r7, #0]
90002840:	7e1b      	ldrb	r3, [r3, #24]
90002842:	2b01      	cmp	r3, #1
90002844:	d102      	bne.n	9000284c <HAL_ADC_ConfigChannel+0x19c>
90002846:	f44f 6300 	mov.w	r3, #2048	; 0x800
9000284a:	e000      	b.n	9000284e <HAL_ADC_ConfigChannel+0x19e>
9000284c:	2300      	movs	r3, #0
9000284e:	461a      	mov	r2, r3
90002850:	f7ff fc54 	bl	900020fc <LL_ADC_SetDataRightShift>
90002854:	e047      	b.n	900028e6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
90002856:	687b      	ldr	r3, [r7, #4]
90002858:	681b      	ldr	r3, [r3, #0]
9000285a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000285c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
90002860:	683b      	ldr	r3, [r7, #0]
90002862:	681b      	ldr	r3, [r3, #0]
90002864:	069b      	lsls	r3, r3, #26
90002866:	429a      	cmp	r2, r3
90002868:	d107      	bne.n	9000287a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
9000286a:	687b      	ldr	r3, [r7, #4]
9000286c:	681b      	ldr	r3, [r3, #0]
9000286e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
90002870:	687b      	ldr	r3, [r7, #4]
90002872:	681b      	ldr	r3, [r3, #0]
90002874:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
90002878:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
9000287a:	687b      	ldr	r3, [r7, #4]
9000287c:	681b      	ldr	r3, [r3, #0]
9000287e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90002880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
90002884:	683b      	ldr	r3, [r7, #0]
90002886:	681b      	ldr	r3, [r3, #0]
90002888:	069b      	lsls	r3, r3, #26
9000288a:	429a      	cmp	r2, r3
9000288c:	d107      	bne.n	9000289e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
9000288e:	687b      	ldr	r3, [r7, #4]
90002890:	681b      	ldr	r3, [r3, #0]
90002892:	6e5a      	ldr	r2, [r3, #100]	; 0x64
90002894:	687b      	ldr	r3, [r7, #4]
90002896:	681b      	ldr	r3, [r3, #0]
90002898:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
9000289c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
9000289e:	687b      	ldr	r3, [r7, #4]
900028a0:	681b      	ldr	r3, [r3, #0]
900028a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
900028a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
900028a8:	683b      	ldr	r3, [r7, #0]
900028aa:	681b      	ldr	r3, [r3, #0]
900028ac:	069b      	lsls	r3, r3, #26
900028ae:	429a      	cmp	r2, r3
900028b0:	d107      	bne.n	900028c2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
900028b2:	687b      	ldr	r3, [r7, #4]
900028b4:	681b      	ldr	r3, [r3, #0]
900028b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
900028b8:	687b      	ldr	r3, [r7, #4]
900028ba:	681b      	ldr	r3, [r3, #0]
900028bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
900028c0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
900028c2:	687b      	ldr	r3, [r7, #4]
900028c4:	681b      	ldr	r3, [r3, #0]
900028c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900028c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
900028cc:	683b      	ldr	r3, [r7, #0]
900028ce:	681b      	ldr	r3, [r3, #0]
900028d0:	069b      	lsls	r3, r3, #26
900028d2:	429a      	cmp	r2, r3
900028d4:	d107      	bne.n	900028e6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
900028d6:	687b      	ldr	r3, [r7, #4]
900028d8:	681b      	ldr	r3, [r3, #0]
900028da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
900028dc:	687b      	ldr	r3, [r7, #4]
900028de:	681b      	ldr	r3, [r3, #0]
900028e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
900028e4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
900028e6:	687b      	ldr	r3, [r7, #4]
900028e8:	681b      	ldr	r3, [r3, #0]
900028ea:	4618      	mov	r0, r3
900028ec:	f7ff fd04 	bl	900022f8 <LL_ADC_IsEnabled>
900028f0:	4603      	mov	r3, r0
900028f2:	2b00      	cmp	r3, #0
900028f4:	f040 820d 	bne.w	90002d12 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
900028f8:	687b      	ldr	r3, [r7, #4]
900028fa:	6818      	ldr	r0, [r3, #0]
900028fc:	683b      	ldr	r3, [r7, #0]
900028fe:	6819      	ldr	r1, [r3, #0]
90002900:	683b      	ldr	r3, [r7, #0]
90002902:	68db      	ldr	r3, [r3, #12]
90002904:	461a      	mov	r2, r3
90002906:	f7ff fc85 	bl	90002214 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
9000290a:	683b      	ldr	r3, [r7, #0]
9000290c:	68db      	ldr	r3, [r3, #12]
9000290e:	4a0c      	ldr	r2, [pc, #48]	; (90002940 <HAL_ADC_ConfigChannel+0x290>)
90002910:	4293      	cmp	r3, r2
90002912:	f040 8133 	bne.w	90002b7c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
90002916:	687b      	ldr	r3, [r7, #4]
90002918:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
9000291a:	683b      	ldr	r3, [r7, #0]
9000291c:	681b      	ldr	r3, [r3, #0]
9000291e:	f3c3 0313 	ubfx	r3, r3, #0, #20
90002922:	2b00      	cmp	r3, #0
90002924:	d110      	bne.n	90002948 <HAL_ADC_ConfigChannel+0x298>
90002926:	683b      	ldr	r3, [r7, #0]
90002928:	681b      	ldr	r3, [r3, #0]
9000292a:	0e9b      	lsrs	r3, r3, #26
9000292c:	3301      	adds	r3, #1
9000292e:	f003 031f 	and.w	r3, r3, #31
90002932:	2b09      	cmp	r3, #9
90002934:	bf94      	ite	ls
90002936:	2301      	movls	r3, #1
90002938:	2300      	movhi	r3, #0
9000293a:	b2db      	uxtb	r3, r3
9000293c:	e01e      	b.n	9000297c <HAL_ADC_ConfigChannel+0x2cc>
9000293e:	bf00      	nop
90002940:	47ff0000 	.word	0x47ff0000
90002944:	5c001000 	.word	0x5c001000
90002948:	683b      	ldr	r3, [r7, #0]
9000294a:	681b      	ldr	r3, [r3, #0]
9000294c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
9000294e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
90002950:	fa93 f3a3 	rbit	r3, r3
90002954:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
90002956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90002958:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
9000295a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000295c:	2b00      	cmp	r3, #0
9000295e:	d101      	bne.n	90002964 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
90002960:	2320      	movs	r3, #32
90002962:	e003      	b.n	9000296c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
90002964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
90002966:	fab3 f383 	clz	r3, r3
9000296a:	b2db      	uxtb	r3, r3
9000296c:	3301      	adds	r3, #1
9000296e:	f003 031f 	and.w	r3, r3, #31
90002972:	2b09      	cmp	r3, #9
90002974:	bf94      	ite	ls
90002976:	2301      	movls	r3, #1
90002978:	2300      	movhi	r3, #0
9000297a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
9000297c:	2b00      	cmp	r3, #0
9000297e:	d079      	beq.n	90002a74 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90002980:	683b      	ldr	r3, [r7, #0]
90002982:	681b      	ldr	r3, [r3, #0]
90002984:	f3c3 0313 	ubfx	r3, r3, #0, #20
90002988:	2b00      	cmp	r3, #0
9000298a:	d107      	bne.n	9000299c <HAL_ADC_ConfigChannel+0x2ec>
9000298c:	683b      	ldr	r3, [r7, #0]
9000298e:	681b      	ldr	r3, [r3, #0]
90002990:	0e9b      	lsrs	r3, r3, #26
90002992:	3301      	adds	r3, #1
90002994:	069b      	lsls	r3, r3, #26
90002996:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
9000299a:	e015      	b.n	900029c8 <HAL_ADC_ConfigChannel+0x318>
9000299c:	683b      	ldr	r3, [r7, #0]
9000299e:	681b      	ldr	r3, [r3, #0]
900029a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
900029a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
900029a4:	fa93 f3a3 	rbit	r3, r3
900029a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
900029aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900029ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
900029ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900029b0:	2b00      	cmp	r3, #0
900029b2:	d101      	bne.n	900029b8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
900029b4:	2320      	movs	r3, #32
900029b6:	e003      	b.n	900029c0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
900029b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900029ba:	fab3 f383 	clz	r3, r3
900029be:	b2db      	uxtb	r3, r3
900029c0:	3301      	adds	r3, #1
900029c2:	069b      	lsls	r3, r3, #26
900029c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
900029c8:	683b      	ldr	r3, [r7, #0]
900029ca:	681b      	ldr	r3, [r3, #0]
900029cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
900029d0:	2b00      	cmp	r3, #0
900029d2:	d109      	bne.n	900029e8 <HAL_ADC_ConfigChannel+0x338>
900029d4:	683b      	ldr	r3, [r7, #0]
900029d6:	681b      	ldr	r3, [r3, #0]
900029d8:	0e9b      	lsrs	r3, r3, #26
900029da:	3301      	adds	r3, #1
900029dc:	f003 031f 	and.w	r3, r3, #31
900029e0:	2101      	movs	r1, #1
900029e2:	fa01 f303 	lsl.w	r3, r1, r3
900029e6:	e017      	b.n	90002a18 <HAL_ADC_ConfigChannel+0x368>
900029e8:	683b      	ldr	r3, [r7, #0]
900029ea:	681b      	ldr	r3, [r3, #0]
900029ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
900029ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
900029f0:	fa93 f3a3 	rbit	r3, r3
900029f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
900029f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900029f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
900029fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900029fc:	2b00      	cmp	r3, #0
900029fe:	d101      	bne.n	90002a04 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
90002a00:	2320      	movs	r3, #32
90002a02:	e003      	b.n	90002a0c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
90002a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90002a06:	fab3 f383 	clz	r3, r3
90002a0a:	b2db      	uxtb	r3, r3
90002a0c:	3301      	adds	r3, #1
90002a0e:	f003 031f 	and.w	r3, r3, #31
90002a12:	2101      	movs	r1, #1
90002a14:	fa01 f303 	lsl.w	r3, r1, r3
90002a18:	ea42 0103 	orr.w	r1, r2, r3
90002a1c:	683b      	ldr	r3, [r7, #0]
90002a1e:	681b      	ldr	r3, [r3, #0]
90002a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
90002a24:	2b00      	cmp	r3, #0
90002a26:	d10a      	bne.n	90002a3e <HAL_ADC_ConfigChannel+0x38e>
90002a28:	683b      	ldr	r3, [r7, #0]
90002a2a:	681b      	ldr	r3, [r3, #0]
90002a2c:	0e9b      	lsrs	r3, r3, #26
90002a2e:	3301      	adds	r3, #1
90002a30:	f003 021f 	and.w	r2, r3, #31
90002a34:	4613      	mov	r3, r2
90002a36:	005b      	lsls	r3, r3, #1
90002a38:	4413      	add	r3, r2
90002a3a:	051b      	lsls	r3, r3, #20
90002a3c:	e018      	b.n	90002a70 <HAL_ADC_ConfigChannel+0x3c0>
90002a3e:	683b      	ldr	r3, [r7, #0]
90002a40:	681b      	ldr	r3, [r3, #0]
90002a42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90002a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90002a46:	fa93 f3a3 	rbit	r3, r3
90002a4a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
90002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90002a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
90002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90002a52:	2b00      	cmp	r3, #0
90002a54:	d101      	bne.n	90002a5a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
90002a56:	2320      	movs	r3, #32
90002a58:	e003      	b.n	90002a62 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
90002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90002a5c:	fab3 f383 	clz	r3, r3
90002a60:	b2db      	uxtb	r3, r3
90002a62:	3301      	adds	r3, #1
90002a64:	f003 021f 	and.w	r2, r3, #31
90002a68:	4613      	mov	r3, r2
90002a6a:	005b      	lsls	r3, r3, #1
90002a6c:	4413      	add	r3, r2
90002a6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
90002a70:	430b      	orrs	r3, r1
90002a72:	e07e      	b.n	90002b72 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90002a74:	683b      	ldr	r3, [r7, #0]
90002a76:	681b      	ldr	r3, [r3, #0]
90002a78:	f3c3 0313 	ubfx	r3, r3, #0, #20
90002a7c:	2b00      	cmp	r3, #0
90002a7e:	d107      	bne.n	90002a90 <HAL_ADC_ConfigChannel+0x3e0>
90002a80:	683b      	ldr	r3, [r7, #0]
90002a82:	681b      	ldr	r3, [r3, #0]
90002a84:	0e9b      	lsrs	r3, r3, #26
90002a86:	3301      	adds	r3, #1
90002a88:	069b      	lsls	r3, r3, #26
90002a8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
90002a8e:	e015      	b.n	90002abc <HAL_ADC_ConfigChannel+0x40c>
90002a90:	683b      	ldr	r3, [r7, #0]
90002a92:	681b      	ldr	r3, [r3, #0]
90002a94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
90002a98:	fa93 f3a3 	rbit	r3, r3
90002a9c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
90002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
90002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002aa4:	2b00      	cmp	r3, #0
90002aa6:	d101      	bne.n	90002aac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
90002aa8:	2320      	movs	r3, #32
90002aaa:	e003      	b.n	90002ab4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
90002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002aae:	fab3 f383 	clz	r3, r3
90002ab2:	b2db      	uxtb	r3, r3
90002ab4:	3301      	adds	r3, #1
90002ab6:	069b      	lsls	r3, r3, #26
90002ab8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
90002abc:	683b      	ldr	r3, [r7, #0]
90002abe:	681b      	ldr	r3, [r3, #0]
90002ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
90002ac4:	2b00      	cmp	r3, #0
90002ac6:	d109      	bne.n	90002adc <HAL_ADC_ConfigChannel+0x42c>
90002ac8:	683b      	ldr	r3, [r7, #0]
90002aca:	681b      	ldr	r3, [r3, #0]
90002acc:	0e9b      	lsrs	r3, r3, #26
90002ace:	3301      	adds	r3, #1
90002ad0:	f003 031f 	and.w	r3, r3, #31
90002ad4:	2101      	movs	r1, #1
90002ad6:	fa01 f303 	lsl.w	r3, r1, r3
90002ada:	e017      	b.n	90002b0c <HAL_ADC_ConfigChannel+0x45c>
90002adc:	683b      	ldr	r3, [r7, #0]
90002ade:	681b      	ldr	r3, [r3, #0]
90002ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90002ae2:	69fb      	ldr	r3, [r7, #28]
90002ae4:	fa93 f3a3 	rbit	r3, r3
90002ae8:	61bb      	str	r3, [r7, #24]
  return result;
90002aea:	69bb      	ldr	r3, [r7, #24]
90002aec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
90002aee:	6a3b      	ldr	r3, [r7, #32]
90002af0:	2b00      	cmp	r3, #0
90002af2:	d101      	bne.n	90002af8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
90002af4:	2320      	movs	r3, #32
90002af6:	e003      	b.n	90002b00 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
90002af8:	6a3b      	ldr	r3, [r7, #32]
90002afa:	fab3 f383 	clz	r3, r3
90002afe:	b2db      	uxtb	r3, r3
90002b00:	3301      	adds	r3, #1
90002b02:	f003 031f 	and.w	r3, r3, #31
90002b06:	2101      	movs	r1, #1
90002b08:	fa01 f303 	lsl.w	r3, r1, r3
90002b0c:	ea42 0103 	orr.w	r1, r2, r3
90002b10:	683b      	ldr	r3, [r7, #0]
90002b12:	681b      	ldr	r3, [r3, #0]
90002b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
90002b18:	2b00      	cmp	r3, #0
90002b1a:	d10d      	bne.n	90002b38 <HAL_ADC_ConfigChannel+0x488>
90002b1c:	683b      	ldr	r3, [r7, #0]
90002b1e:	681b      	ldr	r3, [r3, #0]
90002b20:	0e9b      	lsrs	r3, r3, #26
90002b22:	3301      	adds	r3, #1
90002b24:	f003 021f 	and.w	r2, r3, #31
90002b28:	4613      	mov	r3, r2
90002b2a:	005b      	lsls	r3, r3, #1
90002b2c:	4413      	add	r3, r2
90002b2e:	3b1e      	subs	r3, #30
90002b30:	051b      	lsls	r3, r3, #20
90002b32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90002b36:	e01b      	b.n	90002b70 <HAL_ADC_ConfigChannel+0x4c0>
90002b38:	683b      	ldr	r3, [r7, #0]
90002b3a:	681b      	ldr	r3, [r3, #0]
90002b3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90002b3e:	693b      	ldr	r3, [r7, #16]
90002b40:	fa93 f3a3 	rbit	r3, r3
90002b44:	60fb      	str	r3, [r7, #12]
  return result;
90002b46:	68fb      	ldr	r3, [r7, #12]
90002b48:	617b      	str	r3, [r7, #20]
  if (value == 0U)
90002b4a:	697b      	ldr	r3, [r7, #20]
90002b4c:	2b00      	cmp	r3, #0
90002b4e:	d101      	bne.n	90002b54 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
90002b50:	2320      	movs	r3, #32
90002b52:	e003      	b.n	90002b5c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
90002b54:	697b      	ldr	r3, [r7, #20]
90002b56:	fab3 f383 	clz	r3, r3
90002b5a:	b2db      	uxtb	r3, r3
90002b5c:	3301      	adds	r3, #1
90002b5e:	f003 021f 	and.w	r2, r3, #31
90002b62:	4613      	mov	r3, r2
90002b64:	005b      	lsls	r3, r3, #1
90002b66:	4413      	add	r3, r2
90002b68:	3b1e      	subs	r3, #30
90002b6a:	051b      	lsls	r3, r3, #20
90002b6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
90002b70:	430b      	orrs	r3, r1
90002b72:	683a      	ldr	r2, [r7, #0]
90002b74:	6892      	ldr	r2, [r2, #8]
90002b76:	4619      	mov	r1, r3
90002b78:	f7ff fb20 	bl	900021bc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
90002b7c:	683b      	ldr	r3, [r7, #0]
90002b7e:	681b      	ldr	r3, [r3, #0]
90002b80:	2b00      	cmp	r3, #0
90002b82:	f280 80c6 	bge.w	90002d12 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90002b86:	687b      	ldr	r3, [r7, #4]
90002b88:	681b      	ldr	r3, [r3, #0]
90002b8a:	4a67      	ldr	r2, [pc, #412]	; (90002d28 <HAL_ADC_ConfigChannel+0x678>)
90002b8c:	4293      	cmp	r3, r2
90002b8e:	d004      	beq.n	90002b9a <HAL_ADC_ConfigChannel+0x4ea>
90002b90:	687b      	ldr	r3, [r7, #4]
90002b92:	681b      	ldr	r3, [r3, #0]
90002b94:	4a65      	ldr	r2, [pc, #404]	; (90002d2c <HAL_ADC_ConfigChannel+0x67c>)
90002b96:	4293      	cmp	r3, r2
90002b98:	d101      	bne.n	90002b9e <HAL_ADC_ConfigChannel+0x4ee>
90002b9a:	4b65      	ldr	r3, [pc, #404]	; (90002d30 <HAL_ADC_ConfigChannel+0x680>)
90002b9c:	e000      	b.n	90002ba0 <HAL_ADC_ConfigChannel+0x4f0>
90002b9e:	4b65      	ldr	r3, [pc, #404]	; (90002d34 <HAL_ADC_ConfigChannel+0x684>)
90002ba0:	4618      	mov	r0, r3
90002ba2:	f7ff fa7d 	bl	900020a0 <LL_ADC_GetCommonPathInternalCh>
90002ba6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90002ba8:	687b      	ldr	r3, [r7, #4]
90002baa:	681b      	ldr	r3, [r3, #0]
90002bac:	4a5e      	ldr	r2, [pc, #376]	; (90002d28 <HAL_ADC_ConfigChannel+0x678>)
90002bae:	4293      	cmp	r3, r2
90002bb0:	d004      	beq.n	90002bbc <HAL_ADC_ConfigChannel+0x50c>
90002bb2:	687b      	ldr	r3, [r7, #4]
90002bb4:	681b      	ldr	r3, [r3, #0]
90002bb6:	4a5d      	ldr	r2, [pc, #372]	; (90002d2c <HAL_ADC_ConfigChannel+0x67c>)
90002bb8:	4293      	cmp	r3, r2
90002bba:	d10e      	bne.n	90002bda <HAL_ADC_ConfigChannel+0x52a>
90002bbc:	485a      	ldr	r0, [pc, #360]	; (90002d28 <HAL_ADC_ConfigChannel+0x678>)
90002bbe:	f7ff fb9b 	bl	900022f8 <LL_ADC_IsEnabled>
90002bc2:	4604      	mov	r4, r0
90002bc4:	4859      	ldr	r0, [pc, #356]	; (90002d2c <HAL_ADC_ConfigChannel+0x67c>)
90002bc6:	f7ff fb97 	bl	900022f8 <LL_ADC_IsEnabled>
90002bca:	4603      	mov	r3, r0
90002bcc:	4323      	orrs	r3, r4
90002bce:	2b00      	cmp	r3, #0
90002bd0:	bf0c      	ite	eq
90002bd2:	2301      	moveq	r3, #1
90002bd4:	2300      	movne	r3, #0
90002bd6:	b2db      	uxtb	r3, r3
90002bd8:	e008      	b.n	90002bec <HAL_ADC_ConfigChannel+0x53c>
90002bda:	4857      	ldr	r0, [pc, #348]	; (90002d38 <HAL_ADC_ConfigChannel+0x688>)
90002bdc:	f7ff fb8c 	bl	900022f8 <LL_ADC_IsEnabled>
90002be0:	4603      	mov	r3, r0
90002be2:	2b00      	cmp	r3, #0
90002be4:	bf0c      	ite	eq
90002be6:	2301      	moveq	r3, #1
90002be8:	2300      	movne	r3, #0
90002bea:	b2db      	uxtb	r3, r3
90002bec:	2b00      	cmp	r3, #0
90002bee:	d07d      	beq.n	90002cec <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
90002bf0:	683b      	ldr	r3, [r7, #0]
90002bf2:	681b      	ldr	r3, [r3, #0]
90002bf4:	4a51      	ldr	r2, [pc, #324]	; (90002d3c <HAL_ADC_ConfigChannel+0x68c>)
90002bf6:	4293      	cmp	r3, r2
90002bf8:	d130      	bne.n	90002c5c <HAL_ADC_ConfigChannel+0x5ac>
90002bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90002bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90002c00:	2b00      	cmp	r3, #0
90002c02:	d12b      	bne.n	90002c5c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
90002c04:	687b      	ldr	r3, [r7, #4]
90002c06:	681b      	ldr	r3, [r3, #0]
90002c08:	4a4b      	ldr	r2, [pc, #300]	; (90002d38 <HAL_ADC_ConfigChannel+0x688>)
90002c0a:	4293      	cmp	r3, r2
90002c0c:	f040 8081 	bne.w	90002d12 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
90002c10:	687b      	ldr	r3, [r7, #4]
90002c12:	681b      	ldr	r3, [r3, #0]
90002c14:	4a44      	ldr	r2, [pc, #272]	; (90002d28 <HAL_ADC_ConfigChannel+0x678>)
90002c16:	4293      	cmp	r3, r2
90002c18:	d004      	beq.n	90002c24 <HAL_ADC_ConfigChannel+0x574>
90002c1a:	687b      	ldr	r3, [r7, #4]
90002c1c:	681b      	ldr	r3, [r3, #0]
90002c1e:	4a43      	ldr	r2, [pc, #268]	; (90002d2c <HAL_ADC_ConfigChannel+0x67c>)
90002c20:	4293      	cmp	r3, r2
90002c22:	d101      	bne.n	90002c28 <HAL_ADC_ConfigChannel+0x578>
90002c24:	4a42      	ldr	r2, [pc, #264]	; (90002d30 <HAL_ADC_ConfigChannel+0x680>)
90002c26:	e000      	b.n	90002c2a <HAL_ADC_ConfigChannel+0x57a>
90002c28:	4a42      	ldr	r2, [pc, #264]	; (90002d34 <HAL_ADC_ConfigChannel+0x684>)
90002c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90002c2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90002c30:	4619      	mov	r1, r3
90002c32:	4610      	mov	r0, r2
90002c34:	f7ff fa21 	bl	9000207a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
90002c38:	4b41      	ldr	r3, [pc, #260]	; (90002d40 <HAL_ADC_ConfigChannel+0x690>)
90002c3a:	681b      	ldr	r3, [r3, #0]
90002c3c:	099b      	lsrs	r3, r3, #6
90002c3e:	4a41      	ldr	r2, [pc, #260]	; (90002d44 <HAL_ADC_ConfigChannel+0x694>)
90002c40:	fba2 2303 	umull	r2, r3, r2, r3
90002c44:	099b      	lsrs	r3, r3, #6
90002c46:	3301      	adds	r3, #1
90002c48:	005b      	lsls	r3, r3, #1
90002c4a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
90002c4c:	e002      	b.n	90002c54 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
90002c4e:	68bb      	ldr	r3, [r7, #8]
90002c50:	3b01      	subs	r3, #1
90002c52:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
90002c54:	68bb      	ldr	r3, [r7, #8]
90002c56:	2b00      	cmp	r3, #0
90002c58:	d1f9      	bne.n	90002c4e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
90002c5a:	e05a      	b.n	90002d12 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
90002c5c:	683b      	ldr	r3, [r7, #0]
90002c5e:	681b      	ldr	r3, [r3, #0]
90002c60:	4a39      	ldr	r2, [pc, #228]	; (90002d48 <HAL_ADC_ConfigChannel+0x698>)
90002c62:	4293      	cmp	r3, r2
90002c64:	d11e      	bne.n	90002ca4 <HAL_ADC_ConfigChannel+0x5f4>
90002c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90002c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90002c6c:	2b00      	cmp	r3, #0
90002c6e:	d119      	bne.n	90002ca4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
90002c70:	687b      	ldr	r3, [r7, #4]
90002c72:	681b      	ldr	r3, [r3, #0]
90002c74:	4a30      	ldr	r2, [pc, #192]	; (90002d38 <HAL_ADC_ConfigChannel+0x688>)
90002c76:	4293      	cmp	r3, r2
90002c78:	d14b      	bne.n	90002d12 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
90002c7a:	687b      	ldr	r3, [r7, #4]
90002c7c:	681b      	ldr	r3, [r3, #0]
90002c7e:	4a2a      	ldr	r2, [pc, #168]	; (90002d28 <HAL_ADC_ConfigChannel+0x678>)
90002c80:	4293      	cmp	r3, r2
90002c82:	d004      	beq.n	90002c8e <HAL_ADC_ConfigChannel+0x5de>
90002c84:	687b      	ldr	r3, [r7, #4]
90002c86:	681b      	ldr	r3, [r3, #0]
90002c88:	4a28      	ldr	r2, [pc, #160]	; (90002d2c <HAL_ADC_ConfigChannel+0x67c>)
90002c8a:	4293      	cmp	r3, r2
90002c8c:	d101      	bne.n	90002c92 <HAL_ADC_ConfigChannel+0x5e2>
90002c8e:	4a28      	ldr	r2, [pc, #160]	; (90002d30 <HAL_ADC_ConfigChannel+0x680>)
90002c90:	e000      	b.n	90002c94 <HAL_ADC_ConfigChannel+0x5e4>
90002c92:	4a28      	ldr	r2, [pc, #160]	; (90002d34 <HAL_ADC_ConfigChannel+0x684>)
90002c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90002c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90002c9a:	4619      	mov	r1, r3
90002c9c:	4610      	mov	r0, r2
90002c9e:	f7ff f9ec 	bl	9000207a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
90002ca2:	e036      	b.n	90002d12 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
90002ca4:	683b      	ldr	r3, [r7, #0]
90002ca6:	681b      	ldr	r3, [r3, #0]
90002ca8:	4a28      	ldr	r2, [pc, #160]	; (90002d4c <HAL_ADC_ConfigChannel+0x69c>)
90002caa:	4293      	cmp	r3, r2
90002cac:	d131      	bne.n	90002d12 <HAL_ADC_ConfigChannel+0x662>
90002cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90002cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90002cb4:	2b00      	cmp	r3, #0
90002cb6:	d12c      	bne.n	90002d12 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
90002cb8:	687b      	ldr	r3, [r7, #4]
90002cba:	681b      	ldr	r3, [r3, #0]
90002cbc:	4a1e      	ldr	r2, [pc, #120]	; (90002d38 <HAL_ADC_ConfigChannel+0x688>)
90002cbe:	4293      	cmp	r3, r2
90002cc0:	d127      	bne.n	90002d12 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
90002cc2:	687b      	ldr	r3, [r7, #4]
90002cc4:	681b      	ldr	r3, [r3, #0]
90002cc6:	4a18      	ldr	r2, [pc, #96]	; (90002d28 <HAL_ADC_ConfigChannel+0x678>)
90002cc8:	4293      	cmp	r3, r2
90002cca:	d004      	beq.n	90002cd6 <HAL_ADC_ConfigChannel+0x626>
90002ccc:	687b      	ldr	r3, [r7, #4]
90002cce:	681b      	ldr	r3, [r3, #0]
90002cd0:	4a16      	ldr	r2, [pc, #88]	; (90002d2c <HAL_ADC_ConfigChannel+0x67c>)
90002cd2:	4293      	cmp	r3, r2
90002cd4:	d101      	bne.n	90002cda <HAL_ADC_ConfigChannel+0x62a>
90002cd6:	4a16      	ldr	r2, [pc, #88]	; (90002d30 <HAL_ADC_ConfigChannel+0x680>)
90002cd8:	e000      	b.n	90002cdc <HAL_ADC_ConfigChannel+0x62c>
90002cda:	4a16      	ldr	r2, [pc, #88]	; (90002d34 <HAL_ADC_ConfigChannel+0x684>)
90002cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90002cde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90002ce2:	4619      	mov	r1, r3
90002ce4:	4610      	mov	r0, r2
90002ce6:	f7ff f9c8 	bl	9000207a <LL_ADC_SetCommonPathInternalCh>
90002cea:	e012      	b.n	90002d12 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90002cec:	687b      	ldr	r3, [r7, #4]
90002cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002cf0:	f043 0220 	orr.w	r2, r3, #32
90002cf4:	687b      	ldr	r3, [r7, #4]
90002cf6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
90002cf8:	2301      	movs	r3, #1
90002cfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
90002cfe:	e008      	b.n	90002d12 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90002d00:	687b      	ldr	r3, [r7, #4]
90002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002d04:	f043 0220 	orr.w	r2, r3, #32
90002d08:	687b      	ldr	r3, [r7, #4]
90002d0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
90002d0c:	2301      	movs	r3, #1
90002d0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
90002d12:	687b      	ldr	r3, [r7, #4]
90002d14:	2200      	movs	r2, #0
90002d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
90002d1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
90002d1e:	4618      	mov	r0, r3
90002d20:	3784      	adds	r7, #132	; 0x84
90002d22:	46bd      	mov	sp, r7
90002d24:	bd90      	pop	{r4, r7, pc}
90002d26:	bf00      	nop
90002d28:	40022000 	.word	0x40022000
90002d2c:	40022100 	.word	0x40022100
90002d30:	40022300 	.word	0x40022300
90002d34:	58026300 	.word	0x58026300
90002d38:	58026000 	.word	0x58026000
90002d3c:	cb840000 	.word	0xcb840000
90002d40:	20000008 	.word	0x20000008
90002d44:	053e2d63 	.word	0x053e2d63
90002d48:	c7520000 	.word	0xc7520000
90002d4c:	cfb80000 	.word	0xcfb80000

90002d50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
90002d50:	b580      	push	{r7, lr}
90002d52:	b084      	sub	sp, #16
90002d54:	af00      	add	r7, sp, #0
90002d56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
90002d58:	687b      	ldr	r3, [r7, #4]
90002d5a:	681b      	ldr	r3, [r3, #0]
90002d5c:	4a79      	ldr	r2, [pc, #484]	; (90002f44 <ADC_ConfigureBoostMode+0x1f4>)
90002d5e:	4293      	cmp	r3, r2
90002d60:	d004      	beq.n	90002d6c <ADC_ConfigureBoostMode+0x1c>
90002d62:	687b      	ldr	r3, [r7, #4]
90002d64:	681b      	ldr	r3, [r3, #0]
90002d66:	4a78      	ldr	r2, [pc, #480]	; (90002f48 <ADC_ConfigureBoostMode+0x1f8>)
90002d68:	4293      	cmp	r3, r2
90002d6a:	d109      	bne.n	90002d80 <ADC_ConfigureBoostMode+0x30>
90002d6c:	4b77      	ldr	r3, [pc, #476]	; (90002f4c <ADC_ConfigureBoostMode+0x1fc>)
90002d6e:	689b      	ldr	r3, [r3, #8]
90002d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002d74:	2b00      	cmp	r3, #0
90002d76:	bf14      	ite	ne
90002d78:	2301      	movne	r3, #1
90002d7a:	2300      	moveq	r3, #0
90002d7c:	b2db      	uxtb	r3, r3
90002d7e:	e008      	b.n	90002d92 <ADC_ConfigureBoostMode+0x42>
90002d80:	4b73      	ldr	r3, [pc, #460]	; (90002f50 <ADC_ConfigureBoostMode+0x200>)
90002d82:	689b      	ldr	r3, [r3, #8]
90002d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002d88:	2b00      	cmp	r3, #0
90002d8a:	bf14      	ite	ne
90002d8c:	2301      	movne	r3, #1
90002d8e:	2300      	moveq	r3, #0
90002d90:	b2db      	uxtb	r3, r3
90002d92:	2b00      	cmp	r3, #0
90002d94:	d01c      	beq.n	90002dd0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
90002d96:	f002 f945 	bl	90005024 <HAL_RCC_GetHCLKFreq>
90002d9a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
90002d9c:	687b      	ldr	r3, [r7, #4]
90002d9e:	685b      	ldr	r3, [r3, #4]
90002da0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90002da4:	d010      	beq.n	90002dc8 <ADC_ConfigureBoostMode+0x78>
90002da6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90002daa:	d871      	bhi.n	90002e90 <ADC_ConfigureBoostMode+0x140>
90002dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90002db0:	d002      	beq.n	90002db8 <ADC_ConfigureBoostMode+0x68>
90002db2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90002db6:	d16b      	bne.n	90002e90 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
90002db8:	687b      	ldr	r3, [r7, #4]
90002dba:	685b      	ldr	r3, [r3, #4]
90002dbc:	0c1b      	lsrs	r3, r3, #16
90002dbe:	68fa      	ldr	r2, [r7, #12]
90002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
90002dc4:	60fb      	str	r3, [r7, #12]
        break;
90002dc6:	e066      	b.n	90002e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
90002dc8:	68fb      	ldr	r3, [r7, #12]
90002dca:	089b      	lsrs	r3, r3, #2
90002dcc:	60fb      	str	r3, [r7, #12]
        break;
90002dce:	e062      	b.n	90002e96 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
90002dd0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
90002dd4:	f003 f8c8 	bl	90005f68 <HAL_RCCEx_GetPeriphCLKFreq>
90002dd8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
90002dda:	687b      	ldr	r3, [r7, #4]
90002ddc:	685b      	ldr	r3, [r3, #4]
90002dde:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
90002de2:	d051      	beq.n	90002e88 <ADC_ConfigureBoostMode+0x138>
90002de4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
90002de8:	d854      	bhi.n	90002e94 <ADC_ConfigureBoostMode+0x144>
90002dea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
90002dee:	d047      	beq.n	90002e80 <ADC_ConfigureBoostMode+0x130>
90002df0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
90002df4:	d84e      	bhi.n	90002e94 <ADC_ConfigureBoostMode+0x144>
90002df6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
90002dfa:	d03d      	beq.n	90002e78 <ADC_ConfigureBoostMode+0x128>
90002dfc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
90002e00:	d848      	bhi.n	90002e94 <ADC_ConfigureBoostMode+0x144>
90002e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90002e06:	d033      	beq.n	90002e70 <ADC_ConfigureBoostMode+0x120>
90002e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90002e0c:	d842      	bhi.n	90002e94 <ADC_ConfigureBoostMode+0x144>
90002e0e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
90002e12:	d029      	beq.n	90002e68 <ADC_ConfigureBoostMode+0x118>
90002e14:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
90002e18:	d83c      	bhi.n	90002e94 <ADC_ConfigureBoostMode+0x144>
90002e1a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
90002e1e:	d01a      	beq.n	90002e56 <ADC_ConfigureBoostMode+0x106>
90002e20:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
90002e24:	d836      	bhi.n	90002e94 <ADC_ConfigureBoostMode+0x144>
90002e26:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
90002e2a:	d014      	beq.n	90002e56 <ADC_ConfigureBoostMode+0x106>
90002e2c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
90002e30:	d830      	bhi.n	90002e94 <ADC_ConfigureBoostMode+0x144>
90002e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90002e36:	d00e      	beq.n	90002e56 <ADC_ConfigureBoostMode+0x106>
90002e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90002e3c:	d82a      	bhi.n	90002e94 <ADC_ConfigureBoostMode+0x144>
90002e3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
90002e42:	d008      	beq.n	90002e56 <ADC_ConfigureBoostMode+0x106>
90002e44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
90002e48:	d824      	bhi.n	90002e94 <ADC_ConfigureBoostMode+0x144>
90002e4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90002e4e:	d002      	beq.n	90002e56 <ADC_ConfigureBoostMode+0x106>
90002e50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
90002e54:	d11e      	bne.n	90002e94 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
90002e56:	687b      	ldr	r3, [r7, #4]
90002e58:	685b      	ldr	r3, [r3, #4]
90002e5a:	0c9b      	lsrs	r3, r3, #18
90002e5c:	005b      	lsls	r3, r3, #1
90002e5e:	68fa      	ldr	r2, [r7, #12]
90002e60:	fbb2 f3f3 	udiv	r3, r2, r3
90002e64:	60fb      	str	r3, [r7, #12]
        break;
90002e66:	e016      	b.n	90002e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
90002e68:	68fb      	ldr	r3, [r7, #12]
90002e6a:	091b      	lsrs	r3, r3, #4
90002e6c:	60fb      	str	r3, [r7, #12]
        break;
90002e6e:	e012      	b.n	90002e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
90002e70:	68fb      	ldr	r3, [r7, #12]
90002e72:	095b      	lsrs	r3, r3, #5
90002e74:	60fb      	str	r3, [r7, #12]
        break;
90002e76:	e00e      	b.n	90002e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
90002e78:	68fb      	ldr	r3, [r7, #12]
90002e7a:	099b      	lsrs	r3, r3, #6
90002e7c:	60fb      	str	r3, [r7, #12]
        break;
90002e7e:	e00a      	b.n	90002e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
90002e80:	68fb      	ldr	r3, [r7, #12]
90002e82:	09db      	lsrs	r3, r3, #7
90002e84:	60fb      	str	r3, [r7, #12]
        break;
90002e86:	e006      	b.n	90002e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
90002e88:	68fb      	ldr	r3, [r7, #12]
90002e8a:	0a1b      	lsrs	r3, r3, #8
90002e8c:	60fb      	str	r3, [r7, #12]
        break;
90002e8e:	e002      	b.n	90002e96 <ADC_ConfigureBoostMode+0x146>
        break;
90002e90:	bf00      	nop
90002e92:	e000      	b.n	90002e96 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
90002e94:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
90002e96:	f7ff f8bb 	bl	90002010 <HAL_GetREVID>
90002e9a:	4603      	mov	r3, r0
90002e9c:	f241 0203 	movw	r2, #4099	; 0x1003
90002ea0:	4293      	cmp	r3, r2
90002ea2:	d815      	bhi.n	90002ed0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
90002ea4:	68fb      	ldr	r3, [r7, #12]
90002ea6:	4a2b      	ldr	r2, [pc, #172]	; (90002f54 <ADC_ConfigureBoostMode+0x204>)
90002ea8:	4293      	cmp	r3, r2
90002eaa:	d908      	bls.n	90002ebe <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
90002eac:	687b      	ldr	r3, [r7, #4]
90002eae:	681b      	ldr	r3, [r3, #0]
90002eb0:	689a      	ldr	r2, [r3, #8]
90002eb2:	687b      	ldr	r3, [r7, #4]
90002eb4:	681b      	ldr	r3, [r3, #0]
90002eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90002eba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
90002ebc:	e03e      	b.n	90002f3c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
90002ebe:	687b      	ldr	r3, [r7, #4]
90002ec0:	681b      	ldr	r3, [r3, #0]
90002ec2:	689a      	ldr	r2, [r3, #8]
90002ec4:	687b      	ldr	r3, [r7, #4]
90002ec6:	681b      	ldr	r3, [r3, #0]
90002ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90002ecc:	609a      	str	r2, [r3, #8]
}
90002ece:	e035      	b.n	90002f3c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
90002ed0:	68fb      	ldr	r3, [r7, #12]
90002ed2:	085b      	lsrs	r3, r3, #1
90002ed4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
90002ed6:	68fb      	ldr	r3, [r7, #12]
90002ed8:	4a1f      	ldr	r2, [pc, #124]	; (90002f58 <ADC_ConfigureBoostMode+0x208>)
90002eda:	4293      	cmp	r3, r2
90002edc:	d808      	bhi.n	90002ef0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
90002ede:	687b      	ldr	r3, [r7, #4]
90002ee0:	681b      	ldr	r3, [r3, #0]
90002ee2:	689a      	ldr	r2, [r3, #8]
90002ee4:	687b      	ldr	r3, [r7, #4]
90002ee6:	681b      	ldr	r3, [r3, #0]
90002ee8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
90002eec:	609a      	str	r2, [r3, #8]
}
90002eee:	e025      	b.n	90002f3c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
90002ef0:	68fb      	ldr	r3, [r7, #12]
90002ef2:	4a1a      	ldr	r2, [pc, #104]	; (90002f5c <ADC_ConfigureBoostMode+0x20c>)
90002ef4:	4293      	cmp	r3, r2
90002ef6:	d80a      	bhi.n	90002f0e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
90002ef8:	687b      	ldr	r3, [r7, #4]
90002efa:	681b      	ldr	r3, [r3, #0]
90002efc:	689b      	ldr	r3, [r3, #8]
90002efe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90002f02:	687b      	ldr	r3, [r7, #4]
90002f04:	681b      	ldr	r3, [r3, #0]
90002f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90002f0a:	609a      	str	r2, [r3, #8]
}
90002f0c:	e016      	b.n	90002f3c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
90002f0e:	68fb      	ldr	r3, [r7, #12]
90002f10:	4a13      	ldr	r2, [pc, #76]	; (90002f60 <ADC_ConfigureBoostMode+0x210>)
90002f12:	4293      	cmp	r3, r2
90002f14:	d80a      	bhi.n	90002f2c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
90002f16:	687b      	ldr	r3, [r7, #4]
90002f18:	681b      	ldr	r3, [r3, #0]
90002f1a:	689b      	ldr	r3, [r3, #8]
90002f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90002f20:	687b      	ldr	r3, [r7, #4]
90002f22:	681b      	ldr	r3, [r3, #0]
90002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90002f28:	609a      	str	r2, [r3, #8]
}
90002f2a:	e007      	b.n	90002f3c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
90002f2c:	687b      	ldr	r3, [r7, #4]
90002f2e:	681b      	ldr	r3, [r3, #0]
90002f30:	689a      	ldr	r2, [r3, #8]
90002f32:	687b      	ldr	r3, [r7, #4]
90002f34:	681b      	ldr	r3, [r3, #0]
90002f36:	f442 7240 	orr.w	r2, r2, #768	; 0x300
90002f3a:	609a      	str	r2, [r3, #8]
}
90002f3c:	bf00      	nop
90002f3e:	3710      	adds	r7, #16
90002f40:	46bd      	mov	sp, r7
90002f42:	bd80      	pop	{r7, pc}
90002f44:	40022000 	.word	0x40022000
90002f48:	40022100 	.word	0x40022100
90002f4c:	40022300 	.word	0x40022300
90002f50:	58026300 	.word	0x58026300
90002f54:	01312d00 	.word	0x01312d00
90002f58:	005f5e10 	.word	0x005f5e10
90002f5c:	00bebc20 	.word	0x00bebc20
90002f60:	017d7840 	.word	0x017d7840

90002f64 <LL_ADC_IsEnabled>:
{
90002f64:	b480      	push	{r7}
90002f66:	b083      	sub	sp, #12
90002f68:	af00      	add	r7, sp, #0
90002f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90002f6c:	687b      	ldr	r3, [r7, #4]
90002f6e:	689b      	ldr	r3, [r3, #8]
90002f70:	f003 0301 	and.w	r3, r3, #1
90002f74:	2b01      	cmp	r3, #1
90002f76:	d101      	bne.n	90002f7c <LL_ADC_IsEnabled+0x18>
90002f78:	2301      	movs	r3, #1
90002f7a:	e000      	b.n	90002f7e <LL_ADC_IsEnabled+0x1a>
90002f7c:	2300      	movs	r3, #0
}
90002f7e:	4618      	mov	r0, r3
90002f80:	370c      	adds	r7, #12
90002f82:	46bd      	mov	sp, r7
90002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f88:	4770      	bx	lr

90002f8a <LL_ADC_REG_IsConversionOngoing>:
{
90002f8a:	b480      	push	{r7}
90002f8c:	b083      	sub	sp, #12
90002f8e:	af00      	add	r7, sp, #0
90002f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90002f92:	687b      	ldr	r3, [r7, #4]
90002f94:	689b      	ldr	r3, [r3, #8]
90002f96:	f003 0304 	and.w	r3, r3, #4
90002f9a:	2b04      	cmp	r3, #4
90002f9c:	d101      	bne.n	90002fa2 <LL_ADC_REG_IsConversionOngoing+0x18>
90002f9e:	2301      	movs	r3, #1
90002fa0:	e000      	b.n	90002fa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
90002fa2:	2300      	movs	r3, #0
}
90002fa4:	4618      	mov	r0, r3
90002fa6:	370c      	adds	r7, #12
90002fa8:	46bd      	mov	sp, r7
90002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
90002fae:	4770      	bx	lr

90002fb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
90002fb0:	b590      	push	{r4, r7, lr}
90002fb2:	b09f      	sub	sp, #124	; 0x7c
90002fb4:	af00      	add	r7, sp, #0
90002fb6:	6078      	str	r0, [r7, #4]
90002fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90002fba:	2300      	movs	r3, #0
90002fbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
90002fc0:	687b      	ldr	r3, [r7, #4]
90002fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
90002fc6:	2b01      	cmp	r3, #1
90002fc8:	d101      	bne.n	90002fce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
90002fca:	2302      	movs	r3, #2
90002fcc:	e0be      	b.n	9000314c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
90002fce:	687b      	ldr	r3, [r7, #4]
90002fd0:	2201      	movs	r2, #1
90002fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
90002fd6:	2300      	movs	r3, #0
90002fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
90002fda:	2300      	movs	r3, #0
90002fdc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
90002fde:	687b      	ldr	r3, [r7, #4]
90002fe0:	681b      	ldr	r3, [r3, #0]
90002fe2:	4a5c      	ldr	r2, [pc, #368]	; (90003154 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
90002fe4:	4293      	cmp	r3, r2
90002fe6:	d102      	bne.n	90002fee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
90002fe8:	4b5b      	ldr	r3, [pc, #364]	; (90003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
90002fea:	60bb      	str	r3, [r7, #8]
90002fec:	e001      	b.n	90002ff2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
90002fee:	2300      	movs	r3, #0
90002ff0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
90002ff2:	68bb      	ldr	r3, [r7, #8]
90002ff4:	2b00      	cmp	r3, #0
90002ff6:	d10b      	bne.n	90003010 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90002ff8:	687b      	ldr	r3, [r7, #4]
90002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002ffc:	f043 0220 	orr.w	r2, r3, #32
90003000:	687b      	ldr	r3, [r7, #4]
90003002:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
90003004:	687b      	ldr	r3, [r7, #4]
90003006:	2200      	movs	r2, #0
90003008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
9000300c:	2301      	movs	r3, #1
9000300e:	e09d      	b.n	9000314c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
90003010:	68bb      	ldr	r3, [r7, #8]
90003012:	4618      	mov	r0, r3
90003014:	f7ff ffb9 	bl	90002f8a <LL_ADC_REG_IsConversionOngoing>
90003018:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
9000301a:	687b      	ldr	r3, [r7, #4]
9000301c:	681b      	ldr	r3, [r3, #0]
9000301e:	4618      	mov	r0, r3
90003020:	f7ff ffb3 	bl	90002f8a <LL_ADC_REG_IsConversionOngoing>
90003024:	4603      	mov	r3, r0
90003026:	2b00      	cmp	r3, #0
90003028:	d17f      	bne.n	9000312a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
9000302a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
9000302c:	2b00      	cmp	r3, #0
9000302e:	d17c      	bne.n	9000312a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
90003030:	687b      	ldr	r3, [r7, #4]
90003032:	681b      	ldr	r3, [r3, #0]
90003034:	4a47      	ldr	r2, [pc, #284]	; (90003154 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
90003036:	4293      	cmp	r3, r2
90003038:	d004      	beq.n	90003044 <HAL_ADCEx_MultiModeConfigChannel+0x94>
9000303a:	687b      	ldr	r3, [r7, #4]
9000303c:	681b      	ldr	r3, [r3, #0]
9000303e:	4a46      	ldr	r2, [pc, #280]	; (90003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
90003040:	4293      	cmp	r3, r2
90003042:	d101      	bne.n	90003048 <HAL_ADCEx_MultiModeConfigChannel+0x98>
90003044:	4b45      	ldr	r3, [pc, #276]	; (9000315c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
90003046:	e000      	b.n	9000304a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
90003048:	4b45      	ldr	r3, [pc, #276]	; (90003160 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
9000304a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
9000304c:	683b      	ldr	r3, [r7, #0]
9000304e:	681b      	ldr	r3, [r3, #0]
90003050:	2b00      	cmp	r3, #0
90003052:	d039      	beq.n	900030c8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
90003054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90003056:	689b      	ldr	r3, [r3, #8]
90003058:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
9000305c:	683b      	ldr	r3, [r7, #0]
9000305e:	685b      	ldr	r3, [r3, #4]
90003060:	431a      	orrs	r2, r3
90003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90003064:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90003066:	687b      	ldr	r3, [r7, #4]
90003068:	681b      	ldr	r3, [r3, #0]
9000306a:	4a3a      	ldr	r2, [pc, #232]	; (90003154 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
9000306c:	4293      	cmp	r3, r2
9000306e:	d004      	beq.n	9000307a <HAL_ADCEx_MultiModeConfigChannel+0xca>
90003070:	687b      	ldr	r3, [r7, #4]
90003072:	681b      	ldr	r3, [r3, #0]
90003074:	4a38      	ldr	r2, [pc, #224]	; (90003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
90003076:	4293      	cmp	r3, r2
90003078:	d10e      	bne.n	90003098 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
9000307a:	4836      	ldr	r0, [pc, #216]	; (90003154 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
9000307c:	f7ff ff72 	bl	90002f64 <LL_ADC_IsEnabled>
90003080:	4604      	mov	r4, r0
90003082:	4835      	ldr	r0, [pc, #212]	; (90003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
90003084:	f7ff ff6e 	bl	90002f64 <LL_ADC_IsEnabled>
90003088:	4603      	mov	r3, r0
9000308a:	4323      	orrs	r3, r4
9000308c:	2b00      	cmp	r3, #0
9000308e:	bf0c      	ite	eq
90003090:	2301      	moveq	r3, #1
90003092:	2300      	movne	r3, #0
90003094:	b2db      	uxtb	r3, r3
90003096:	e008      	b.n	900030aa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
90003098:	4832      	ldr	r0, [pc, #200]	; (90003164 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
9000309a:	f7ff ff63 	bl	90002f64 <LL_ADC_IsEnabled>
9000309e:	4603      	mov	r3, r0
900030a0:	2b00      	cmp	r3, #0
900030a2:	bf0c      	ite	eq
900030a4:	2301      	moveq	r3, #1
900030a6:	2300      	movne	r3, #0
900030a8:	b2db      	uxtb	r3, r3
900030aa:	2b00      	cmp	r3, #0
900030ac:	d047      	beq.n	9000313e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
900030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
900030b0:	689a      	ldr	r2, [r3, #8]
900030b2:	4b2d      	ldr	r3, [pc, #180]	; (90003168 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
900030b4:	4013      	ands	r3, r2
900030b6:	683a      	ldr	r2, [r7, #0]
900030b8:	6811      	ldr	r1, [r2, #0]
900030ba:	683a      	ldr	r2, [r7, #0]
900030bc:	6892      	ldr	r2, [r2, #8]
900030be:	430a      	orrs	r2, r1
900030c0:	431a      	orrs	r2, r3
900030c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
900030c4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
900030c6:	e03a      	b.n	9000313e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
900030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
900030ca:	689b      	ldr	r3, [r3, #8]
900030cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
900030d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
900030d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
900030d4:	687b      	ldr	r3, [r7, #4]
900030d6:	681b      	ldr	r3, [r3, #0]
900030d8:	4a1e      	ldr	r2, [pc, #120]	; (90003154 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
900030da:	4293      	cmp	r3, r2
900030dc:	d004      	beq.n	900030e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
900030de:	687b      	ldr	r3, [r7, #4]
900030e0:	681b      	ldr	r3, [r3, #0]
900030e2:	4a1d      	ldr	r2, [pc, #116]	; (90003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
900030e4:	4293      	cmp	r3, r2
900030e6:	d10e      	bne.n	90003106 <HAL_ADCEx_MultiModeConfigChannel+0x156>
900030e8:	481a      	ldr	r0, [pc, #104]	; (90003154 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
900030ea:	f7ff ff3b 	bl	90002f64 <LL_ADC_IsEnabled>
900030ee:	4604      	mov	r4, r0
900030f0:	4819      	ldr	r0, [pc, #100]	; (90003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
900030f2:	f7ff ff37 	bl	90002f64 <LL_ADC_IsEnabled>
900030f6:	4603      	mov	r3, r0
900030f8:	4323      	orrs	r3, r4
900030fa:	2b00      	cmp	r3, #0
900030fc:	bf0c      	ite	eq
900030fe:	2301      	moveq	r3, #1
90003100:	2300      	movne	r3, #0
90003102:	b2db      	uxtb	r3, r3
90003104:	e008      	b.n	90003118 <HAL_ADCEx_MultiModeConfigChannel+0x168>
90003106:	4817      	ldr	r0, [pc, #92]	; (90003164 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
90003108:	f7ff ff2c 	bl	90002f64 <LL_ADC_IsEnabled>
9000310c:	4603      	mov	r3, r0
9000310e:	2b00      	cmp	r3, #0
90003110:	bf0c      	ite	eq
90003112:	2301      	moveq	r3, #1
90003114:	2300      	movne	r3, #0
90003116:	b2db      	uxtb	r3, r3
90003118:	2b00      	cmp	r3, #0
9000311a:	d010      	beq.n	9000313e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
9000311c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000311e:	689a      	ldr	r2, [r3, #8]
90003120:	4b11      	ldr	r3, [pc, #68]	; (90003168 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
90003122:	4013      	ands	r3, r2
90003124:	6efa      	ldr	r2, [r7, #108]	; 0x6c
90003126:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
90003128:	e009      	b.n	9000313e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
9000312a:	687b      	ldr	r3, [r7, #4]
9000312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000312e:	f043 0220 	orr.w	r2, r3, #32
90003132:	687b      	ldr	r3, [r7, #4]
90003134:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
90003136:	2301      	movs	r3, #1
90003138:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
9000313c:	e000      	b.n	90003140 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
9000313e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
90003140:	687b      	ldr	r3, [r7, #4]
90003142:	2200      	movs	r2, #0
90003144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
90003148:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
9000314c:	4618      	mov	r0, r3
9000314e:	377c      	adds	r7, #124	; 0x7c
90003150:	46bd      	mov	sp, r7
90003152:	bd90      	pop	{r4, r7, pc}
90003154:	40022000 	.word	0x40022000
90003158:	40022100 	.word	0x40022100
9000315c:	40022300 	.word	0x40022300
90003160:	58026300 	.word	0x58026300
90003164:	58026000 	.word	0x58026000
90003168:	fffff0e0 	.word	0xfffff0e0

9000316c <__NVIC_SetPriorityGrouping>:
{
9000316c:	b480      	push	{r7}
9000316e:	b085      	sub	sp, #20
90003170:	af00      	add	r7, sp, #0
90003172:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90003174:	687b      	ldr	r3, [r7, #4]
90003176:	f003 0307 	and.w	r3, r3, #7
9000317a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
9000317c:	4b0b      	ldr	r3, [pc, #44]	; (900031ac <__NVIC_SetPriorityGrouping+0x40>)
9000317e:	68db      	ldr	r3, [r3, #12]
90003180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90003182:	68ba      	ldr	r2, [r7, #8]
90003184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90003188:	4013      	ands	r3, r2
9000318a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000318c:	68fb      	ldr	r3, [r7, #12]
9000318e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90003190:	68bb      	ldr	r3, [r7, #8]
90003192:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90003194:	4b06      	ldr	r3, [pc, #24]	; (900031b0 <__NVIC_SetPriorityGrouping+0x44>)
90003196:	4313      	orrs	r3, r2
90003198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
9000319a:	4a04      	ldr	r2, [pc, #16]	; (900031ac <__NVIC_SetPriorityGrouping+0x40>)
9000319c:	68bb      	ldr	r3, [r7, #8]
9000319e:	60d3      	str	r3, [r2, #12]
}
900031a0:	bf00      	nop
900031a2:	3714      	adds	r7, #20
900031a4:	46bd      	mov	sp, r7
900031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900031aa:	4770      	bx	lr
900031ac:	e000ed00 	.word	0xe000ed00
900031b0:	05fa0000 	.word	0x05fa0000

900031b4 <__NVIC_GetPriorityGrouping>:
{
900031b4:	b480      	push	{r7}
900031b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900031b8:	4b04      	ldr	r3, [pc, #16]	; (900031cc <__NVIC_GetPriorityGrouping+0x18>)
900031ba:	68db      	ldr	r3, [r3, #12]
900031bc:	0a1b      	lsrs	r3, r3, #8
900031be:	f003 0307 	and.w	r3, r3, #7
}
900031c2:	4618      	mov	r0, r3
900031c4:	46bd      	mov	sp, r7
900031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900031ca:	4770      	bx	lr
900031cc:	e000ed00 	.word	0xe000ed00

900031d0 <__NVIC_EnableIRQ>:
{
900031d0:	b480      	push	{r7}
900031d2:	b083      	sub	sp, #12
900031d4:	af00      	add	r7, sp, #0
900031d6:	4603      	mov	r3, r0
900031d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900031da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900031de:	2b00      	cmp	r3, #0
900031e0:	db0b      	blt.n	900031fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900031e2:	88fb      	ldrh	r3, [r7, #6]
900031e4:	f003 021f 	and.w	r2, r3, #31
900031e8:	4907      	ldr	r1, [pc, #28]	; (90003208 <__NVIC_EnableIRQ+0x38>)
900031ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900031ee:	095b      	lsrs	r3, r3, #5
900031f0:	2001      	movs	r0, #1
900031f2:	fa00 f202 	lsl.w	r2, r0, r2
900031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
900031fa:	bf00      	nop
900031fc:	370c      	adds	r7, #12
900031fe:	46bd      	mov	sp, r7
90003200:	f85d 7b04 	ldr.w	r7, [sp], #4
90003204:	4770      	bx	lr
90003206:	bf00      	nop
90003208:	e000e100 	.word	0xe000e100

9000320c <__NVIC_SetPriority>:
{
9000320c:	b480      	push	{r7}
9000320e:	b083      	sub	sp, #12
90003210:	af00      	add	r7, sp, #0
90003212:	4603      	mov	r3, r0
90003214:	6039      	str	r1, [r7, #0]
90003216:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000321c:	2b00      	cmp	r3, #0
9000321e:	db0a      	blt.n	90003236 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003220:	683b      	ldr	r3, [r7, #0]
90003222:	b2da      	uxtb	r2, r3
90003224:	490c      	ldr	r1, [pc, #48]	; (90003258 <__NVIC_SetPriority+0x4c>)
90003226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000322a:	0112      	lsls	r2, r2, #4
9000322c:	b2d2      	uxtb	r2, r2
9000322e:	440b      	add	r3, r1
90003230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
90003234:	e00a      	b.n	9000324c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003236:	683b      	ldr	r3, [r7, #0]
90003238:	b2da      	uxtb	r2, r3
9000323a:	4908      	ldr	r1, [pc, #32]	; (9000325c <__NVIC_SetPriority+0x50>)
9000323c:	88fb      	ldrh	r3, [r7, #6]
9000323e:	f003 030f 	and.w	r3, r3, #15
90003242:	3b04      	subs	r3, #4
90003244:	0112      	lsls	r2, r2, #4
90003246:	b2d2      	uxtb	r2, r2
90003248:	440b      	add	r3, r1
9000324a:	761a      	strb	r2, [r3, #24]
}
9000324c:	bf00      	nop
9000324e:	370c      	adds	r7, #12
90003250:	46bd      	mov	sp, r7
90003252:	f85d 7b04 	ldr.w	r7, [sp], #4
90003256:	4770      	bx	lr
90003258:	e000e100 	.word	0xe000e100
9000325c:	e000ed00 	.word	0xe000ed00

90003260 <NVIC_EncodePriority>:
{
90003260:	b480      	push	{r7}
90003262:	b089      	sub	sp, #36	; 0x24
90003264:	af00      	add	r7, sp, #0
90003266:	60f8      	str	r0, [r7, #12]
90003268:	60b9      	str	r1, [r7, #8]
9000326a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
9000326c:	68fb      	ldr	r3, [r7, #12]
9000326e:	f003 0307 	and.w	r3, r3, #7
90003272:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90003274:	69fb      	ldr	r3, [r7, #28]
90003276:	f1c3 0307 	rsb	r3, r3, #7
9000327a:	2b04      	cmp	r3, #4
9000327c:	bf28      	it	cs
9000327e:	2304      	movcs	r3, #4
90003280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90003282:	69fb      	ldr	r3, [r7, #28]
90003284:	3304      	adds	r3, #4
90003286:	2b06      	cmp	r3, #6
90003288:	d902      	bls.n	90003290 <NVIC_EncodePriority+0x30>
9000328a:	69fb      	ldr	r3, [r7, #28]
9000328c:	3b03      	subs	r3, #3
9000328e:	e000      	b.n	90003292 <NVIC_EncodePriority+0x32>
90003290:	2300      	movs	r3, #0
90003292:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003294:	f04f 32ff 	mov.w	r2, #4294967295
90003298:	69bb      	ldr	r3, [r7, #24]
9000329a:	fa02 f303 	lsl.w	r3, r2, r3
9000329e:	43da      	mvns	r2, r3
900032a0:	68bb      	ldr	r3, [r7, #8]
900032a2:	401a      	ands	r2, r3
900032a4:	697b      	ldr	r3, [r7, #20]
900032a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900032a8:	f04f 31ff 	mov.w	r1, #4294967295
900032ac:	697b      	ldr	r3, [r7, #20]
900032ae:	fa01 f303 	lsl.w	r3, r1, r3
900032b2:	43d9      	mvns	r1, r3
900032b4:	687b      	ldr	r3, [r7, #4]
900032b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900032b8:	4313      	orrs	r3, r2
}
900032ba:	4618      	mov	r0, r3
900032bc:	3724      	adds	r7, #36	; 0x24
900032be:	46bd      	mov	sp, r7
900032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900032c4:	4770      	bx	lr
	...

900032c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
900032c8:	b580      	push	{r7, lr}
900032ca:	b082      	sub	sp, #8
900032cc:	af00      	add	r7, sp, #0
900032ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900032d0:	687b      	ldr	r3, [r7, #4]
900032d2:	3b01      	subs	r3, #1
900032d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
900032d8:	d301      	bcc.n	900032de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
900032da:	2301      	movs	r3, #1
900032dc:	e00f      	b.n	900032fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900032de:	4a0a      	ldr	r2, [pc, #40]	; (90003308 <SysTick_Config+0x40>)
900032e0:	687b      	ldr	r3, [r7, #4]
900032e2:	3b01      	subs	r3, #1
900032e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900032e6:	210f      	movs	r1, #15
900032e8:	f04f 30ff 	mov.w	r0, #4294967295
900032ec:	f7ff ff8e 	bl	9000320c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900032f0:	4b05      	ldr	r3, [pc, #20]	; (90003308 <SysTick_Config+0x40>)
900032f2:	2200      	movs	r2, #0
900032f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900032f6:	4b04      	ldr	r3, [pc, #16]	; (90003308 <SysTick_Config+0x40>)
900032f8:	2207      	movs	r2, #7
900032fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
900032fc:	2300      	movs	r3, #0
}
900032fe:	4618      	mov	r0, r3
90003300:	3708      	adds	r7, #8
90003302:	46bd      	mov	sp, r7
90003304:	bd80      	pop	{r7, pc}
90003306:	bf00      	nop
90003308:	e000e010 	.word	0xe000e010

9000330c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
9000330c:	b580      	push	{r7, lr}
9000330e:	b082      	sub	sp, #8
90003310:	af00      	add	r7, sp, #0
90003312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003314:	6878      	ldr	r0, [r7, #4]
90003316:	f7ff ff29 	bl	9000316c <__NVIC_SetPriorityGrouping>
}
9000331a:	bf00      	nop
9000331c:	3708      	adds	r7, #8
9000331e:	46bd      	mov	sp, r7
90003320:	bd80      	pop	{r7, pc}

90003322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90003322:	b580      	push	{r7, lr}
90003324:	b086      	sub	sp, #24
90003326:	af00      	add	r7, sp, #0
90003328:	4603      	mov	r3, r0
9000332a:	60b9      	str	r1, [r7, #8]
9000332c:	607a      	str	r2, [r7, #4]
9000332e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90003330:	f7ff ff40 	bl	900031b4 <__NVIC_GetPriorityGrouping>
90003334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90003336:	687a      	ldr	r2, [r7, #4]
90003338:	68b9      	ldr	r1, [r7, #8]
9000333a:	6978      	ldr	r0, [r7, #20]
9000333c:	f7ff ff90 	bl	90003260 <NVIC_EncodePriority>
90003340:	4602      	mov	r2, r0
90003342:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90003346:	4611      	mov	r1, r2
90003348:	4618      	mov	r0, r3
9000334a:	f7ff ff5f 	bl	9000320c <__NVIC_SetPriority>
}
9000334e:	bf00      	nop
90003350:	3718      	adds	r7, #24
90003352:	46bd      	mov	sp, r7
90003354:	bd80      	pop	{r7, pc}

90003356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90003356:	b580      	push	{r7, lr}
90003358:	b082      	sub	sp, #8
9000335a:	af00      	add	r7, sp, #0
9000335c:	4603      	mov	r3, r0
9000335e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90003360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003364:	4618      	mov	r0, r3
90003366:	f7ff ff33 	bl	900031d0 <__NVIC_EnableIRQ>
}
9000336a:	bf00      	nop
9000336c:	3708      	adds	r7, #8
9000336e:	46bd      	mov	sp, r7
90003370:	bd80      	pop	{r7, pc}

90003372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
90003372:	b580      	push	{r7, lr}
90003374:	b082      	sub	sp, #8
90003376:	af00      	add	r7, sp, #0
90003378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
9000337a:	6878      	ldr	r0, [r7, #4]
9000337c:	f7ff ffa4 	bl	900032c8 <SysTick_Config>
90003380:	4603      	mov	r3, r0
}
90003382:	4618      	mov	r0, r3
90003384:	3708      	adds	r7, #8
90003386:	46bd      	mov	sp, r7
90003388:	bd80      	pop	{r7, pc}
	...

9000338c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
9000338c:	b480      	push	{r7}
9000338e:	b089      	sub	sp, #36	; 0x24
90003390:	af00      	add	r7, sp, #0
90003392:	6078      	str	r0, [r7, #4]
90003394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003396:	2300      	movs	r3, #0
90003398:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
9000339a:	4b89      	ldr	r3, [pc, #548]	; (900035c0 <HAL_GPIO_Init+0x234>)
9000339c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000339e:	e194      	b.n	900036ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
900033a0:	683b      	ldr	r3, [r7, #0]
900033a2:	681a      	ldr	r2, [r3, #0]
900033a4:	2101      	movs	r1, #1
900033a6:	69fb      	ldr	r3, [r7, #28]
900033a8:	fa01 f303 	lsl.w	r3, r1, r3
900033ac:	4013      	ands	r3, r2
900033ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
900033b0:	693b      	ldr	r3, [r7, #16]
900033b2:	2b00      	cmp	r3, #0
900033b4:	f000 8186 	beq.w	900036c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
900033b8:	683b      	ldr	r3, [r7, #0]
900033ba:	685b      	ldr	r3, [r3, #4]
900033bc:	f003 0303 	and.w	r3, r3, #3
900033c0:	2b01      	cmp	r3, #1
900033c2:	d005      	beq.n	900033d0 <HAL_GPIO_Init+0x44>
900033c4:	683b      	ldr	r3, [r7, #0]
900033c6:	685b      	ldr	r3, [r3, #4]
900033c8:	f003 0303 	and.w	r3, r3, #3
900033cc:	2b02      	cmp	r3, #2
900033ce:	d130      	bne.n	90003432 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
900033d0:	687b      	ldr	r3, [r7, #4]
900033d2:	689b      	ldr	r3, [r3, #8]
900033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900033d6:	69fb      	ldr	r3, [r7, #28]
900033d8:	005b      	lsls	r3, r3, #1
900033da:	2203      	movs	r2, #3
900033dc:	fa02 f303 	lsl.w	r3, r2, r3
900033e0:	43db      	mvns	r3, r3
900033e2:	69ba      	ldr	r2, [r7, #24]
900033e4:	4013      	ands	r3, r2
900033e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
900033e8:	683b      	ldr	r3, [r7, #0]
900033ea:	68da      	ldr	r2, [r3, #12]
900033ec:	69fb      	ldr	r3, [r7, #28]
900033ee:	005b      	lsls	r3, r3, #1
900033f0:	fa02 f303 	lsl.w	r3, r2, r3
900033f4:	69ba      	ldr	r2, [r7, #24]
900033f6:	4313      	orrs	r3, r2
900033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
900033fa:	687b      	ldr	r3, [r7, #4]
900033fc:	69ba      	ldr	r2, [r7, #24]
900033fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003400:	687b      	ldr	r3, [r7, #4]
90003402:	685b      	ldr	r3, [r3, #4]
90003404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003406:	2201      	movs	r2, #1
90003408:	69fb      	ldr	r3, [r7, #28]
9000340a:	fa02 f303 	lsl.w	r3, r2, r3
9000340e:	43db      	mvns	r3, r3
90003410:	69ba      	ldr	r2, [r7, #24]
90003412:	4013      	ands	r3, r2
90003414:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003416:	683b      	ldr	r3, [r7, #0]
90003418:	685b      	ldr	r3, [r3, #4]
9000341a:	091b      	lsrs	r3, r3, #4
9000341c:	f003 0201 	and.w	r2, r3, #1
90003420:	69fb      	ldr	r3, [r7, #28]
90003422:	fa02 f303 	lsl.w	r3, r2, r3
90003426:	69ba      	ldr	r2, [r7, #24]
90003428:	4313      	orrs	r3, r2
9000342a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
9000342c:	687b      	ldr	r3, [r7, #4]
9000342e:	69ba      	ldr	r2, [r7, #24]
90003430:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003432:	683b      	ldr	r3, [r7, #0]
90003434:	685b      	ldr	r3, [r3, #4]
90003436:	f003 0303 	and.w	r3, r3, #3
9000343a:	2b03      	cmp	r3, #3
9000343c:	d017      	beq.n	9000346e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
9000343e:	687b      	ldr	r3, [r7, #4]
90003440:	68db      	ldr	r3, [r3, #12]
90003442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003444:	69fb      	ldr	r3, [r7, #28]
90003446:	005b      	lsls	r3, r3, #1
90003448:	2203      	movs	r2, #3
9000344a:	fa02 f303 	lsl.w	r3, r2, r3
9000344e:	43db      	mvns	r3, r3
90003450:	69ba      	ldr	r2, [r7, #24]
90003452:	4013      	ands	r3, r2
90003454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003456:	683b      	ldr	r3, [r7, #0]
90003458:	689a      	ldr	r2, [r3, #8]
9000345a:	69fb      	ldr	r3, [r7, #28]
9000345c:	005b      	lsls	r3, r3, #1
9000345e:	fa02 f303 	lsl.w	r3, r2, r3
90003462:	69ba      	ldr	r2, [r7, #24]
90003464:	4313      	orrs	r3, r2
90003466:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003468:	687b      	ldr	r3, [r7, #4]
9000346a:	69ba      	ldr	r2, [r7, #24]
9000346c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000346e:	683b      	ldr	r3, [r7, #0]
90003470:	685b      	ldr	r3, [r3, #4]
90003472:	f003 0303 	and.w	r3, r3, #3
90003476:	2b02      	cmp	r3, #2
90003478:	d123      	bne.n	900034c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
9000347a:	69fb      	ldr	r3, [r7, #28]
9000347c:	08da      	lsrs	r2, r3, #3
9000347e:	687b      	ldr	r3, [r7, #4]
90003480:	3208      	adds	r2, #8
90003482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003488:	69fb      	ldr	r3, [r7, #28]
9000348a:	f003 0307 	and.w	r3, r3, #7
9000348e:	009b      	lsls	r3, r3, #2
90003490:	220f      	movs	r2, #15
90003492:	fa02 f303 	lsl.w	r3, r2, r3
90003496:	43db      	mvns	r3, r3
90003498:	69ba      	ldr	r2, [r7, #24]
9000349a:	4013      	ands	r3, r2
9000349c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000349e:	683b      	ldr	r3, [r7, #0]
900034a0:	691a      	ldr	r2, [r3, #16]
900034a2:	69fb      	ldr	r3, [r7, #28]
900034a4:	f003 0307 	and.w	r3, r3, #7
900034a8:	009b      	lsls	r3, r3, #2
900034aa:	fa02 f303 	lsl.w	r3, r2, r3
900034ae:	69ba      	ldr	r2, [r7, #24]
900034b0:	4313      	orrs	r3, r2
900034b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
900034b4:	69fb      	ldr	r3, [r7, #28]
900034b6:	08da      	lsrs	r2, r3, #3
900034b8:	687b      	ldr	r3, [r7, #4]
900034ba:	3208      	adds	r2, #8
900034bc:	69b9      	ldr	r1, [r7, #24]
900034be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
900034c2:	687b      	ldr	r3, [r7, #4]
900034c4:	681b      	ldr	r3, [r3, #0]
900034c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
900034c8:	69fb      	ldr	r3, [r7, #28]
900034ca:	005b      	lsls	r3, r3, #1
900034cc:	2203      	movs	r2, #3
900034ce:	fa02 f303 	lsl.w	r3, r2, r3
900034d2:	43db      	mvns	r3, r3
900034d4:	69ba      	ldr	r2, [r7, #24]
900034d6:	4013      	ands	r3, r2
900034d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
900034da:	683b      	ldr	r3, [r7, #0]
900034dc:	685b      	ldr	r3, [r3, #4]
900034de:	f003 0203 	and.w	r2, r3, #3
900034e2:	69fb      	ldr	r3, [r7, #28]
900034e4:	005b      	lsls	r3, r3, #1
900034e6:	fa02 f303 	lsl.w	r3, r2, r3
900034ea:	69ba      	ldr	r2, [r7, #24]
900034ec:	4313      	orrs	r3, r2
900034ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
900034f0:	687b      	ldr	r3, [r7, #4]
900034f2:	69ba      	ldr	r2, [r7, #24]
900034f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900034f6:	683b      	ldr	r3, [r7, #0]
900034f8:	685b      	ldr	r3, [r3, #4]
900034fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
900034fe:	2b00      	cmp	r3, #0
90003500:	f000 80e0 	beq.w	900036c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003504:	4b2f      	ldr	r3, [pc, #188]	; (900035c4 <HAL_GPIO_Init+0x238>)
90003506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
9000350a:	4a2e      	ldr	r2, [pc, #184]	; (900035c4 <HAL_GPIO_Init+0x238>)
9000350c:	f043 0302 	orr.w	r3, r3, #2
90003510:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90003514:	4b2b      	ldr	r3, [pc, #172]	; (900035c4 <HAL_GPIO_Init+0x238>)
90003516:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
9000351a:	f003 0302 	and.w	r3, r3, #2
9000351e:	60fb      	str	r3, [r7, #12]
90003520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003522:	4a29      	ldr	r2, [pc, #164]	; (900035c8 <HAL_GPIO_Init+0x23c>)
90003524:	69fb      	ldr	r3, [r7, #28]
90003526:	089b      	lsrs	r3, r3, #2
90003528:	3302      	adds	r3, #2
9000352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000352e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003530:	69fb      	ldr	r3, [r7, #28]
90003532:	f003 0303 	and.w	r3, r3, #3
90003536:	009b      	lsls	r3, r3, #2
90003538:	220f      	movs	r2, #15
9000353a:	fa02 f303 	lsl.w	r3, r2, r3
9000353e:	43db      	mvns	r3, r3
90003540:	69ba      	ldr	r2, [r7, #24]
90003542:	4013      	ands	r3, r2
90003544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003546:	687b      	ldr	r3, [r7, #4]
90003548:	4a20      	ldr	r2, [pc, #128]	; (900035cc <HAL_GPIO_Init+0x240>)
9000354a:	4293      	cmp	r3, r2
9000354c:	d052      	beq.n	900035f4 <HAL_GPIO_Init+0x268>
9000354e:	687b      	ldr	r3, [r7, #4]
90003550:	4a1f      	ldr	r2, [pc, #124]	; (900035d0 <HAL_GPIO_Init+0x244>)
90003552:	4293      	cmp	r3, r2
90003554:	d031      	beq.n	900035ba <HAL_GPIO_Init+0x22e>
90003556:	687b      	ldr	r3, [r7, #4]
90003558:	4a1e      	ldr	r2, [pc, #120]	; (900035d4 <HAL_GPIO_Init+0x248>)
9000355a:	4293      	cmp	r3, r2
9000355c:	d02b      	beq.n	900035b6 <HAL_GPIO_Init+0x22a>
9000355e:	687b      	ldr	r3, [r7, #4]
90003560:	4a1d      	ldr	r2, [pc, #116]	; (900035d8 <HAL_GPIO_Init+0x24c>)
90003562:	4293      	cmp	r3, r2
90003564:	d025      	beq.n	900035b2 <HAL_GPIO_Init+0x226>
90003566:	687b      	ldr	r3, [r7, #4]
90003568:	4a1c      	ldr	r2, [pc, #112]	; (900035dc <HAL_GPIO_Init+0x250>)
9000356a:	4293      	cmp	r3, r2
9000356c:	d01f      	beq.n	900035ae <HAL_GPIO_Init+0x222>
9000356e:	687b      	ldr	r3, [r7, #4]
90003570:	4a1b      	ldr	r2, [pc, #108]	; (900035e0 <HAL_GPIO_Init+0x254>)
90003572:	4293      	cmp	r3, r2
90003574:	d019      	beq.n	900035aa <HAL_GPIO_Init+0x21e>
90003576:	687b      	ldr	r3, [r7, #4]
90003578:	4a1a      	ldr	r2, [pc, #104]	; (900035e4 <HAL_GPIO_Init+0x258>)
9000357a:	4293      	cmp	r3, r2
9000357c:	d013      	beq.n	900035a6 <HAL_GPIO_Init+0x21a>
9000357e:	687b      	ldr	r3, [r7, #4]
90003580:	4a19      	ldr	r2, [pc, #100]	; (900035e8 <HAL_GPIO_Init+0x25c>)
90003582:	4293      	cmp	r3, r2
90003584:	d00d      	beq.n	900035a2 <HAL_GPIO_Init+0x216>
90003586:	687b      	ldr	r3, [r7, #4]
90003588:	4a18      	ldr	r2, [pc, #96]	; (900035ec <HAL_GPIO_Init+0x260>)
9000358a:	4293      	cmp	r3, r2
9000358c:	d007      	beq.n	9000359e <HAL_GPIO_Init+0x212>
9000358e:	687b      	ldr	r3, [r7, #4]
90003590:	4a17      	ldr	r2, [pc, #92]	; (900035f0 <HAL_GPIO_Init+0x264>)
90003592:	4293      	cmp	r3, r2
90003594:	d101      	bne.n	9000359a <HAL_GPIO_Init+0x20e>
90003596:	2309      	movs	r3, #9
90003598:	e02d      	b.n	900035f6 <HAL_GPIO_Init+0x26a>
9000359a:	230a      	movs	r3, #10
9000359c:	e02b      	b.n	900035f6 <HAL_GPIO_Init+0x26a>
9000359e:	2308      	movs	r3, #8
900035a0:	e029      	b.n	900035f6 <HAL_GPIO_Init+0x26a>
900035a2:	2307      	movs	r3, #7
900035a4:	e027      	b.n	900035f6 <HAL_GPIO_Init+0x26a>
900035a6:	2306      	movs	r3, #6
900035a8:	e025      	b.n	900035f6 <HAL_GPIO_Init+0x26a>
900035aa:	2305      	movs	r3, #5
900035ac:	e023      	b.n	900035f6 <HAL_GPIO_Init+0x26a>
900035ae:	2304      	movs	r3, #4
900035b0:	e021      	b.n	900035f6 <HAL_GPIO_Init+0x26a>
900035b2:	2303      	movs	r3, #3
900035b4:	e01f      	b.n	900035f6 <HAL_GPIO_Init+0x26a>
900035b6:	2302      	movs	r3, #2
900035b8:	e01d      	b.n	900035f6 <HAL_GPIO_Init+0x26a>
900035ba:	2301      	movs	r3, #1
900035bc:	e01b      	b.n	900035f6 <HAL_GPIO_Init+0x26a>
900035be:	bf00      	nop
900035c0:	58000080 	.word	0x58000080
900035c4:	58024400 	.word	0x58024400
900035c8:	58000400 	.word	0x58000400
900035cc:	58020000 	.word	0x58020000
900035d0:	58020400 	.word	0x58020400
900035d4:	58020800 	.word	0x58020800
900035d8:	58020c00 	.word	0x58020c00
900035dc:	58021000 	.word	0x58021000
900035e0:	58021400 	.word	0x58021400
900035e4:	58021800 	.word	0x58021800
900035e8:	58021c00 	.word	0x58021c00
900035ec:	58022000 	.word	0x58022000
900035f0:	58022400 	.word	0x58022400
900035f4:	2300      	movs	r3, #0
900035f6:	69fa      	ldr	r2, [r7, #28]
900035f8:	f002 0203 	and.w	r2, r2, #3
900035fc:	0092      	lsls	r2, r2, #2
900035fe:	4093      	lsls	r3, r2
90003600:	69ba      	ldr	r2, [r7, #24]
90003602:	4313      	orrs	r3, r2
90003604:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003606:	4938      	ldr	r1, [pc, #224]	; (900036e8 <HAL_GPIO_Init+0x35c>)
90003608:	69fb      	ldr	r3, [r7, #28]
9000360a:	089b      	lsrs	r3, r3, #2
9000360c:	3302      	adds	r3, #2
9000360e:	69ba      	ldr	r2, [r7, #24]
90003610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90003618:	681b      	ldr	r3, [r3, #0]
9000361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000361c:	693b      	ldr	r3, [r7, #16]
9000361e:	43db      	mvns	r3, r3
90003620:	69ba      	ldr	r2, [r7, #24]
90003622:	4013      	ands	r3, r2
90003624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003626:	683b      	ldr	r3, [r7, #0]
90003628:	685b      	ldr	r3, [r3, #4]
9000362a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
9000362e:	2b00      	cmp	r3, #0
90003630:	d003      	beq.n	9000363a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003632:	69ba      	ldr	r2, [r7, #24]
90003634:	693b      	ldr	r3, [r7, #16]
90003636:	4313      	orrs	r3, r2
90003638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
9000363a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
9000363e:	69bb      	ldr	r3, [r7, #24]
90003640:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90003646:	685b      	ldr	r3, [r3, #4]
90003648:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000364a:	693b      	ldr	r3, [r7, #16]
9000364c:	43db      	mvns	r3, r3
9000364e:	69ba      	ldr	r2, [r7, #24]
90003650:	4013      	ands	r3, r2
90003652:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003654:	683b      	ldr	r3, [r7, #0]
90003656:	685b      	ldr	r3, [r3, #4]
90003658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
9000365c:	2b00      	cmp	r3, #0
9000365e:	d003      	beq.n	90003668 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003660:	69ba      	ldr	r2, [r7, #24]
90003662:	693b      	ldr	r3, [r7, #16]
90003664:	4313      	orrs	r3, r2
90003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
9000366c:	69bb      	ldr	r3, [r7, #24]
9000366e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003670:	697b      	ldr	r3, [r7, #20]
90003672:	685b      	ldr	r3, [r3, #4]
90003674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003676:	693b      	ldr	r3, [r7, #16]
90003678:	43db      	mvns	r3, r3
9000367a:	69ba      	ldr	r2, [r7, #24]
9000367c:	4013      	ands	r3, r2
9000367e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003680:	683b      	ldr	r3, [r7, #0]
90003682:	685b      	ldr	r3, [r3, #4]
90003684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003688:	2b00      	cmp	r3, #0
9000368a:	d003      	beq.n	90003694 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
9000368c:	69ba      	ldr	r2, [r7, #24]
9000368e:	693b      	ldr	r3, [r7, #16]
90003690:	4313      	orrs	r3, r2
90003692:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003694:	697b      	ldr	r3, [r7, #20]
90003696:	69ba      	ldr	r2, [r7, #24]
90003698:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
9000369a:	697b      	ldr	r3, [r7, #20]
9000369c:	681b      	ldr	r3, [r3, #0]
9000369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
900036a0:	693b      	ldr	r3, [r7, #16]
900036a2:	43db      	mvns	r3, r3
900036a4:	69ba      	ldr	r2, [r7, #24]
900036a6:	4013      	ands	r3, r2
900036a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
900036aa:	683b      	ldr	r3, [r7, #0]
900036ac:	685b      	ldr	r3, [r3, #4]
900036ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900036b2:	2b00      	cmp	r3, #0
900036b4:	d003      	beq.n	900036be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
900036b6:	69ba      	ldr	r2, [r7, #24]
900036b8:	693b      	ldr	r3, [r7, #16]
900036ba:	4313      	orrs	r3, r2
900036bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
900036be:	697b      	ldr	r3, [r7, #20]
900036c0:	69ba      	ldr	r2, [r7, #24]
900036c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
900036c4:	69fb      	ldr	r3, [r7, #28]
900036c6:	3301      	adds	r3, #1
900036c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900036ca:	683b      	ldr	r3, [r7, #0]
900036cc:	681a      	ldr	r2, [r3, #0]
900036ce:	69fb      	ldr	r3, [r7, #28]
900036d0:	fa22 f303 	lsr.w	r3, r2, r3
900036d4:	2b00      	cmp	r3, #0
900036d6:	f47f ae63 	bne.w	900033a0 <HAL_GPIO_Init+0x14>
  }
}
900036da:	bf00      	nop
900036dc:	bf00      	nop
900036de:	3724      	adds	r7, #36	; 0x24
900036e0:	46bd      	mov	sp, r7
900036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
900036e6:	4770      	bx	lr
900036e8:	58000400 	.word	0x58000400

900036ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
900036ec:	b480      	push	{r7}
900036ee:	b083      	sub	sp, #12
900036f0:	af00      	add	r7, sp, #0
900036f2:	6078      	str	r0, [r7, #4]
900036f4:	460b      	mov	r3, r1
900036f6:	807b      	strh	r3, [r7, #2]
900036f8:	4613      	mov	r3, r2
900036fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
900036fc:	787b      	ldrb	r3, [r7, #1]
900036fe:	2b00      	cmp	r3, #0
90003700:	d003      	beq.n	9000370a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003702:	887a      	ldrh	r2, [r7, #2]
90003704:	687b      	ldr	r3, [r7, #4]
90003706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003708:	e003      	b.n	90003712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
9000370a:	887b      	ldrh	r3, [r7, #2]
9000370c:	041a      	lsls	r2, r3, #16
9000370e:	687b      	ldr	r3, [r7, #4]
90003710:	619a      	str	r2, [r3, #24]
}
90003712:	bf00      	nop
90003714:	370c      	adds	r7, #12
90003716:	46bd      	mov	sp, r7
90003718:	f85d 7b04 	ldr.w	r7, [sp], #4
9000371c:	4770      	bx	lr

9000371e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
9000371e:	b480      	push	{r7}
90003720:	b085      	sub	sp, #20
90003722:	af00      	add	r7, sp, #0
90003724:	6078      	str	r0, [r7, #4]
90003726:	460b      	mov	r3, r1
90003728:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
9000372a:	687b      	ldr	r3, [r7, #4]
9000372c:	695b      	ldr	r3, [r3, #20]
9000372e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
90003730:	887a      	ldrh	r2, [r7, #2]
90003732:	68fb      	ldr	r3, [r7, #12]
90003734:	4013      	ands	r3, r2
90003736:	041a      	lsls	r2, r3, #16
90003738:	68fb      	ldr	r3, [r7, #12]
9000373a:	43d9      	mvns	r1, r3
9000373c:	887b      	ldrh	r3, [r7, #2]
9000373e:	400b      	ands	r3, r1
90003740:	431a      	orrs	r2, r3
90003742:	687b      	ldr	r3, [r7, #4]
90003744:	619a      	str	r2, [r3, #24]
}
90003746:	bf00      	nop
90003748:	3714      	adds	r7, #20
9000374a:	46bd      	mov	sp, r7
9000374c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003750:	4770      	bx	lr
	...

90003754 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
90003754:	b580      	push	{r7, lr}
90003756:	b084      	sub	sp, #16
90003758:	af00      	add	r7, sp, #0
9000375a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000375c:	687b      	ldr	r3, [r7, #4]
9000375e:	2b00      	cmp	r3, #0
90003760:	d101      	bne.n	90003766 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90003762:	2301      	movs	r3, #1
90003764:	e0bf      	b.n	900038e6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90003766:	687b      	ldr	r3, [r7, #4]
90003768:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
9000376c:	b2db      	uxtb	r3, r3
9000376e:	2b00      	cmp	r3, #0
90003770:	d106      	bne.n	90003780 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90003772:	687b      	ldr	r3, [r7, #4]
90003774:	2200      	movs	r2, #0
90003776:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
9000377a:	6878      	ldr	r0, [r7, #4]
9000377c:	f7fe f8ea 	bl	90001954 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003780:	687b      	ldr	r3, [r7, #4]
90003782:	2202      	movs	r2, #2
90003784:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90003788:	687b      	ldr	r3, [r7, #4]
9000378a:	681b      	ldr	r3, [r3, #0]
9000378c:	699a      	ldr	r2, [r3, #24]
9000378e:	687b      	ldr	r3, [r7, #4]
90003790:	681b      	ldr	r3, [r3, #0]
90003792:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90003796:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90003798:	687b      	ldr	r3, [r7, #4]
9000379a:	681b      	ldr	r3, [r3, #0]
9000379c:	6999      	ldr	r1, [r3, #24]
9000379e:	687b      	ldr	r3, [r7, #4]
900037a0:	685a      	ldr	r2, [r3, #4]
900037a2:	687b      	ldr	r3, [r7, #4]
900037a4:	689b      	ldr	r3, [r3, #8]
900037a6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900037a8:	687b      	ldr	r3, [r7, #4]
900037aa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900037ac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900037ae:	687b      	ldr	r3, [r7, #4]
900037b0:	691b      	ldr	r3, [r3, #16]
900037b2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900037b4:	687b      	ldr	r3, [r7, #4]
900037b6:	681b      	ldr	r3, [r3, #0]
900037b8:	430a      	orrs	r2, r1
900037ba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
900037bc:	687b      	ldr	r3, [r7, #4]
900037be:	681b      	ldr	r3, [r3, #0]
900037c0:	6899      	ldr	r1, [r3, #8]
900037c2:	687b      	ldr	r3, [r7, #4]
900037c4:	681a      	ldr	r2, [r3, #0]
900037c6:	4b4a      	ldr	r3, [pc, #296]	; (900038f0 <HAL_LTDC_Init+0x19c>)
900037c8:	400b      	ands	r3, r1
900037ca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
900037cc:	687b      	ldr	r3, [r7, #4]
900037ce:	695b      	ldr	r3, [r3, #20]
900037d0:	041b      	lsls	r3, r3, #16
900037d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
900037d4:	687b      	ldr	r3, [r7, #4]
900037d6:	681b      	ldr	r3, [r3, #0]
900037d8:	6899      	ldr	r1, [r3, #8]
900037da:	687b      	ldr	r3, [r7, #4]
900037dc:	699a      	ldr	r2, [r3, #24]
900037de:	68fb      	ldr	r3, [r7, #12]
900037e0:	431a      	orrs	r2, r3
900037e2:	687b      	ldr	r3, [r7, #4]
900037e4:	681b      	ldr	r3, [r3, #0]
900037e6:	430a      	orrs	r2, r1
900037e8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
900037ea:	687b      	ldr	r3, [r7, #4]
900037ec:	681b      	ldr	r3, [r3, #0]
900037ee:	68d9      	ldr	r1, [r3, #12]
900037f0:	687b      	ldr	r3, [r7, #4]
900037f2:	681a      	ldr	r2, [r3, #0]
900037f4:	4b3e      	ldr	r3, [pc, #248]	; (900038f0 <HAL_LTDC_Init+0x19c>)
900037f6:	400b      	ands	r3, r1
900037f8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
900037fa:	687b      	ldr	r3, [r7, #4]
900037fc:	69db      	ldr	r3, [r3, #28]
900037fe:	041b      	lsls	r3, r3, #16
90003800:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90003802:	687b      	ldr	r3, [r7, #4]
90003804:	681b      	ldr	r3, [r3, #0]
90003806:	68d9      	ldr	r1, [r3, #12]
90003808:	687b      	ldr	r3, [r7, #4]
9000380a:	6a1a      	ldr	r2, [r3, #32]
9000380c:	68fb      	ldr	r3, [r7, #12]
9000380e:	431a      	orrs	r2, r3
90003810:	687b      	ldr	r3, [r7, #4]
90003812:	681b      	ldr	r3, [r3, #0]
90003814:	430a      	orrs	r2, r1
90003816:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
90003818:	687b      	ldr	r3, [r7, #4]
9000381a:	681b      	ldr	r3, [r3, #0]
9000381c:	6919      	ldr	r1, [r3, #16]
9000381e:	687b      	ldr	r3, [r7, #4]
90003820:	681a      	ldr	r2, [r3, #0]
90003822:	4b33      	ldr	r3, [pc, #204]	; (900038f0 <HAL_LTDC_Init+0x19c>)
90003824:	400b      	ands	r3, r1
90003826:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90003828:	687b      	ldr	r3, [r7, #4]
9000382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000382c:	041b      	lsls	r3, r3, #16
9000382e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90003830:	687b      	ldr	r3, [r7, #4]
90003832:	681b      	ldr	r3, [r3, #0]
90003834:	6919      	ldr	r1, [r3, #16]
90003836:	687b      	ldr	r3, [r7, #4]
90003838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9000383a:	68fb      	ldr	r3, [r7, #12]
9000383c:	431a      	orrs	r2, r3
9000383e:	687b      	ldr	r3, [r7, #4]
90003840:	681b      	ldr	r3, [r3, #0]
90003842:	430a      	orrs	r2, r1
90003844:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
90003846:	687b      	ldr	r3, [r7, #4]
90003848:	681b      	ldr	r3, [r3, #0]
9000384a:	6959      	ldr	r1, [r3, #20]
9000384c:	687b      	ldr	r3, [r7, #4]
9000384e:	681a      	ldr	r2, [r3, #0]
90003850:	4b27      	ldr	r3, [pc, #156]	; (900038f0 <HAL_LTDC_Init+0x19c>)
90003852:	400b      	ands	r3, r1
90003854:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
90003856:	687b      	ldr	r3, [r7, #4]
90003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000385a:	041b      	lsls	r3, r3, #16
9000385c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
9000385e:	687b      	ldr	r3, [r7, #4]
90003860:	681b      	ldr	r3, [r3, #0]
90003862:	6959      	ldr	r1, [r3, #20]
90003864:	687b      	ldr	r3, [r7, #4]
90003866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003868:	68fb      	ldr	r3, [r7, #12]
9000386a:	431a      	orrs	r2, r3
9000386c:	687b      	ldr	r3, [r7, #4]
9000386e:	681b      	ldr	r3, [r3, #0]
90003870:	430a      	orrs	r2, r1
90003872:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90003874:	687b      	ldr	r3, [r7, #4]
90003876:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
9000387a:	021b      	lsls	r3, r3, #8
9000387c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000387e:	687b      	ldr	r3, [r7, #4]
90003880:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
90003884:	041b      	lsls	r3, r3, #16
90003886:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90003888:	687b      	ldr	r3, [r7, #4]
9000388a:	681b      	ldr	r3, [r3, #0]
9000388c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000388e:	687b      	ldr	r3, [r7, #4]
90003890:	681b      	ldr	r3, [r3, #0]
90003892:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
90003896:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90003898:	687b      	ldr	r3, [r7, #4]
9000389a:	681b      	ldr	r3, [r3, #0]
9000389c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000389e:	68ba      	ldr	r2, [r7, #8]
900038a0:	68fb      	ldr	r3, [r7, #12]
900038a2:	4313      	orrs	r3, r2
900038a4:	687a      	ldr	r2, [r7, #4]
900038a6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
900038aa:	431a      	orrs	r2, r3
900038ac:	687b      	ldr	r3, [r7, #4]
900038ae:	681b      	ldr	r3, [r3, #0]
900038b0:	430a      	orrs	r2, r1
900038b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900038b4:	687b      	ldr	r3, [r7, #4]
900038b6:	681b      	ldr	r3, [r3, #0]
900038b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900038ba:	687b      	ldr	r3, [r7, #4]
900038bc:	681b      	ldr	r3, [r3, #0]
900038be:	f042 0206 	orr.w	r2, r2, #6
900038c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
900038c4:	687b      	ldr	r3, [r7, #4]
900038c6:	681b      	ldr	r3, [r3, #0]
900038c8:	699a      	ldr	r2, [r3, #24]
900038ca:	687b      	ldr	r3, [r7, #4]
900038cc:	681b      	ldr	r3, [r3, #0]
900038ce:	f042 0201 	orr.w	r2, r2, #1
900038d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900038d4:	687b      	ldr	r3, [r7, #4]
900038d6:	2200      	movs	r2, #0
900038d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
900038dc:	687b      	ldr	r3, [r7, #4]
900038de:	2201      	movs	r2, #1
900038e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
900038e4:	2300      	movs	r3, #0
}
900038e6:	4618      	mov	r0, r3
900038e8:	3710      	adds	r7, #16
900038ea:	46bd      	mov	sp, r7
900038ec:	bd80      	pop	{r7, pc}
900038ee:	bf00      	nop
900038f0:	f000f800 	.word	0xf000f800

900038f4 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
900038f4:	b580      	push	{r7, lr}
900038f6:	b084      	sub	sp, #16
900038f8:	af00      	add	r7, sp, #0
900038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
900038fc:	687b      	ldr	r3, [r7, #4]
900038fe:	2b00      	cmp	r3, #0
90003900:	d101      	bne.n	90003906 <HAL_LTDC_DeInit+0x12>
  {
    return HAL_ERROR;
90003902:	2301      	movs	r3, #1
90003904:	e049      	b.n	9000399a <HAL_LTDC_DeInit+0xa6>

  /* Check function parameters */
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));

  /* Disable LTDC Layer 1 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_1);
90003906:	687b      	ldr	r3, [r7, #4]
90003908:	681b      	ldr	r3, [r3, #0]
9000390a:	3384      	adds	r3, #132	; 0x84
9000390c:	681b      	ldr	r3, [r3, #0]
9000390e:	687a      	ldr	r2, [r7, #4]
90003910:	6812      	ldr	r2, [r2, #0]
90003912:	3284      	adds	r2, #132	; 0x84
90003914:	f023 0301 	bic.w	r3, r3, #1
90003918:	6013      	str	r3, [r2, #0]

#if defined(LTDC_Layer2_BASE)
  /* Disable LTDC Layer 2 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_2);
9000391a:	687b      	ldr	r3, [r7, #4]
9000391c:	681b      	ldr	r3, [r3, #0]
9000391e:	f503 7382 	add.w	r3, r3, #260	; 0x104
90003922:	681b      	ldr	r3, [r3, #0]
90003924:	687a      	ldr	r2, [r7, #4]
90003926:	6812      	ldr	r2, [r2, #0]
90003928:	f502 7282 	add.w	r2, r2, #260	; 0x104
9000392c:	f023 0301 	bic.w	r3, r3, #1
90003930:	6013      	str	r3, [r2, #0]
#endif /* LTDC_Layer2_BASE */

  /* Reload during vertical blanking period */
  __HAL_LTDC_VERTICAL_BLANKING_RELOAD_CONFIG(hltdc);
90003932:	687b      	ldr	r3, [r7, #4]
90003934:	681b      	ldr	r3, [r3, #0]
90003936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90003938:	687b      	ldr	r3, [r7, #4]
9000393a:	681b      	ldr	r3, [r3, #0]
9000393c:	f042 0202 	orr.w	r2, r2, #2
90003940:	625a      	str	r2, [r3, #36]	; 0x24

  /* Get tick */
  tickstart = HAL_GetTick();
90003942:	f7fe fb35 	bl	90001fb0 <HAL_GetTick>
90003946:	60f8      	str	r0, [r7, #12]

  /* Wait for VSYNC Interrupt */
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
90003948:	e006      	b.n	90003958 <HAL_LTDC_DeInit+0x64>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > LTDC_TIMEOUT_VALUE)
9000394a:	f7fe fb31 	bl	90001fb0 <HAL_GetTick>
9000394e:	4602      	mov	r2, r0
90003950:	68fb      	ldr	r3, [r7, #12]
90003952:	1ad3      	subs	r3, r2, r3
90003954:	2b64      	cmp	r3, #100	; 0x64
90003956:	d807      	bhi.n	90003968 <HAL_LTDC_DeInit+0x74>
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
90003958:	687b      	ldr	r3, [r7, #4]
9000395a:	681b      	ldr	r3, [r3, #0]
9000395c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9000395e:	f003 0304 	and.w	r3, r3, #4
90003962:	2b00      	cmp	r3, #0
90003964:	d0f1      	beq.n	9000394a <HAL_LTDC_DeInit+0x56>
90003966:	e000      	b.n	9000396a <HAL_LTDC_DeInit+0x76>
    {
      break;
90003968:	bf00      	nop
    }
  }

  /* Disable LTDC  */
  __HAL_LTDC_DISABLE(hltdc);
9000396a:	687b      	ldr	r3, [r7, #4]
9000396c:	681b      	ldr	r3, [r3, #0]
9000396e:	699a      	ldr	r2, [r3, #24]
90003970:	687b      	ldr	r3, [r7, #4]
90003972:	681b      	ldr	r3, [r3, #0]
90003974:	f022 0201 	bic.w	r2, r2, #1
90003978:	619a      	str	r2, [r3, #24]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
9000397a:	6878      	ldr	r0, [r7, #4]
9000397c:	f7fe f8b2 	bl	90001ae4 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90003980:	687b      	ldr	r3, [r7, #4]
90003982:	2200      	movs	r2, #0
90003984:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
90003988:	687b      	ldr	r3, [r7, #4]
9000398a:	2200      	movs	r2, #0
9000398c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
90003990:	687b      	ldr	r3, [r7, #4]
90003992:	2200      	movs	r2, #0
90003994:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
90003998:	2300      	movs	r3, #0
}
9000399a:	4618      	mov	r0, r3
9000399c:	3710      	adds	r7, #16
9000399e:	46bd      	mov	sp, r7
900039a0:	bd80      	pop	{r7, pc}

900039a2 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
900039a2:	b580      	push	{r7, lr}
900039a4:	b084      	sub	sp, #16
900039a6:	af00      	add	r7, sp, #0
900039a8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
900039aa:	687b      	ldr	r3, [r7, #4]
900039ac:	681b      	ldr	r3, [r3, #0]
900039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900039b0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
900039b2:	687b      	ldr	r3, [r7, #4]
900039b4:	681b      	ldr	r3, [r3, #0]
900039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900039b8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
900039ba:	68fb      	ldr	r3, [r7, #12]
900039bc:	f003 0304 	and.w	r3, r3, #4
900039c0:	2b00      	cmp	r3, #0
900039c2:	d023      	beq.n	90003a0c <HAL_LTDC_IRQHandler+0x6a>
900039c4:	68bb      	ldr	r3, [r7, #8]
900039c6:	f003 0304 	and.w	r3, r3, #4
900039ca:	2b00      	cmp	r3, #0
900039cc:	d01e      	beq.n	90003a0c <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
900039ce:	687b      	ldr	r3, [r7, #4]
900039d0:	681b      	ldr	r3, [r3, #0]
900039d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900039d4:	687b      	ldr	r3, [r7, #4]
900039d6:	681b      	ldr	r3, [r3, #0]
900039d8:	f022 0204 	bic.w	r2, r2, #4
900039dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
900039de:	687b      	ldr	r3, [r7, #4]
900039e0:	681b      	ldr	r3, [r3, #0]
900039e2:	2204      	movs	r2, #4
900039e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
900039e6:	687b      	ldr	r3, [r7, #4]
900039e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900039ec:	f043 0201 	orr.w	r2, r3, #1
900039f0:	687b      	ldr	r3, [r7, #4]
900039f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
900039f6:	687b      	ldr	r3, [r7, #4]
900039f8:	2204      	movs	r2, #4
900039fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
900039fe:	687b      	ldr	r3, [r7, #4]
90003a00:	2200      	movs	r2, #0
90003a02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
90003a06:	6878      	ldr	r0, [r7, #4]
90003a08:	f000 f86f 	bl	90003aea <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
90003a0c:	68fb      	ldr	r3, [r7, #12]
90003a0e:	f003 0302 	and.w	r3, r3, #2
90003a12:	2b00      	cmp	r3, #0
90003a14:	d023      	beq.n	90003a5e <HAL_LTDC_IRQHandler+0xbc>
90003a16:	68bb      	ldr	r3, [r7, #8]
90003a18:	f003 0302 	and.w	r3, r3, #2
90003a1c:	2b00      	cmp	r3, #0
90003a1e:	d01e      	beq.n	90003a5e <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
90003a20:	687b      	ldr	r3, [r7, #4]
90003a22:	681b      	ldr	r3, [r3, #0]
90003a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90003a26:	687b      	ldr	r3, [r7, #4]
90003a28:	681b      	ldr	r3, [r3, #0]
90003a2a:	f022 0202 	bic.w	r2, r2, #2
90003a2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
90003a30:	687b      	ldr	r3, [r7, #4]
90003a32:	681b      	ldr	r3, [r3, #0]
90003a34:	2202      	movs	r2, #2
90003a36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
90003a38:	687b      	ldr	r3, [r7, #4]
90003a3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90003a3e:	f043 0202 	orr.w	r2, r3, #2
90003a42:	687b      	ldr	r3, [r7, #4]
90003a44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
90003a48:	687b      	ldr	r3, [r7, #4]
90003a4a:	2204      	movs	r2, #4
90003a4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
90003a50:	687b      	ldr	r3, [r7, #4]
90003a52:	2200      	movs	r2, #0
90003a54:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
90003a58:	6878      	ldr	r0, [r7, #4]
90003a5a:	f000 f846 	bl	90003aea <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
90003a5e:	68fb      	ldr	r3, [r7, #12]
90003a60:	f003 0301 	and.w	r3, r3, #1
90003a64:	2b00      	cmp	r3, #0
90003a66:	d01b      	beq.n	90003aa0 <HAL_LTDC_IRQHandler+0xfe>
90003a68:	68bb      	ldr	r3, [r7, #8]
90003a6a:	f003 0301 	and.w	r3, r3, #1
90003a6e:	2b00      	cmp	r3, #0
90003a70:	d016      	beq.n	90003aa0 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90003a72:	687b      	ldr	r3, [r7, #4]
90003a74:	681b      	ldr	r3, [r3, #0]
90003a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90003a78:	687b      	ldr	r3, [r7, #4]
90003a7a:	681b      	ldr	r3, [r3, #0]
90003a7c:	f022 0201 	bic.w	r2, r2, #1
90003a80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
90003a82:	687b      	ldr	r3, [r7, #4]
90003a84:	681b      	ldr	r3, [r3, #0]
90003a86:	2201      	movs	r2, #1
90003a88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
90003a8a:	687b      	ldr	r3, [r7, #4]
90003a8c:	2201      	movs	r2, #1
90003a8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
90003a92:	687b      	ldr	r3, [r7, #4]
90003a94:	2200      	movs	r2, #0
90003a96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
90003a9a:	6878      	ldr	r0, [r7, #4]
90003a9c:	f000 f82f 	bl	90003afe <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
90003aa0:	68fb      	ldr	r3, [r7, #12]
90003aa2:	f003 0308 	and.w	r3, r3, #8
90003aa6:	2b00      	cmp	r3, #0
90003aa8:	d01b      	beq.n	90003ae2 <HAL_LTDC_IRQHandler+0x140>
90003aaa:	68bb      	ldr	r3, [r7, #8]
90003aac:	f003 0308 	and.w	r3, r3, #8
90003ab0:	2b00      	cmp	r3, #0
90003ab2:	d016      	beq.n	90003ae2 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
90003ab4:	687b      	ldr	r3, [r7, #4]
90003ab6:	681b      	ldr	r3, [r3, #0]
90003ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90003aba:	687b      	ldr	r3, [r7, #4]
90003abc:	681b      	ldr	r3, [r3, #0]
90003abe:	f022 0208 	bic.w	r2, r2, #8
90003ac2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
90003ac4:	687b      	ldr	r3, [r7, #4]
90003ac6:	681b      	ldr	r3, [r3, #0]
90003ac8:	2208      	movs	r2, #8
90003aca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
90003acc:	687b      	ldr	r3, [r7, #4]
90003ace:	2201      	movs	r2, #1
90003ad0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
90003ad4:	687b      	ldr	r3, [r7, #4]
90003ad6:	2200      	movs	r2, #0
90003ad8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
90003adc:	6878      	ldr	r0, [r7, #4]
90003ade:	f7fd fb57 	bl	90001190 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
90003ae2:	bf00      	nop
90003ae4:	3710      	adds	r7, #16
90003ae6:	46bd      	mov	sp, r7
90003ae8:	bd80      	pop	{r7, pc}

90003aea <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
90003aea:	b480      	push	{r7}
90003aec:	b083      	sub	sp, #12
90003aee:	af00      	add	r7, sp, #0
90003af0:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
90003af2:	bf00      	nop
90003af4:	370c      	adds	r7, #12
90003af6:	46bd      	mov	sp, r7
90003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
90003afc:	4770      	bx	lr

90003afe <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
90003afe:	b480      	push	{r7}
90003b00:	b083      	sub	sp, #12
90003b02:	af00      	add	r7, sp, #0
90003b04:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
90003b06:	bf00      	nop
90003b08:	370c      	adds	r7, #12
90003b0a:	46bd      	mov	sp, r7
90003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b10:	4770      	bx	lr

90003b12 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90003b12:	b5b0      	push	{r4, r5, r7, lr}
90003b14:	b084      	sub	sp, #16
90003b16:	af00      	add	r7, sp, #0
90003b18:	60f8      	str	r0, [r7, #12]
90003b1a:	60b9      	str	r1, [r7, #8]
90003b1c:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90003b1e:	68fb      	ldr	r3, [r7, #12]
90003b20:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
90003b24:	2b01      	cmp	r3, #1
90003b26:	d101      	bne.n	90003b2c <HAL_LTDC_ConfigLayer+0x1a>
90003b28:	2302      	movs	r3, #2
90003b2a:	e02c      	b.n	90003b86 <HAL_LTDC_ConfigLayer+0x74>
90003b2c:	68fb      	ldr	r3, [r7, #12]
90003b2e:	2201      	movs	r2, #1
90003b30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003b34:	68fb      	ldr	r3, [r7, #12]
90003b36:	2202      	movs	r2, #2
90003b38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90003b3c:	68fa      	ldr	r2, [r7, #12]
90003b3e:	687b      	ldr	r3, [r7, #4]
90003b40:	2134      	movs	r1, #52	; 0x34
90003b42:	fb01 f303 	mul.w	r3, r1, r3
90003b46:	4413      	add	r3, r2
90003b48:	f103 0238 	add.w	r2, r3, #56	; 0x38
90003b4c:	68bb      	ldr	r3, [r7, #8]
90003b4e:	4614      	mov	r4, r2
90003b50:	461d      	mov	r5, r3
90003b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90003b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90003b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90003b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90003b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90003b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90003b5e:	682b      	ldr	r3, [r5, #0]
90003b60:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90003b62:	687a      	ldr	r2, [r7, #4]
90003b64:	68b9      	ldr	r1, [r7, #8]
90003b66:	68f8      	ldr	r0, [r7, #12]
90003b68:	f000 f92a 	bl	90003dc0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90003b6c:	68fb      	ldr	r3, [r7, #12]
90003b6e:	681b      	ldr	r3, [r3, #0]
90003b70:	2201      	movs	r2, #1
90003b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90003b74:	68fb      	ldr	r3, [r7, #12]
90003b76:	2201      	movs	r2, #1
90003b78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90003b7c:	68fb      	ldr	r3, [r7, #12]
90003b7e:	2200      	movs	r2, #0
90003b80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
90003b84:	2300      	movs	r3, #0
}
90003b86:	4618      	mov	r0, r3
90003b88:	3710      	adds	r7, #16
90003b8a:	46bd      	mov	sp, r7
90003b8c:	bdb0      	pop	{r4, r5, r7, pc}

90003b8e <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
90003b8e:	b480      	push	{r7}
90003b90:	b089      	sub	sp, #36	; 0x24
90003b92:	af00      	add	r7, sp, #0
90003b94:	60f8      	str	r0, [r7, #12]
90003b96:	60b9      	str	r1, [r7, #8]
90003b98:	607a      	str	r2, [r7, #4]
90003b9a:	603b      	str	r3, [r7, #0]
  uint32_t tmp;
  uint32_t counter;
  uint32_t *pcolorlut = pCLUT;
90003b9c:	68bb      	ldr	r3, [r7, #8]
90003b9e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
90003ba0:	68fb      	ldr	r3, [r7, #12]
90003ba2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
90003ba6:	2b01      	cmp	r3, #1
90003ba8:	d101      	bne.n	90003bae <HAL_LTDC_ConfigCLUT+0x20>
90003baa:	2302      	movs	r3, #2
90003bac:	e057      	b.n	90003c5e <HAL_LTDC_ConfigCLUT+0xd0>
90003bae:	68fb      	ldr	r3, [r7, #12]
90003bb0:	2201      	movs	r2, #1
90003bb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003bb6:	68fb      	ldr	r3, [r7, #12]
90003bb8:	2202      	movs	r2, #2
90003bba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for (counter = 0U; (counter < CLUTSize); counter++)
90003bbe:	2300      	movs	r3, #0
90003bc0:	61bb      	str	r3, [r7, #24]
90003bc2:	e03f      	b.n	90003c44 <HAL_LTDC_ConfigCLUT+0xb6>
  {
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
90003bc4:	68fa      	ldr	r2, [r7, #12]
90003bc6:	683b      	ldr	r3, [r7, #0]
90003bc8:	2134      	movs	r1, #52	; 0x34
90003bca:	fb01 f303 	mul.w	r3, r1, r3
90003bce:	4413      	add	r3, r2
90003bd0:	3348      	adds	r3, #72	; 0x48
90003bd2:	681b      	ldr	r3, [r3, #0]
90003bd4:	2b06      	cmp	r3, #6
90003bd6:	d114      	bne.n	90003c02 <HAL_LTDC_ConfigCLUT+0x74>
    {
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
90003bd8:	69ba      	ldr	r2, [r7, #24]
90003bda:	4613      	mov	r3, r2
90003bdc:	011b      	lsls	r3, r3, #4
90003bde:	4413      	add	r3, r2
90003be0:	061a      	lsls	r2, r3, #24
90003be2:	697b      	ldr	r3, [r7, #20]
90003be4:	681b      	ldr	r3, [r3, #0]
90003be6:	b2db      	uxtb	r3, r3
90003be8:	431a      	orrs	r2, r3
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
90003bea:	697b      	ldr	r3, [r7, #20]
90003bec:	681b      	ldr	r3, [r3, #0]
90003bee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
90003bf2:	431a      	orrs	r2, r3
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
90003bf4:	697b      	ldr	r3, [r7, #20]
90003bf6:	681b      	ldr	r3, [r3, #0]
90003bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
90003bfc:	4313      	orrs	r3, r2
90003bfe:	61fb      	str	r3, [r7, #28]
90003c00:	e010      	b.n	90003c24 <HAL_LTDC_ConfigCLUT+0x96>
    }
    else
    {
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
90003c02:	69bb      	ldr	r3, [r7, #24]
90003c04:	061a      	lsls	r2, r3, #24
90003c06:	697b      	ldr	r3, [r7, #20]
90003c08:	681b      	ldr	r3, [r3, #0]
90003c0a:	b2db      	uxtb	r3, r3
90003c0c:	431a      	orrs	r2, r3
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
90003c0e:	697b      	ldr	r3, [r7, #20]
90003c10:	681b      	ldr	r3, [r3, #0]
90003c12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
90003c16:	431a      	orrs	r2, r3
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
90003c18:	697b      	ldr	r3, [r7, #20]
90003c1a:	681b      	ldr	r3, [r3, #0]
90003c1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
90003c20:	4313      	orrs	r3, r2
90003c22:	61fb      	str	r3, [r7, #28]
    }

    pcolorlut++;
90003c24:	697b      	ldr	r3, [r7, #20]
90003c26:	3304      	adds	r3, #4
90003c28:	617b      	str	r3, [r7, #20]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
90003c2a:	68fb      	ldr	r3, [r7, #12]
90003c2c:	681b      	ldr	r3, [r3, #0]
90003c2e:	461a      	mov	r2, r3
90003c30:	683b      	ldr	r3, [r7, #0]
90003c32:	01db      	lsls	r3, r3, #7
90003c34:	4413      	add	r3, r2
90003c36:	3384      	adds	r3, #132	; 0x84
90003c38:	461a      	mov	r2, r3
90003c3a:	69fb      	ldr	r3, [r7, #28]
90003c3c:	6413      	str	r3, [r2, #64]	; 0x40
  for (counter = 0U; (counter < CLUTSize); counter++)
90003c3e:	69bb      	ldr	r3, [r7, #24]
90003c40:	3301      	adds	r3, #1
90003c42:	61bb      	str	r3, [r7, #24]
90003c44:	69ba      	ldr	r2, [r7, #24]
90003c46:	687b      	ldr	r3, [r7, #4]
90003c48:	429a      	cmp	r2, r3
90003c4a:	d3bb      	bcc.n	90003bc4 <HAL_LTDC_ConfigCLUT+0x36>
  }

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90003c4c:	68fb      	ldr	r3, [r7, #12]
90003c4e:	2201      	movs	r2, #1
90003c50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90003c54:	68fb      	ldr	r3, [r7, #12]
90003c56:	2200      	movs	r2, #0
90003c58:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
90003c5c:	2300      	movs	r3, #0
}
90003c5e:	4618      	mov	r0, r3
90003c60:	3724      	adds	r7, #36	; 0x24
90003c62:	46bd      	mov	sp, r7
90003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
90003c68:	4770      	bx	lr

90003c6a <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
90003c6a:	b480      	push	{r7}
90003c6c:	b083      	sub	sp, #12
90003c6e:	af00      	add	r7, sp, #0
90003c70:	6078      	str	r0, [r7, #4]
90003c72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
90003c74:	687b      	ldr	r3, [r7, #4]
90003c76:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
90003c7a:	2b01      	cmp	r3, #1
90003c7c:	d101      	bne.n	90003c82 <HAL_LTDC_EnableCLUT+0x18>
90003c7e:	2302      	movs	r3, #2
90003c80:	e026      	b.n	90003cd0 <HAL_LTDC_EnableCLUT+0x66>
90003c82:	687b      	ldr	r3, [r7, #4]
90003c84:	2201      	movs	r2, #1
90003c86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003c8a:	687b      	ldr	r3, [r7, #4]
90003c8c:	2202      	movs	r2, #2
90003c8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
90003c92:	687b      	ldr	r3, [r7, #4]
90003c94:	681b      	ldr	r3, [r3, #0]
90003c96:	461a      	mov	r2, r3
90003c98:	683b      	ldr	r3, [r7, #0]
90003c9a:	01db      	lsls	r3, r3, #7
90003c9c:	4413      	add	r3, r2
90003c9e:	3384      	adds	r3, #132	; 0x84
90003ca0:	681b      	ldr	r3, [r3, #0]
90003ca2:	687a      	ldr	r2, [r7, #4]
90003ca4:	6812      	ldr	r2, [r2, #0]
90003ca6:	4611      	mov	r1, r2
90003ca8:	683a      	ldr	r2, [r7, #0]
90003caa:	01d2      	lsls	r2, r2, #7
90003cac:	440a      	add	r2, r1
90003cae:	3284      	adds	r2, #132	; 0x84
90003cb0:	f043 0310 	orr.w	r3, r3, #16
90003cb4:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90003cb6:	687b      	ldr	r3, [r7, #4]
90003cb8:	681b      	ldr	r3, [r3, #0]
90003cba:	2201      	movs	r2, #1
90003cbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90003cbe:	687b      	ldr	r3, [r7, #4]
90003cc0:	2201      	movs	r2, #1
90003cc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90003cc6:	687b      	ldr	r3, [r7, #4]
90003cc8:	2200      	movs	r2, #0
90003cca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
90003cce:	2300      	movs	r3, #0
}
90003cd0:	4618      	mov	r0, r3
90003cd2:	370c      	adds	r7, #12
90003cd4:	46bd      	mov	sp, r7
90003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
90003cda:	4770      	bx	lr

90003cdc <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
90003cdc:	b480      	push	{r7}
90003cde:	b083      	sub	sp, #12
90003ce0:	af00      	add	r7, sp, #0
90003ce2:	6078      	str	r0, [r7, #4]
90003ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
90003ce6:	687b      	ldr	r3, [r7, #4]
90003ce8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
90003cec:	2b01      	cmp	r3, #1
90003cee:	d101      	bne.n	90003cf4 <HAL_LTDC_Reload+0x18>
90003cf0:	2302      	movs	r3, #2
90003cf2:	e01c      	b.n	90003d2e <HAL_LTDC_Reload+0x52>
90003cf4:	687b      	ldr	r3, [r7, #4]
90003cf6:	2201      	movs	r2, #1
90003cf8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003cfc:	687b      	ldr	r3, [r7, #4]
90003cfe:	2202      	movs	r2, #2
90003d00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
90003d04:	687b      	ldr	r3, [r7, #4]
90003d06:	681b      	ldr	r3, [r3, #0]
90003d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90003d0a:	687b      	ldr	r3, [r7, #4]
90003d0c:	681b      	ldr	r3, [r3, #0]
90003d0e:	f042 0208 	orr.w	r2, r2, #8
90003d12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
90003d14:	687b      	ldr	r3, [r7, #4]
90003d16:	681b      	ldr	r3, [r3, #0]
90003d18:	683a      	ldr	r2, [r7, #0]
90003d1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90003d1c:	687b      	ldr	r3, [r7, #4]
90003d1e:	2201      	movs	r2, #1
90003d20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90003d24:	687b      	ldr	r3, [r7, #4]
90003d26:	2200      	movs	r2, #0
90003d28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
90003d2c:	2300      	movs	r3, #0
}
90003d2e:	4618      	mov	r0, r3
90003d30:	370c      	adds	r7, #12
90003d32:	46bd      	mov	sp, r7
90003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
90003d38:	4770      	bx	lr

90003d3a <HAL_LTDC_SetWindowPosition_NoReload>:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0,
                                                      uint32_t LayerIdx)
{
90003d3a:	b580      	push	{r7, lr}
90003d3c:	b086      	sub	sp, #24
90003d3e:	af00      	add	r7, sp, #0
90003d40:	60f8      	str	r0, [r7, #12]
90003d42:	60b9      	str	r1, [r7, #8]
90003d44:	607a      	str	r2, [r7, #4]
90003d46:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
90003d48:	68fb      	ldr	r3, [r7, #12]
90003d4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
90003d4e:	2b01      	cmp	r3, #1
90003d50:	d101      	bne.n	90003d56 <HAL_LTDC_SetWindowPosition_NoReload+0x1c>
90003d52:	2302      	movs	r3, #2
90003d54:	e02f      	b.n	90003db6 <HAL_LTDC_SetWindowPosition_NoReload+0x7c>
90003d56:	68fb      	ldr	r3, [r7, #12]
90003d58:	2201      	movs	r2, #1
90003d5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003d5e:	68fb      	ldr	r3, [r7, #12]
90003d60:	2202      	movs	r2, #2
90003d62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
90003d66:	683b      	ldr	r3, [r7, #0]
90003d68:	2234      	movs	r2, #52	; 0x34
90003d6a:	fb02 f303 	mul.w	r3, r2, r3
90003d6e:	3338      	adds	r3, #56	; 0x38
90003d70:	68fa      	ldr	r2, [r7, #12]
90003d72:	4413      	add	r3, r2
90003d74:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
90003d76:	697b      	ldr	r3, [r7, #20]
90003d78:	68ba      	ldr	r2, [r7, #8]
90003d7a:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
90003d7c:	697b      	ldr	r3, [r7, #20]
90003d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90003d80:	68bb      	ldr	r3, [r7, #8]
90003d82:	441a      	add	r2, r3
90003d84:	697b      	ldr	r3, [r7, #20]
90003d86:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
90003d88:	697b      	ldr	r3, [r7, #20]
90003d8a:	687a      	ldr	r2, [r7, #4]
90003d8c:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
90003d8e:	697b      	ldr	r3, [r7, #20]
90003d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90003d92:	687b      	ldr	r3, [r7, #4]
90003d94:	441a      	add	r2, r3
90003d96:	697b      	ldr	r3, [r7, #20]
90003d98:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90003d9a:	683a      	ldr	r2, [r7, #0]
90003d9c:	6979      	ldr	r1, [r7, #20]
90003d9e:	68f8      	ldr	r0, [r7, #12]
90003da0:	f000 f80e 	bl	90003dc0 <LTDC_SetConfig>

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90003da4:	68fb      	ldr	r3, [r7, #12]
90003da6:	2201      	movs	r2, #1
90003da8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90003dac:	68fb      	ldr	r3, [r7, #12]
90003dae:	2200      	movs	r2, #0
90003db0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
90003db4:	2300      	movs	r3, #0
}
90003db6:	4618      	mov	r0, r3
90003db8:	3718      	adds	r7, #24
90003dba:	46bd      	mov	sp, r7
90003dbc:	bd80      	pop	{r7, pc}
	...

90003dc0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90003dc0:	b480      	push	{r7}
90003dc2:	b089      	sub	sp, #36	; 0x24
90003dc4:	af00      	add	r7, sp, #0
90003dc6:	60f8      	str	r0, [r7, #12]
90003dc8:	60b9      	str	r1, [r7, #8]
90003dca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90003dcc:	68bb      	ldr	r3, [r7, #8]
90003dce:	685a      	ldr	r2, [r3, #4]
90003dd0:	68fb      	ldr	r3, [r7, #12]
90003dd2:	681b      	ldr	r3, [r3, #0]
90003dd4:	68db      	ldr	r3, [r3, #12]
90003dd6:	0c1b      	lsrs	r3, r3, #16
90003dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
90003ddc:	4413      	add	r3, r2
90003dde:	041b      	lsls	r3, r3, #16
90003de0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90003de2:	68fb      	ldr	r3, [r7, #12]
90003de4:	681b      	ldr	r3, [r3, #0]
90003de6:	461a      	mov	r2, r3
90003de8:	687b      	ldr	r3, [r7, #4]
90003dea:	01db      	lsls	r3, r3, #7
90003dec:	4413      	add	r3, r2
90003dee:	3384      	adds	r3, #132	; 0x84
90003df0:	685b      	ldr	r3, [r3, #4]
90003df2:	68fa      	ldr	r2, [r7, #12]
90003df4:	6812      	ldr	r2, [r2, #0]
90003df6:	4611      	mov	r1, r2
90003df8:	687a      	ldr	r2, [r7, #4]
90003dfa:	01d2      	lsls	r2, r2, #7
90003dfc:	440a      	add	r2, r1
90003dfe:	3284      	adds	r2, #132	; 0x84
90003e00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90003e04:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90003e06:	68bb      	ldr	r3, [r7, #8]
90003e08:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90003e0a:	68fb      	ldr	r3, [r7, #12]
90003e0c:	681b      	ldr	r3, [r3, #0]
90003e0e:	68db      	ldr	r3, [r3, #12]
90003e10:	0c1b      	lsrs	r3, r3, #16
90003e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90003e16:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90003e18:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90003e1a:	68fb      	ldr	r3, [r7, #12]
90003e1c:	681b      	ldr	r3, [r3, #0]
90003e1e:	4619      	mov	r1, r3
90003e20:	687b      	ldr	r3, [r7, #4]
90003e22:	01db      	lsls	r3, r3, #7
90003e24:	440b      	add	r3, r1
90003e26:	3384      	adds	r3, #132	; 0x84
90003e28:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90003e2a:	69fb      	ldr	r3, [r7, #28]
90003e2c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90003e2e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90003e30:	68bb      	ldr	r3, [r7, #8]
90003e32:	68da      	ldr	r2, [r3, #12]
90003e34:	68fb      	ldr	r3, [r7, #12]
90003e36:	681b      	ldr	r3, [r3, #0]
90003e38:	68db      	ldr	r3, [r3, #12]
90003e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
90003e3e:	4413      	add	r3, r2
90003e40:	041b      	lsls	r3, r3, #16
90003e42:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90003e44:	68fb      	ldr	r3, [r7, #12]
90003e46:	681b      	ldr	r3, [r3, #0]
90003e48:	461a      	mov	r2, r3
90003e4a:	687b      	ldr	r3, [r7, #4]
90003e4c:	01db      	lsls	r3, r3, #7
90003e4e:	4413      	add	r3, r2
90003e50:	3384      	adds	r3, #132	; 0x84
90003e52:	689b      	ldr	r3, [r3, #8]
90003e54:	68fa      	ldr	r2, [r7, #12]
90003e56:	6812      	ldr	r2, [r2, #0]
90003e58:	4611      	mov	r1, r2
90003e5a:	687a      	ldr	r2, [r7, #4]
90003e5c:	01d2      	lsls	r2, r2, #7
90003e5e:	440a      	add	r2, r1
90003e60:	3284      	adds	r2, #132	; 0x84
90003e62:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90003e66:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90003e68:	68bb      	ldr	r3, [r7, #8]
90003e6a:	689a      	ldr	r2, [r3, #8]
90003e6c:	68fb      	ldr	r3, [r7, #12]
90003e6e:	681b      	ldr	r3, [r3, #0]
90003e70:	68db      	ldr	r3, [r3, #12]
90003e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
90003e76:	4413      	add	r3, r2
90003e78:	1c5a      	adds	r2, r3, #1
90003e7a:	68fb      	ldr	r3, [r7, #12]
90003e7c:	681b      	ldr	r3, [r3, #0]
90003e7e:	4619      	mov	r1, r3
90003e80:	687b      	ldr	r3, [r7, #4]
90003e82:	01db      	lsls	r3, r3, #7
90003e84:	440b      	add	r3, r1
90003e86:	3384      	adds	r3, #132	; 0x84
90003e88:	4619      	mov	r1, r3
90003e8a:	69fb      	ldr	r3, [r7, #28]
90003e8c:	4313      	orrs	r3, r2
90003e8e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90003e90:	68fb      	ldr	r3, [r7, #12]
90003e92:	681b      	ldr	r3, [r3, #0]
90003e94:	461a      	mov	r2, r3
90003e96:	687b      	ldr	r3, [r7, #4]
90003e98:	01db      	lsls	r3, r3, #7
90003e9a:	4413      	add	r3, r2
90003e9c:	3384      	adds	r3, #132	; 0x84
90003e9e:	691b      	ldr	r3, [r3, #16]
90003ea0:	68fa      	ldr	r2, [r7, #12]
90003ea2:	6812      	ldr	r2, [r2, #0]
90003ea4:	4611      	mov	r1, r2
90003ea6:	687a      	ldr	r2, [r7, #4]
90003ea8:	01d2      	lsls	r2, r2, #7
90003eaa:	440a      	add	r2, r1
90003eac:	3284      	adds	r2, #132	; 0x84
90003eae:	f023 0307 	bic.w	r3, r3, #7
90003eb2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90003eb4:	68fb      	ldr	r3, [r7, #12]
90003eb6:	681b      	ldr	r3, [r3, #0]
90003eb8:	461a      	mov	r2, r3
90003eba:	687b      	ldr	r3, [r7, #4]
90003ebc:	01db      	lsls	r3, r3, #7
90003ebe:	4413      	add	r3, r2
90003ec0:	3384      	adds	r3, #132	; 0x84
90003ec2:	461a      	mov	r2, r3
90003ec4:	68bb      	ldr	r3, [r7, #8]
90003ec6:	691b      	ldr	r3, [r3, #16]
90003ec8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90003eca:	68bb      	ldr	r3, [r7, #8]
90003ecc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
90003ed0:	021b      	lsls	r3, r3, #8
90003ed2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90003ed4:	68bb      	ldr	r3, [r7, #8]
90003ed6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
90003eda:	041b      	lsls	r3, r3, #16
90003edc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90003ede:	68bb      	ldr	r3, [r7, #8]
90003ee0:	699b      	ldr	r3, [r3, #24]
90003ee2:	061b      	lsls	r3, r3, #24
90003ee4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
90003ee6:	68fb      	ldr	r3, [r7, #12]
90003ee8:	681b      	ldr	r3, [r3, #0]
90003eea:	461a      	mov	r2, r3
90003eec:	687b      	ldr	r3, [r7, #4]
90003eee:	01db      	lsls	r3, r3, #7
90003ef0:	4413      	add	r3, r2
90003ef2:	3384      	adds	r3, #132	; 0x84
90003ef4:	699b      	ldr	r3, [r3, #24]
90003ef6:	68fb      	ldr	r3, [r7, #12]
90003ef8:	681b      	ldr	r3, [r3, #0]
90003efa:	461a      	mov	r2, r3
90003efc:	687b      	ldr	r3, [r7, #4]
90003efe:	01db      	lsls	r3, r3, #7
90003f00:	4413      	add	r3, r2
90003f02:	3384      	adds	r3, #132	; 0x84
90003f04:	461a      	mov	r2, r3
90003f06:	2300      	movs	r3, #0
90003f08:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
90003f0a:	68bb      	ldr	r3, [r7, #8]
90003f0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90003f10:	461a      	mov	r2, r3
90003f12:	69fb      	ldr	r3, [r7, #28]
90003f14:	431a      	orrs	r2, r3
90003f16:	69bb      	ldr	r3, [r7, #24]
90003f18:	431a      	orrs	r2, r3
90003f1a:	68fb      	ldr	r3, [r7, #12]
90003f1c:	681b      	ldr	r3, [r3, #0]
90003f1e:	4619      	mov	r1, r3
90003f20:	687b      	ldr	r3, [r7, #4]
90003f22:	01db      	lsls	r3, r3, #7
90003f24:	440b      	add	r3, r1
90003f26:	3384      	adds	r3, #132	; 0x84
90003f28:	4619      	mov	r1, r3
90003f2a:	697b      	ldr	r3, [r7, #20]
90003f2c:	4313      	orrs	r3, r2
90003f2e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90003f30:	68fb      	ldr	r3, [r7, #12]
90003f32:	681b      	ldr	r3, [r3, #0]
90003f34:	461a      	mov	r2, r3
90003f36:	687b      	ldr	r3, [r7, #4]
90003f38:	01db      	lsls	r3, r3, #7
90003f3a:	4413      	add	r3, r2
90003f3c:	3384      	adds	r3, #132	; 0x84
90003f3e:	695b      	ldr	r3, [r3, #20]
90003f40:	68fa      	ldr	r2, [r7, #12]
90003f42:	6812      	ldr	r2, [r2, #0]
90003f44:	4611      	mov	r1, r2
90003f46:	687a      	ldr	r2, [r7, #4]
90003f48:	01d2      	lsls	r2, r2, #7
90003f4a:	440a      	add	r2, r1
90003f4c:	3284      	adds	r2, #132	; 0x84
90003f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
90003f52:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90003f54:	68fb      	ldr	r3, [r7, #12]
90003f56:	681b      	ldr	r3, [r3, #0]
90003f58:	461a      	mov	r2, r3
90003f5a:	687b      	ldr	r3, [r7, #4]
90003f5c:	01db      	lsls	r3, r3, #7
90003f5e:	4413      	add	r3, r2
90003f60:	3384      	adds	r3, #132	; 0x84
90003f62:	461a      	mov	r2, r3
90003f64:	68bb      	ldr	r3, [r7, #8]
90003f66:	695b      	ldr	r3, [r3, #20]
90003f68:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90003f6a:	68fb      	ldr	r3, [r7, #12]
90003f6c:	681b      	ldr	r3, [r3, #0]
90003f6e:	461a      	mov	r2, r3
90003f70:	687b      	ldr	r3, [r7, #4]
90003f72:	01db      	lsls	r3, r3, #7
90003f74:	4413      	add	r3, r2
90003f76:	3384      	adds	r3, #132	; 0x84
90003f78:	69da      	ldr	r2, [r3, #28]
90003f7a:	68fb      	ldr	r3, [r7, #12]
90003f7c:	681b      	ldr	r3, [r3, #0]
90003f7e:	4619      	mov	r1, r3
90003f80:	687b      	ldr	r3, [r7, #4]
90003f82:	01db      	lsls	r3, r3, #7
90003f84:	440b      	add	r3, r1
90003f86:	3384      	adds	r3, #132	; 0x84
90003f88:	4619      	mov	r1, r3
90003f8a:	4b58      	ldr	r3, [pc, #352]	; (900040ec <LTDC_SetConfig+0x32c>)
90003f8c:	4013      	ands	r3, r2
90003f8e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90003f90:	68bb      	ldr	r3, [r7, #8]
90003f92:	69da      	ldr	r2, [r3, #28]
90003f94:	68bb      	ldr	r3, [r7, #8]
90003f96:	6a1b      	ldr	r3, [r3, #32]
90003f98:	68f9      	ldr	r1, [r7, #12]
90003f9a:	6809      	ldr	r1, [r1, #0]
90003f9c:	4608      	mov	r0, r1
90003f9e:	6879      	ldr	r1, [r7, #4]
90003fa0:	01c9      	lsls	r1, r1, #7
90003fa2:	4401      	add	r1, r0
90003fa4:	3184      	adds	r1, #132	; 0x84
90003fa6:	4313      	orrs	r3, r2
90003fa8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
90003faa:	68fb      	ldr	r3, [r7, #12]
90003fac:	681b      	ldr	r3, [r3, #0]
90003fae:	461a      	mov	r2, r3
90003fb0:	687b      	ldr	r3, [r7, #4]
90003fb2:	01db      	lsls	r3, r3, #7
90003fb4:	4413      	add	r3, r2
90003fb6:	3384      	adds	r3, #132	; 0x84
90003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003fba:	68fb      	ldr	r3, [r7, #12]
90003fbc:	681b      	ldr	r3, [r3, #0]
90003fbe:	461a      	mov	r2, r3
90003fc0:	687b      	ldr	r3, [r7, #4]
90003fc2:	01db      	lsls	r3, r3, #7
90003fc4:	4413      	add	r3, r2
90003fc6:	3384      	adds	r3, #132	; 0x84
90003fc8:	461a      	mov	r2, r3
90003fca:	2300      	movs	r3, #0
90003fcc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
90003fce:	68fb      	ldr	r3, [r7, #12]
90003fd0:	681b      	ldr	r3, [r3, #0]
90003fd2:	461a      	mov	r2, r3
90003fd4:	687b      	ldr	r3, [r7, #4]
90003fd6:	01db      	lsls	r3, r3, #7
90003fd8:	4413      	add	r3, r2
90003fda:	3384      	adds	r3, #132	; 0x84
90003fdc:	461a      	mov	r2, r3
90003fde:	68bb      	ldr	r3, [r7, #8]
90003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003fe2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90003fe4:	68bb      	ldr	r3, [r7, #8]
90003fe6:	691b      	ldr	r3, [r3, #16]
90003fe8:	2b00      	cmp	r3, #0
90003fea:	d102      	bne.n	90003ff2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
90003fec:	2304      	movs	r3, #4
90003fee:	61fb      	str	r3, [r7, #28]
90003ff0:	e01b      	b.n	9000402a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90003ff2:	68bb      	ldr	r3, [r7, #8]
90003ff4:	691b      	ldr	r3, [r3, #16]
90003ff6:	2b01      	cmp	r3, #1
90003ff8:	d102      	bne.n	90004000 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
90003ffa:	2303      	movs	r3, #3
90003ffc:	61fb      	str	r3, [r7, #28]
90003ffe:	e014      	b.n	9000402a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90004000:	68bb      	ldr	r3, [r7, #8]
90004002:	691b      	ldr	r3, [r3, #16]
90004004:	2b04      	cmp	r3, #4
90004006:	d00b      	beq.n	90004020 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90004008:	68bb      	ldr	r3, [r7, #8]
9000400a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
9000400c:	2b02      	cmp	r3, #2
9000400e:	d007      	beq.n	90004020 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90004010:	68bb      	ldr	r3, [r7, #8]
90004012:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90004014:	2b03      	cmp	r3, #3
90004016:	d003      	beq.n	90004020 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90004018:	68bb      	ldr	r3, [r7, #8]
9000401a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
9000401c:	2b07      	cmp	r3, #7
9000401e:	d102      	bne.n	90004026 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
90004020:	2302      	movs	r3, #2
90004022:	61fb      	str	r3, [r7, #28]
90004024:	e001      	b.n	9000402a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
90004026:	2301      	movs	r3, #1
90004028:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000402a:	68fb      	ldr	r3, [r7, #12]
9000402c:	681b      	ldr	r3, [r3, #0]
9000402e:	461a      	mov	r2, r3
90004030:	687b      	ldr	r3, [r7, #4]
90004032:	01db      	lsls	r3, r3, #7
90004034:	4413      	add	r3, r2
90004036:	3384      	adds	r3, #132	; 0x84
90004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000403a:	68fa      	ldr	r2, [r7, #12]
9000403c:	6812      	ldr	r2, [r2, #0]
9000403e:	4611      	mov	r1, r2
90004040:	687a      	ldr	r2, [r7, #4]
90004042:	01d2      	lsls	r2, r2, #7
90004044:	440a      	add	r2, r1
90004046:	3284      	adds	r2, #132	; 0x84
90004048:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
9000404c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000404e:	68bb      	ldr	r3, [r7, #8]
90004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004052:	69fa      	ldr	r2, [r7, #28]
90004054:	fb02 f303 	mul.w	r3, r2, r3
90004058:	041a      	lsls	r2, r3, #16
9000405a:	68bb      	ldr	r3, [r7, #8]
9000405c:	6859      	ldr	r1, [r3, #4]
9000405e:	68bb      	ldr	r3, [r7, #8]
90004060:	681b      	ldr	r3, [r3, #0]
90004062:	1acb      	subs	r3, r1, r3
90004064:	69f9      	ldr	r1, [r7, #28]
90004066:	fb01 f303 	mul.w	r3, r1, r3
9000406a:	3307      	adds	r3, #7
9000406c:	68f9      	ldr	r1, [r7, #12]
9000406e:	6809      	ldr	r1, [r1, #0]
90004070:	4608      	mov	r0, r1
90004072:	6879      	ldr	r1, [r7, #4]
90004074:	01c9      	lsls	r1, r1, #7
90004076:	4401      	add	r1, r0
90004078:	3184      	adds	r1, #132	; 0x84
9000407a:	4313      	orrs	r3, r2
9000407c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000407e:	68fb      	ldr	r3, [r7, #12]
90004080:	681b      	ldr	r3, [r3, #0]
90004082:	461a      	mov	r2, r3
90004084:	687b      	ldr	r3, [r7, #4]
90004086:	01db      	lsls	r3, r3, #7
90004088:	4413      	add	r3, r2
9000408a:	3384      	adds	r3, #132	; 0x84
9000408c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000408e:	68fb      	ldr	r3, [r7, #12]
90004090:	681b      	ldr	r3, [r3, #0]
90004092:	4619      	mov	r1, r3
90004094:	687b      	ldr	r3, [r7, #4]
90004096:	01db      	lsls	r3, r3, #7
90004098:	440b      	add	r3, r1
9000409a:	3384      	adds	r3, #132	; 0x84
9000409c:	4619      	mov	r1, r3
9000409e:	4b14      	ldr	r3, [pc, #80]	; (900040f0 <LTDC_SetConfig+0x330>)
900040a0:	4013      	ands	r3, r2
900040a2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900040a4:	68fb      	ldr	r3, [r7, #12]
900040a6:	681b      	ldr	r3, [r3, #0]
900040a8:	461a      	mov	r2, r3
900040aa:	687b      	ldr	r3, [r7, #4]
900040ac:	01db      	lsls	r3, r3, #7
900040ae:	4413      	add	r3, r2
900040b0:	3384      	adds	r3, #132	; 0x84
900040b2:	461a      	mov	r2, r3
900040b4:	68bb      	ldr	r3, [r7, #8]
900040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900040b8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900040ba:	68fb      	ldr	r3, [r7, #12]
900040bc:	681b      	ldr	r3, [r3, #0]
900040be:	461a      	mov	r2, r3
900040c0:	687b      	ldr	r3, [r7, #4]
900040c2:	01db      	lsls	r3, r3, #7
900040c4:	4413      	add	r3, r2
900040c6:	3384      	adds	r3, #132	; 0x84
900040c8:	681b      	ldr	r3, [r3, #0]
900040ca:	68fa      	ldr	r2, [r7, #12]
900040cc:	6812      	ldr	r2, [r2, #0]
900040ce:	4611      	mov	r1, r2
900040d0:	687a      	ldr	r2, [r7, #4]
900040d2:	01d2      	lsls	r2, r2, #7
900040d4:	440a      	add	r2, r1
900040d6:	3284      	adds	r2, #132	; 0x84
900040d8:	f043 0301 	orr.w	r3, r3, #1
900040dc:	6013      	str	r3, [r2, #0]
}
900040de:	bf00      	nop
900040e0:	3724      	adds	r7, #36	; 0x24
900040e2:	46bd      	mov	sp, r7
900040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
900040e8:	4770      	bx	lr
900040ea:	bf00      	nop
900040ec:	fffff8f8 	.word	0xfffff8f8
900040f0:	fffff800 	.word	0xfffff800

900040f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
900040f4:	b580      	push	{r7, lr}
900040f6:	b084      	sub	sp, #16
900040f8:	af00      	add	r7, sp, #0
900040fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
900040fc:	4b19      	ldr	r3, [pc, #100]	; (90004164 <HAL_PWREx_ConfigSupply+0x70>)
900040fe:	68db      	ldr	r3, [r3, #12]
90004100:	f003 0304 	and.w	r3, r3, #4
90004104:	2b04      	cmp	r3, #4
90004106:	d00a      	beq.n	9000411e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90004108:	4b16      	ldr	r3, [pc, #88]	; (90004164 <HAL_PWREx_ConfigSupply+0x70>)
9000410a:	68db      	ldr	r3, [r3, #12]
9000410c:	f003 0307 	and.w	r3, r3, #7
90004110:	687a      	ldr	r2, [r7, #4]
90004112:	429a      	cmp	r2, r3
90004114:	d001      	beq.n	9000411a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
90004116:	2301      	movs	r3, #1
90004118:	e01f      	b.n	9000415a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
9000411a:	2300      	movs	r3, #0
9000411c:	e01d      	b.n	9000415a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000411e:	4b11      	ldr	r3, [pc, #68]	; (90004164 <HAL_PWREx_ConfigSupply+0x70>)
90004120:	68db      	ldr	r3, [r3, #12]
90004122:	f023 0207 	bic.w	r2, r3, #7
90004126:	490f      	ldr	r1, [pc, #60]	; (90004164 <HAL_PWREx_ConfigSupply+0x70>)
90004128:	687b      	ldr	r3, [r7, #4]
9000412a:	4313      	orrs	r3, r2
9000412c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
9000412e:	f7fd ff3f 	bl	90001fb0 <HAL_GetTick>
90004132:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90004134:	e009      	b.n	9000414a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
90004136:	f7fd ff3b 	bl	90001fb0 <HAL_GetTick>
9000413a:	4602      	mov	r2, r0
9000413c:	68fb      	ldr	r3, [r7, #12]
9000413e:	1ad3      	subs	r3, r2, r3
90004140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90004144:	d901      	bls.n	9000414a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
90004146:	2301      	movs	r3, #1
90004148:	e007      	b.n	9000415a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000414a:	4b06      	ldr	r3, [pc, #24]	; (90004164 <HAL_PWREx_ConfigSupply+0x70>)
9000414c:	685b      	ldr	r3, [r3, #4]
9000414e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90004152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90004156:	d1ee      	bne.n	90004136 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
90004158:	2300      	movs	r3, #0
}
9000415a:	4618      	mov	r0, r3
9000415c:	3710      	adds	r7, #16
9000415e:	46bd      	mov	sp, r7
90004160:	bd80      	pop	{r7, pc}
90004162:	bf00      	nop
90004164:	58024800 	.word	0x58024800

90004168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90004168:	b580      	push	{r7, lr}
9000416a:	b08c      	sub	sp, #48	; 0x30
9000416c:	af00      	add	r7, sp, #0
9000416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
90004170:	687b      	ldr	r3, [r7, #4]
90004172:	2b00      	cmp	r3, #0
90004174:	d102      	bne.n	9000417c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90004176:	2301      	movs	r3, #1
90004178:	f000 bc1d 	b.w	900049b6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000417c:	687b      	ldr	r3, [r7, #4]
9000417e:	681b      	ldr	r3, [r3, #0]
90004180:	f003 0301 	and.w	r3, r3, #1
90004184:	2b00      	cmp	r3, #0
90004186:	f000 8087 	beq.w	90004298 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000418a:	4b99      	ldr	r3, [pc, #612]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
9000418c:	691b      	ldr	r3, [r3, #16]
9000418e:	f003 0338 	and.w	r3, r3, #56	; 0x38
90004192:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90004194:	4b96      	ldr	r3, [pc, #600]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
90004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004198:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000419c:	2b10      	cmp	r3, #16
9000419e:	d007      	beq.n	900041b0 <HAL_RCC_OscConfig+0x48>
900041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900041a2:	2b18      	cmp	r3, #24
900041a4:	d110      	bne.n	900041c8 <HAL_RCC_OscConfig+0x60>
900041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
900041a8:	f003 0303 	and.w	r3, r3, #3
900041ac:	2b02      	cmp	r3, #2
900041ae:	d10b      	bne.n	900041c8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900041b0:	4b8f      	ldr	r3, [pc, #572]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900041b2:	681b      	ldr	r3, [r3, #0]
900041b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900041b8:	2b00      	cmp	r3, #0
900041ba:	d06c      	beq.n	90004296 <HAL_RCC_OscConfig+0x12e>
900041bc:	687b      	ldr	r3, [r7, #4]
900041be:	685b      	ldr	r3, [r3, #4]
900041c0:	2b00      	cmp	r3, #0
900041c2:	d168      	bne.n	90004296 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
900041c4:	2301      	movs	r3, #1
900041c6:	e3f6      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
900041c8:	687b      	ldr	r3, [r7, #4]
900041ca:	685b      	ldr	r3, [r3, #4]
900041cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900041d0:	d106      	bne.n	900041e0 <HAL_RCC_OscConfig+0x78>
900041d2:	4b87      	ldr	r3, [pc, #540]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900041d4:	681b      	ldr	r3, [r3, #0]
900041d6:	4a86      	ldr	r2, [pc, #536]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900041dc:	6013      	str	r3, [r2, #0]
900041de:	e02e      	b.n	9000423e <HAL_RCC_OscConfig+0xd6>
900041e0:	687b      	ldr	r3, [r7, #4]
900041e2:	685b      	ldr	r3, [r3, #4]
900041e4:	2b00      	cmp	r3, #0
900041e6:	d10c      	bne.n	90004202 <HAL_RCC_OscConfig+0x9a>
900041e8:	4b81      	ldr	r3, [pc, #516]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900041ea:	681b      	ldr	r3, [r3, #0]
900041ec:	4a80      	ldr	r2, [pc, #512]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900041ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900041f2:	6013      	str	r3, [r2, #0]
900041f4:	4b7e      	ldr	r3, [pc, #504]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900041f6:	681b      	ldr	r3, [r3, #0]
900041f8:	4a7d      	ldr	r2, [pc, #500]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900041fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900041fe:	6013      	str	r3, [r2, #0]
90004200:	e01d      	b.n	9000423e <HAL_RCC_OscConfig+0xd6>
90004202:	687b      	ldr	r3, [r7, #4]
90004204:	685b      	ldr	r3, [r3, #4]
90004206:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000420a:	d10c      	bne.n	90004226 <HAL_RCC_OscConfig+0xbe>
9000420c:	4b78      	ldr	r3, [pc, #480]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
9000420e:	681b      	ldr	r3, [r3, #0]
90004210:	4a77      	ldr	r2, [pc, #476]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
90004212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90004216:	6013      	str	r3, [r2, #0]
90004218:	4b75      	ldr	r3, [pc, #468]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
9000421a:	681b      	ldr	r3, [r3, #0]
9000421c:	4a74      	ldr	r2, [pc, #464]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
9000421e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90004222:	6013      	str	r3, [r2, #0]
90004224:	e00b      	b.n	9000423e <HAL_RCC_OscConfig+0xd6>
90004226:	4b72      	ldr	r3, [pc, #456]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
90004228:	681b      	ldr	r3, [r3, #0]
9000422a:	4a71      	ldr	r2, [pc, #452]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
9000422c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90004230:	6013      	str	r3, [r2, #0]
90004232:	4b6f      	ldr	r3, [pc, #444]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
90004234:	681b      	ldr	r3, [r3, #0]
90004236:	4a6e      	ldr	r2, [pc, #440]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
90004238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000423c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000423e:	687b      	ldr	r3, [r7, #4]
90004240:	685b      	ldr	r3, [r3, #4]
90004242:	2b00      	cmp	r3, #0
90004244:	d013      	beq.n	9000426e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004246:	f7fd feb3 	bl	90001fb0 <HAL_GetTick>
9000424a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000424c:	e008      	b.n	90004260 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
9000424e:	f7fd feaf 	bl	90001fb0 <HAL_GetTick>
90004252:	4602      	mov	r2, r0
90004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004256:	1ad3      	subs	r3, r2, r3
90004258:	2b64      	cmp	r3, #100	; 0x64
9000425a:	d901      	bls.n	90004260 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
9000425c:	2303      	movs	r3, #3
9000425e:	e3aa      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90004260:	4b63      	ldr	r3, [pc, #396]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
90004262:	681b      	ldr	r3, [r3, #0]
90004264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90004268:	2b00      	cmp	r3, #0
9000426a:	d0f0      	beq.n	9000424e <HAL_RCC_OscConfig+0xe6>
9000426c:	e014      	b.n	90004298 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000426e:	f7fd fe9f 	bl	90001fb0 <HAL_GetTick>
90004272:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90004274:	e008      	b.n	90004288 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
90004276:	f7fd fe9b 	bl	90001fb0 <HAL_GetTick>
9000427a:	4602      	mov	r2, r0
9000427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000427e:	1ad3      	subs	r3, r2, r3
90004280:	2b64      	cmp	r3, #100	; 0x64
90004282:	d901      	bls.n	90004288 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
90004284:	2303      	movs	r3, #3
90004286:	e396      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90004288:	4b59      	ldr	r3, [pc, #356]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
9000428a:	681b      	ldr	r3, [r3, #0]
9000428c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90004290:	2b00      	cmp	r3, #0
90004292:	d1f0      	bne.n	90004276 <HAL_RCC_OscConfig+0x10e>
90004294:	e000      	b.n	90004298 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90004296:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90004298:	687b      	ldr	r3, [r7, #4]
9000429a:	681b      	ldr	r3, [r3, #0]
9000429c:	f003 0302 	and.w	r3, r3, #2
900042a0:	2b00      	cmp	r3, #0
900042a2:	f000 80cb 	beq.w	9000443c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900042a6:	4b52      	ldr	r3, [pc, #328]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900042a8:	691b      	ldr	r3, [r3, #16]
900042aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
900042ae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900042b0:	4b4f      	ldr	r3, [pc, #316]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900042b4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
900042b6:	6a3b      	ldr	r3, [r7, #32]
900042b8:	2b00      	cmp	r3, #0
900042ba:	d007      	beq.n	900042cc <HAL_RCC_OscConfig+0x164>
900042bc:	6a3b      	ldr	r3, [r7, #32]
900042be:	2b18      	cmp	r3, #24
900042c0:	d156      	bne.n	90004370 <HAL_RCC_OscConfig+0x208>
900042c2:	69fb      	ldr	r3, [r7, #28]
900042c4:	f003 0303 	and.w	r3, r3, #3
900042c8:	2b00      	cmp	r3, #0
900042ca:	d151      	bne.n	90004370 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900042cc:	4b48      	ldr	r3, [pc, #288]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900042ce:	681b      	ldr	r3, [r3, #0]
900042d0:	f003 0304 	and.w	r3, r3, #4
900042d4:	2b00      	cmp	r3, #0
900042d6:	d005      	beq.n	900042e4 <HAL_RCC_OscConfig+0x17c>
900042d8:	687b      	ldr	r3, [r7, #4]
900042da:	68db      	ldr	r3, [r3, #12]
900042dc:	2b00      	cmp	r3, #0
900042de:	d101      	bne.n	900042e4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
900042e0:	2301      	movs	r3, #1
900042e2:	e368      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
900042e4:	4b42      	ldr	r3, [pc, #264]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900042e6:	681b      	ldr	r3, [r3, #0]
900042e8:	f023 0219 	bic.w	r2, r3, #25
900042ec:	687b      	ldr	r3, [r7, #4]
900042ee:	68db      	ldr	r3, [r3, #12]
900042f0:	493f      	ldr	r1, [pc, #252]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900042f2:	4313      	orrs	r3, r2
900042f4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
900042f6:	f7fd fe5b 	bl	90001fb0 <HAL_GetTick>
900042fa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900042fc:	e008      	b.n	90004310 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
900042fe:	f7fd fe57 	bl	90001fb0 <HAL_GetTick>
90004302:	4602      	mov	r2, r0
90004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004306:	1ad3      	subs	r3, r2, r3
90004308:	2b02      	cmp	r3, #2
9000430a:	d901      	bls.n	90004310 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
9000430c:	2303      	movs	r3, #3
9000430e:	e352      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90004310:	4b37      	ldr	r3, [pc, #220]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
90004312:	681b      	ldr	r3, [r3, #0]
90004314:	f003 0304 	and.w	r3, r3, #4
90004318:	2b00      	cmp	r3, #0
9000431a:	d0f0      	beq.n	900042fe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000431c:	f7fd fe78 	bl	90002010 <HAL_GetREVID>
90004320:	4603      	mov	r3, r0
90004322:	f241 0203 	movw	r2, #4099	; 0x1003
90004326:	4293      	cmp	r3, r2
90004328:	d817      	bhi.n	9000435a <HAL_RCC_OscConfig+0x1f2>
9000432a:	687b      	ldr	r3, [r7, #4]
9000432c:	691b      	ldr	r3, [r3, #16]
9000432e:	2b40      	cmp	r3, #64	; 0x40
90004330:	d108      	bne.n	90004344 <HAL_RCC_OscConfig+0x1dc>
90004332:	4b2f      	ldr	r3, [pc, #188]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
90004334:	685b      	ldr	r3, [r3, #4]
90004336:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000433a:	4a2d      	ldr	r2, [pc, #180]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
9000433c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90004340:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90004342:	e07b      	b.n	9000443c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90004344:	4b2a      	ldr	r3, [pc, #168]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
90004346:	685b      	ldr	r3, [r3, #4]
90004348:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
9000434c:	687b      	ldr	r3, [r7, #4]
9000434e:	691b      	ldr	r3, [r3, #16]
90004350:	031b      	lsls	r3, r3, #12
90004352:	4927      	ldr	r1, [pc, #156]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
90004354:	4313      	orrs	r3, r2
90004356:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90004358:	e070      	b.n	9000443c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000435a:	4b25      	ldr	r3, [pc, #148]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
9000435c:	685b      	ldr	r3, [r3, #4]
9000435e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
90004362:	687b      	ldr	r3, [r7, #4]
90004364:	691b      	ldr	r3, [r3, #16]
90004366:	061b      	lsls	r3, r3, #24
90004368:	4921      	ldr	r1, [pc, #132]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
9000436a:	4313      	orrs	r3, r2
9000436c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000436e:	e065      	b.n	9000443c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
90004370:	687b      	ldr	r3, [r7, #4]
90004372:	68db      	ldr	r3, [r3, #12]
90004374:	2b00      	cmp	r3, #0
90004376:	d048      	beq.n	9000440a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90004378:	4b1d      	ldr	r3, [pc, #116]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
9000437a:	681b      	ldr	r3, [r3, #0]
9000437c:	f023 0219 	bic.w	r2, r3, #25
90004380:	687b      	ldr	r3, [r7, #4]
90004382:	68db      	ldr	r3, [r3, #12]
90004384:	491a      	ldr	r1, [pc, #104]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
90004386:	4313      	orrs	r3, r2
90004388:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000438a:	f7fd fe11 	bl	90001fb0 <HAL_GetTick>
9000438e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90004390:	e008      	b.n	900043a4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
90004392:	f7fd fe0d 	bl	90001fb0 <HAL_GetTick>
90004396:	4602      	mov	r2, r0
90004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000439a:	1ad3      	subs	r3, r2, r3
9000439c:	2b02      	cmp	r3, #2
9000439e:	d901      	bls.n	900043a4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
900043a0:	2303      	movs	r3, #3
900043a2:	e308      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900043a4:	4b12      	ldr	r3, [pc, #72]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900043a6:	681b      	ldr	r3, [r3, #0]
900043a8:	f003 0304 	and.w	r3, r3, #4
900043ac:	2b00      	cmp	r3, #0
900043ae:	d0f0      	beq.n	90004392 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900043b0:	f7fd fe2e 	bl	90002010 <HAL_GetREVID>
900043b4:	4603      	mov	r3, r0
900043b6:	f241 0203 	movw	r2, #4099	; 0x1003
900043ba:	4293      	cmp	r3, r2
900043bc:	d81a      	bhi.n	900043f4 <HAL_RCC_OscConfig+0x28c>
900043be:	687b      	ldr	r3, [r7, #4]
900043c0:	691b      	ldr	r3, [r3, #16]
900043c2:	2b40      	cmp	r3, #64	; 0x40
900043c4:	d108      	bne.n	900043d8 <HAL_RCC_OscConfig+0x270>
900043c6:	4b0a      	ldr	r3, [pc, #40]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900043c8:	685b      	ldr	r3, [r3, #4]
900043ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
900043ce:	4a08      	ldr	r2, [pc, #32]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900043d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900043d4:	6053      	str	r3, [r2, #4]
900043d6:	e031      	b.n	9000443c <HAL_RCC_OscConfig+0x2d4>
900043d8:	4b05      	ldr	r3, [pc, #20]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900043da:	685b      	ldr	r3, [r3, #4]
900043dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
900043e0:	687b      	ldr	r3, [r7, #4]
900043e2:	691b      	ldr	r3, [r3, #16]
900043e4:	031b      	lsls	r3, r3, #12
900043e6:	4902      	ldr	r1, [pc, #8]	; (900043f0 <HAL_RCC_OscConfig+0x288>)
900043e8:	4313      	orrs	r3, r2
900043ea:	604b      	str	r3, [r1, #4]
900043ec:	e026      	b.n	9000443c <HAL_RCC_OscConfig+0x2d4>
900043ee:	bf00      	nop
900043f0:	58024400 	.word	0x58024400
900043f4:	4b9a      	ldr	r3, [pc, #616]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900043f6:	685b      	ldr	r3, [r3, #4]
900043f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
900043fc:	687b      	ldr	r3, [r7, #4]
900043fe:	691b      	ldr	r3, [r3, #16]
90004400:	061b      	lsls	r3, r3, #24
90004402:	4997      	ldr	r1, [pc, #604]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004404:	4313      	orrs	r3, r2
90004406:	604b      	str	r3, [r1, #4]
90004408:	e018      	b.n	9000443c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
9000440a:	4b95      	ldr	r3, [pc, #596]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
9000440c:	681b      	ldr	r3, [r3, #0]
9000440e:	4a94      	ldr	r2, [pc, #592]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004410:	f023 0301 	bic.w	r3, r3, #1
90004414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004416:	f7fd fdcb 	bl	90001fb0 <HAL_GetTick>
9000441a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000441c:	e008      	b.n	90004430 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
9000441e:	f7fd fdc7 	bl	90001fb0 <HAL_GetTick>
90004422:	4602      	mov	r2, r0
90004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004426:	1ad3      	subs	r3, r2, r3
90004428:	2b02      	cmp	r3, #2
9000442a:	d901      	bls.n	90004430 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
9000442c:	2303      	movs	r3, #3
9000442e:	e2c2      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90004430:	4b8b      	ldr	r3, [pc, #556]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004432:	681b      	ldr	r3, [r3, #0]
90004434:	f003 0304 	and.w	r3, r3, #4
90004438:	2b00      	cmp	r3, #0
9000443a:	d1f0      	bne.n	9000441e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000443c:	687b      	ldr	r3, [r7, #4]
9000443e:	681b      	ldr	r3, [r3, #0]
90004440:	f003 0310 	and.w	r3, r3, #16
90004444:	2b00      	cmp	r3, #0
90004446:	f000 80a9 	beq.w	9000459c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000444a:	4b85      	ldr	r3, [pc, #532]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
9000444c:	691b      	ldr	r3, [r3, #16]
9000444e:	f003 0338 	and.w	r3, r3, #56	; 0x38
90004452:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90004454:	4b82      	ldr	r3, [pc, #520]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004458:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000445a:	69bb      	ldr	r3, [r7, #24]
9000445c:	2b08      	cmp	r3, #8
9000445e:	d007      	beq.n	90004470 <HAL_RCC_OscConfig+0x308>
90004460:	69bb      	ldr	r3, [r7, #24]
90004462:	2b18      	cmp	r3, #24
90004464:	d13a      	bne.n	900044dc <HAL_RCC_OscConfig+0x374>
90004466:	697b      	ldr	r3, [r7, #20]
90004468:	f003 0303 	and.w	r3, r3, #3
9000446c:	2b01      	cmp	r3, #1
9000446e:	d135      	bne.n	900044dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90004470:	4b7b      	ldr	r3, [pc, #492]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004472:	681b      	ldr	r3, [r3, #0]
90004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004478:	2b00      	cmp	r3, #0
9000447a:	d005      	beq.n	90004488 <HAL_RCC_OscConfig+0x320>
9000447c:	687b      	ldr	r3, [r7, #4]
9000447e:	69db      	ldr	r3, [r3, #28]
90004480:	2b80      	cmp	r3, #128	; 0x80
90004482:	d001      	beq.n	90004488 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90004484:	2301      	movs	r3, #1
90004486:	e296      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90004488:	f7fd fdc2 	bl	90002010 <HAL_GetREVID>
9000448c:	4603      	mov	r3, r0
9000448e:	f241 0203 	movw	r2, #4099	; 0x1003
90004492:	4293      	cmp	r3, r2
90004494:	d817      	bhi.n	900044c6 <HAL_RCC_OscConfig+0x35e>
90004496:	687b      	ldr	r3, [r7, #4]
90004498:	6a1b      	ldr	r3, [r3, #32]
9000449a:	2b20      	cmp	r3, #32
9000449c:	d108      	bne.n	900044b0 <HAL_RCC_OscConfig+0x348>
9000449e:	4b70      	ldr	r3, [pc, #448]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900044a0:	685b      	ldr	r3, [r3, #4]
900044a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
900044a6:	4a6e      	ldr	r2, [pc, #440]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900044a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
900044ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900044ae:	e075      	b.n	9000459c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900044b0:	4b6b      	ldr	r3, [pc, #428]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900044b2:	685b      	ldr	r3, [r3, #4]
900044b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
900044b8:	687b      	ldr	r3, [r7, #4]
900044ba:	6a1b      	ldr	r3, [r3, #32]
900044bc:	069b      	lsls	r3, r3, #26
900044be:	4968      	ldr	r1, [pc, #416]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900044c0:	4313      	orrs	r3, r2
900044c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900044c4:	e06a      	b.n	9000459c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900044c6:	4b66      	ldr	r3, [pc, #408]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900044c8:	68db      	ldr	r3, [r3, #12]
900044ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
900044ce:	687b      	ldr	r3, [r7, #4]
900044d0:	6a1b      	ldr	r3, [r3, #32]
900044d2:	061b      	lsls	r3, r3, #24
900044d4:	4962      	ldr	r1, [pc, #392]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900044d6:	4313      	orrs	r3, r2
900044d8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900044da:	e05f      	b.n	9000459c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
900044dc:	687b      	ldr	r3, [r7, #4]
900044de:	69db      	ldr	r3, [r3, #28]
900044e0:	2b00      	cmp	r3, #0
900044e2:	d042      	beq.n	9000456a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
900044e4:	4b5e      	ldr	r3, [pc, #376]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900044e6:	681b      	ldr	r3, [r3, #0]
900044e8:	4a5d      	ldr	r2, [pc, #372]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900044ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900044ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900044f0:	f7fd fd5e 	bl	90001fb0 <HAL_GetTick>
900044f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900044f6:	e008      	b.n	9000450a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
900044f8:	f7fd fd5a 	bl	90001fb0 <HAL_GetTick>
900044fc:	4602      	mov	r2, r0
900044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004500:	1ad3      	subs	r3, r2, r3
90004502:	2b02      	cmp	r3, #2
90004504:	d901      	bls.n	9000450a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90004506:	2303      	movs	r3, #3
90004508:	e255      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000450a:	4b55      	ldr	r3, [pc, #340]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
9000450c:	681b      	ldr	r3, [r3, #0]
9000450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004512:	2b00      	cmp	r3, #0
90004514:	d0f0      	beq.n	900044f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90004516:	f7fd fd7b 	bl	90002010 <HAL_GetREVID>
9000451a:	4603      	mov	r3, r0
9000451c:	f241 0203 	movw	r2, #4099	; 0x1003
90004520:	4293      	cmp	r3, r2
90004522:	d817      	bhi.n	90004554 <HAL_RCC_OscConfig+0x3ec>
90004524:	687b      	ldr	r3, [r7, #4]
90004526:	6a1b      	ldr	r3, [r3, #32]
90004528:	2b20      	cmp	r3, #32
9000452a:	d108      	bne.n	9000453e <HAL_RCC_OscConfig+0x3d6>
9000452c:	4b4c      	ldr	r3, [pc, #304]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
9000452e:	685b      	ldr	r3, [r3, #4]
90004530:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90004534:	4a4a      	ldr	r2, [pc, #296]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004536:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000453a:	6053      	str	r3, [r2, #4]
9000453c:	e02e      	b.n	9000459c <HAL_RCC_OscConfig+0x434>
9000453e:	4b48      	ldr	r3, [pc, #288]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004540:	685b      	ldr	r3, [r3, #4]
90004542:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
90004546:	687b      	ldr	r3, [r7, #4]
90004548:	6a1b      	ldr	r3, [r3, #32]
9000454a:	069b      	lsls	r3, r3, #26
9000454c:	4944      	ldr	r1, [pc, #272]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
9000454e:	4313      	orrs	r3, r2
90004550:	604b      	str	r3, [r1, #4]
90004552:	e023      	b.n	9000459c <HAL_RCC_OscConfig+0x434>
90004554:	4b42      	ldr	r3, [pc, #264]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004556:	68db      	ldr	r3, [r3, #12]
90004558:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
9000455c:	687b      	ldr	r3, [r7, #4]
9000455e:	6a1b      	ldr	r3, [r3, #32]
90004560:	061b      	lsls	r3, r3, #24
90004562:	493f      	ldr	r1, [pc, #252]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004564:	4313      	orrs	r3, r2
90004566:	60cb      	str	r3, [r1, #12]
90004568:	e018      	b.n	9000459c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
9000456a:	4b3d      	ldr	r3, [pc, #244]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
9000456c:	681b      	ldr	r3, [r3, #0]
9000456e:	4a3c      	ldr	r2, [pc, #240]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90004574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004576:	f7fd fd1b 	bl	90001fb0 <HAL_GetTick>
9000457a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000457c:	e008      	b.n	90004590 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
9000457e:	f7fd fd17 	bl	90001fb0 <HAL_GetTick>
90004582:	4602      	mov	r2, r0
90004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004586:	1ad3      	subs	r3, r2, r3
90004588:	2b02      	cmp	r3, #2
9000458a:	d901      	bls.n	90004590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
9000458c:	2303      	movs	r3, #3
9000458e:	e212      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90004590:	4b33      	ldr	r3, [pc, #204]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004592:	681b      	ldr	r3, [r3, #0]
90004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004598:	2b00      	cmp	r3, #0
9000459a:	d1f0      	bne.n	9000457e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000459c:	687b      	ldr	r3, [r7, #4]
9000459e:	681b      	ldr	r3, [r3, #0]
900045a0:	f003 0308 	and.w	r3, r3, #8
900045a4:	2b00      	cmp	r3, #0
900045a6:	d036      	beq.n	90004616 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
900045a8:	687b      	ldr	r3, [r7, #4]
900045aa:	695b      	ldr	r3, [r3, #20]
900045ac:	2b00      	cmp	r3, #0
900045ae:	d019      	beq.n	900045e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
900045b0:	4b2b      	ldr	r3, [pc, #172]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900045b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900045b4:	4a2a      	ldr	r2, [pc, #168]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900045b6:	f043 0301 	orr.w	r3, r3, #1
900045ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900045bc:	f7fd fcf8 	bl	90001fb0 <HAL_GetTick>
900045c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900045c2:	e008      	b.n	900045d6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
900045c4:	f7fd fcf4 	bl	90001fb0 <HAL_GetTick>
900045c8:	4602      	mov	r2, r0
900045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900045cc:	1ad3      	subs	r3, r2, r3
900045ce:	2b02      	cmp	r3, #2
900045d0:	d901      	bls.n	900045d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
900045d2:	2303      	movs	r3, #3
900045d4:	e1ef      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900045d6:	4b22      	ldr	r3, [pc, #136]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900045d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900045da:	f003 0302 	and.w	r3, r3, #2
900045de:	2b00      	cmp	r3, #0
900045e0:	d0f0      	beq.n	900045c4 <HAL_RCC_OscConfig+0x45c>
900045e2:	e018      	b.n	90004616 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
900045e4:	4b1e      	ldr	r3, [pc, #120]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900045e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900045e8:	4a1d      	ldr	r2, [pc, #116]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
900045ea:	f023 0301 	bic.w	r3, r3, #1
900045ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900045f0:	f7fd fcde 	bl	90001fb0 <HAL_GetTick>
900045f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900045f6:	e008      	b.n	9000460a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
900045f8:	f7fd fcda 	bl	90001fb0 <HAL_GetTick>
900045fc:	4602      	mov	r2, r0
900045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004600:	1ad3      	subs	r3, r2, r3
90004602:	2b02      	cmp	r3, #2
90004604:	d901      	bls.n	9000460a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
90004606:	2303      	movs	r3, #3
90004608:	e1d5      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000460a:	4b15      	ldr	r3, [pc, #84]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
9000460c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000460e:	f003 0302 	and.w	r3, r3, #2
90004612:	2b00      	cmp	r3, #0
90004614:	d1f0      	bne.n	900045f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
90004616:	687b      	ldr	r3, [r7, #4]
90004618:	681b      	ldr	r3, [r3, #0]
9000461a:	f003 0320 	and.w	r3, r3, #32
9000461e:	2b00      	cmp	r3, #0
90004620:	d039      	beq.n	90004696 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
90004622:	687b      	ldr	r3, [r7, #4]
90004624:	699b      	ldr	r3, [r3, #24]
90004626:	2b00      	cmp	r3, #0
90004628:	d01c      	beq.n	90004664 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
9000462a:	4b0d      	ldr	r3, [pc, #52]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
9000462c:	681b      	ldr	r3, [r3, #0]
9000462e:	4a0c      	ldr	r2, [pc, #48]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90004634:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90004636:	f7fd fcbb 	bl	90001fb0 <HAL_GetTick>
9000463a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000463c:	e008      	b.n	90004650 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
9000463e:	f7fd fcb7 	bl	90001fb0 <HAL_GetTick>
90004642:	4602      	mov	r2, r0
90004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004646:	1ad3      	subs	r3, r2, r3
90004648:	2b02      	cmp	r3, #2
9000464a:	d901      	bls.n	90004650 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
9000464c:	2303      	movs	r3, #3
9000464e:	e1b2      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90004650:	4b03      	ldr	r3, [pc, #12]	; (90004660 <HAL_RCC_OscConfig+0x4f8>)
90004652:	681b      	ldr	r3, [r3, #0]
90004654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90004658:	2b00      	cmp	r3, #0
9000465a:	d0f0      	beq.n	9000463e <HAL_RCC_OscConfig+0x4d6>
9000465c:	e01b      	b.n	90004696 <HAL_RCC_OscConfig+0x52e>
9000465e:	bf00      	nop
90004660:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90004664:	4b9b      	ldr	r3, [pc, #620]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004666:	681b      	ldr	r3, [r3, #0]
90004668:	4a9a      	ldr	r2, [pc, #616]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
9000466a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000466e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90004670:	f7fd fc9e 	bl	90001fb0 <HAL_GetTick>
90004674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90004676:	e008      	b.n	9000468a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
90004678:	f7fd fc9a 	bl	90001fb0 <HAL_GetTick>
9000467c:	4602      	mov	r2, r0
9000467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004680:	1ad3      	subs	r3, r2, r3
90004682:	2b02      	cmp	r3, #2
90004684:	d901      	bls.n	9000468a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90004686:	2303      	movs	r3, #3
90004688:	e195      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000468a:	4b92      	ldr	r3, [pc, #584]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
9000468c:	681b      	ldr	r3, [r3, #0]
9000468e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90004692:	2b00      	cmp	r3, #0
90004694:	d1f0      	bne.n	90004678 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90004696:	687b      	ldr	r3, [r7, #4]
90004698:	681b      	ldr	r3, [r3, #0]
9000469a:	f003 0304 	and.w	r3, r3, #4
9000469e:	2b00      	cmp	r3, #0
900046a0:	f000 8081 	beq.w	900047a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
900046a4:	4b8c      	ldr	r3, [pc, #560]	; (900048d8 <HAL_RCC_OscConfig+0x770>)
900046a6:	681b      	ldr	r3, [r3, #0]
900046a8:	4a8b      	ldr	r2, [pc, #556]	; (900048d8 <HAL_RCC_OscConfig+0x770>)
900046aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900046ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900046b0:	f7fd fc7e 	bl	90001fb0 <HAL_GetTick>
900046b4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
900046b6:	e008      	b.n	900046ca <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
900046b8:	f7fd fc7a 	bl	90001fb0 <HAL_GetTick>
900046bc:	4602      	mov	r2, r0
900046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900046c0:	1ad3      	subs	r3, r2, r3
900046c2:	2b64      	cmp	r3, #100	; 0x64
900046c4:	d901      	bls.n	900046ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
900046c6:	2303      	movs	r3, #3
900046c8:	e175      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
900046ca:	4b83      	ldr	r3, [pc, #524]	; (900048d8 <HAL_RCC_OscConfig+0x770>)
900046cc:	681b      	ldr	r3, [r3, #0]
900046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
900046d2:	2b00      	cmp	r3, #0
900046d4:	d0f0      	beq.n	900046b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900046d6:	687b      	ldr	r3, [r7, #4]
900046d8:	689b      	ldr	r3, [r3, #8]
900046da:	2b01      	cmp	r3, #1
900046dc:	d106      	bne.n	900046ec <HAL_RCC_OscConfig+0x584>
900046de:	4b7d      	ldr	r3, [pc, #500]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900046e2:	4a7c      	ldr	r2, [pc, #496]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900046e4:	f043 0301 	orr.w	r3, r3, #1
900046e8:	6713      	str	r3, [r2, #112]	; 0x70
900046ea:	e02d      	b.n	90004748 <HAL_RCC_OscConfig+0x5e0>
900046ec:	687b      	ldr	r3, [r7, #4]
900046ee:	689b      	ldr	r3, [r3, #8]
900046f0:	2b00      	cmp	r3, #0
900046f2:	d10c      	bne.n	9000470e <HAL_RCC_OscConfig+0x5a6>
900046f4:	4b77      	ldr	r3, [pc, #476]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900046f8:	4a76      	ldr	r2, [pc, #472]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900046fa:	f023 0301 	bic.w	r3, r3, #1
900046fe:	6713      	str	r3, [r2, #112]	; 0x70
90004700:	4b74      	ldr	r3, [pc, #464]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004704:	4a73      	ldr	r2, [pc, #460]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004706:	f023 0304 	bic.w	r3, r3, #4
9000470a:	6713      	str	r3, [r2, #112]	; 0x70
9000470c:	e01c      	b.n	90004748 <HAL_RCC_OscConfig+0x5e0>
9000470e:	687b      	ldr	r3, [r7, #4]
90004710:	689b      	ldr	r3, [r3, #8]
90004712:	2b05      	cmp	r3, #5
90004714:	d10c      	bne.n	90004730 <HAL_RCC_OscConfig+0x5c8>
90004716:	4b6f      	ldr	r3, [pc, #444]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000471a:	4a6e      	ldr	r2, [pc, #440]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
9000471c:	f043 0304 	orr.w	r3, r3, #4
90004720:	6713      	str	r3, [r2, #112]	; 0x70
90004722:	4b6c      	ldr	r3, [pc, #432]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004726:	4a6b      	ldr	r2, [pc, #428]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004728:	f043 0301 	orr.w	r3, r3, #1
9000472c:	6713      	str	r3, [r2, #112]	; 0x70
9000472e:	e00b      	b.n	90004748 <HAL_RCC_OscConfig+0x5e0>
90004730:	4b68      	ldr	r3, [pc, #416]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004734:	4a67      	ldr	r2, [pc, #412]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004736:	f023 0301 	bic.w	r3, r3, #1
9000473a:	6713      	str	r3, [r2, #112]	; 0x70
9000473c:	4b65      	ldr	r3, [pc, #404]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
9000473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004740:	4a64      	ldr	r2, [pc, #400]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004742:	f023 0304 	bic.w	r3, r3, #4
90004746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90004748:	687b      	ldr	r3, [r7, #4]
9000474a:	689b      	ldr	r3, [r3, #8]
9000474c:	2b00      	cmp	r3, #0
9000474e:	d015      	beq.n	9000477c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90004750:	f7fd fc2e 	bl	90001fb0 <HAL_GetTick>
90004754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90004756:	e00a      	b.n	9000476e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90004758:	f7fd fc2a 	bl	90001fb0 <HAL_GetTick>
9000475c:	4602      	mov	r2, r0
9000475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004760:	1ad3      	subs	r3, r2, r3
90004762:	f241 3288 	movw	r2, #5000	; 0x1388
90004766:	4293      	cmp	r3, r2
90004768:	d901      	bls.n	9000476e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
9000476a:	2303      	movs	r3, #3
9000476c:	e123      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000476e:	4b59      	ldr	r3, [pc, #356]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004772:	f003 0302 	and.w	r3, r3, #2
90004776:	2b00      	cmp	r3, #0
90004778:	d0ee      	beq.n	90004758 <HAL_RCC_OscConfig+0x5f0>
9000477a:	e014      	b.n	900047a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000477c:	f7fd fc18 	bl	90001fb0 <HAL_GetTick>
90004780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90004782:	e00a      	b.n	9000479a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90004784:	f7fd fc14 	bl	90001fb0 <HAL_GetTick>
90004788:	4602      	mov	r2, r0
9000478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000478c:	1ad3      	subs	r3, r2, r3
9000478e:	f241 3288 	movw	r2, #5000	; 0x1388
90004792:	4293      	cmp	r3, r2
90004794:	d901      	bls.n	9000479a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
90004796:	2303      	movs	r3, #3
90004798:	e10d      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000479a:	4b4e      	ldr	r3, [pc, #312]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
9000479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000479e:	f003 0302 	and.w	r3, r3, #2
900047a2:	2b00      	cmp	r3, #0
900047a4:	d1ee      	bne.n	90004784 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
900047a6:	687b      	ldr	r3, [r7, #4]
900047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900047aa:	2b00      	cmp	r3, #0
900047ac:	f000 8102 	beq.w	900049b4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
900047b0:	4b48      	ldr	r3, [pc, #288]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900047b2:	691b      	ldr	r3, [r3, #16]
900047b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
900047b8:	2b18      	cmp	r3, #24
900047ba:	f000 80bd 	beq.w	90004938 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
900047be:	687b      	ldr	r3, [r7, #4]
900047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900047c2:	2b02      	cmp	r3, #2
900047c4:	f040 809e 	bne.w	90004904 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900047c8:	4b42      	ldr	r3, [pc, #264]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900047ca:	681b      	ldr	r3, [r3, #0]
900047cc:	4a41      	ldr	r2, [pc, #260]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900047ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
900047d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900047d4:	f7fd fbec 	bl	90001fb0 <HAL_GetTick>
900047d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900047da:	e008      	b.n	900047ee <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
900047dc:	f7fd fbe8 	bl	90001fb0 <HAL_GetTick>
900047e0:	4602      	mov	r2, r0
900047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900047e4:	1ad3      	subs	r3, r2, r3
900047e6:	2b02      	cmp	r3, #2
900047e8:	d901      	bls.n	900047ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
900047ea:	2303      	movs	r3, #3
900047ec:	e0e3      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900047ee:	4b39      	ldr	r3, [pc, #228]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900047f0:	681b      	ldr	r3, [r3, #0]
900047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900047f6:	2b00      	cmp	r3, #0
900047f8:	d1f0      	bne.n	900047dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900047fa:	4b36      	ldr	r3, [pc, #216]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900047fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
900047fe:	4b37      	ldr	r3, [pc, #220]	; (900048dc <HAL_RCC_OscConfig+0x774>)
90004800:	4013      	ands	r3, r2
90004802:	687a      	ldr	r2, [r7, #4]
90004804:	6a91      	ldr	r1, [r2, #40]	; 0x28
90004806:	687a      	ldr	r2, [r7, #4]
90004808:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000480a:	0112      	lsls	r2, r2, #4
9000480c:	430a      	orrs	r2, r1
9000480e:	4931      	ldr	r1, [pc, #196]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004810:	4313      	orrs	r3, r2
90004812:	628b      	str	r3, [r1, #40]	; 0x28
90004814:	687b      	ldr	r3, [r7, #4]
90004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004818:	3b01      	subs	r3, #1
9000481a:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000481e:	687b      	ldr	r3, [r7, #4]
90004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90004822:	3b01      	subs	r3, #1
90004824:	025b      	lsls	r3, r3, #9
90004826:	b29b      	uxth	r3, r3
90004828:	431a      	orrs	r2, r3
9000482a:	687b      	ldr	r3, [r7, #4]
9000482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000482e:	3b01      	subs	r3, #1
90004830:	041b      	lsls	r3, r3, #16
90004832:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90004836:	431a      	orrs	r2, r3
90004838:	687b      	ldr	r3, [r7, #4]
9000483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000483c:	3b01      	subs	r3, #1
9000483e:	061b      	lsls	r3, r3, #24
90004840:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90004844:	4923      	ldr	r1, [pc, #140]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004846:	4313      	orrs	r3, r2
90004848:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
9000484a:	4b22      	ldr	r3, [pc, #136]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
9000484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000484e:	4a21      	ldr	r2, [pc, #132]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004850:	f023 0301 	bic.w	r3, r3, #1
90004854:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90004856:	4b1f      	ldr	r3, [pc, #124]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000485a:	4b21      	ldr	r3, [pc, #132]	; (900048e0 <HAL_RCC_OscConfig+0x778>)
9000485c:	4013      	ands	r3, r2
9000485e:	687a      	ldr	r2, [r7, #4]
90004860:	6c92      	ldr	r2, [r2, #72]	; 0x48
90004862:	00d2      	lsls	r2, r2, #3
90004864:	491b      	ldr	r1, [pc, #108]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004866:	4313      	orrs	r3, r2
90004868:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000486a:	4b1a      	ldr	r3, [pc, #104]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
9000486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000486e:	f023 020c 	bic.w	r2, r3, #12
90004872:	687b      	ldr	r3, [r7, #4]
90004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004876:	4917      	ldr	r1, [pc, #92]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004878:	4313      	orrs	r3, r2
9000487a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000487c:	4b15      	ldr	r3, [pc, #84]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
9000487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004880:	f023 0202 	bic.w	r2, r3, #2
90004884:	687b      	ldr	r3, [r7, #4]
90004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90004888:	4912      	ldr	r1, [pc, #72]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
9000488a:	4313      	orrs	r3, r2
9000488c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000488e:	4b11      	ldr	r3, [pc, #68]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004892:	4a10      	ldr	r2, [pc, #64]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
90004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90004898:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000489a:	4b0e      	ldr	r3, [pc, #56]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
9000489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000489e:	4a0d      	ldr	r2, [pc, #52]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900048a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900048a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
900048a6:	4b0b      	ldr	r3, [pc, #44]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900048aa:	4a0a      	ldr	r2, [pc, #40]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900048ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
900048b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
900048b2:	4b08      	ldr	r3, [pc, #32]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900048b6:	4a07      	ldr	r2, [pc, #28]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900048b8:	f043 0301 	orr.w	r3, r3, #1
900048bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
900048be:	4b05      	ldr	r3, [pc, #20]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900048c0:	681b      	ldr	r3, [r3, #0]
900048c2:	4a04      	ldr	r2, [pc, #16]	; (900048d4 <HAL_RCC_OscConfig+0x76c>)
900048c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
900048c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900048ca:	f7fd fb71 	bl	90001fb0 <HAL_GetTick>
900048ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900048d0:	e011      	b.n	900048f6 <HAL_RCC_OscConfig+0x78e>
900048d2:	bf00      	nop
900048d4:	58024400 	.word	0x58024400
900048d8:	58024800 	.word	0x58024800
900048dc:	fffffc0c 	.word	0xfffffc0c
900048e0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
900048e4:	f7fd fb64 	bl	90001fb0 <HAL_GetTick>
900048e8:	4602      	mov	r2, r0
900048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900048ec:	1ad3      	subs	r3, r2, r3
900048ee:	2b02      	cmp	r3, #2
900048f0:	d901      	bls.n	900048f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
900048f2:	2303      	movs	r3, #3
900048f4:	e05f      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900048f6:	4b32      	ldr	r3, [pc, #200]	; (900049c0 <HAL_RCC_OscConfig+0x858>)
900048f8:	681b      	ldr	r3, [r3, #0]
900048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900048fe:	2b00      	cmp	r3, #0
90004900:	d0f0      	beq.n	900048e4 <HAL_RCC_OscConfig+0x77c>
90004902:	e057      	b.n	900049b4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90004904:	4b2e      	ldr	r3, [pc, #184]	; (900049c0 <HAL_RCC_OscConfig+0x858>)
90004906:	681b      	ldr	r3, [r3, #0]
90004908:	4a2d      	ldr	r2, [pc, #180]	; (900049c0 <HAL_RCC_OscConfig+0x858>)
9000490a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000490e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004910:	f7fd fb4e 	bl	90001fb0 <HAL_GetTick>
90004914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90004916:	e008      	b.n	9000492a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
90004918:	f7fd fb4a 	bl	90001fb0 <HAL_GetTick>
9000491c:	4602      	mov	r2, r0
9000491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004920:	1ad3      	subs	r3, r2, r3
90004922:	2b02      	cmp	r3, #2
90004924:	d901      	bls.n	9000492a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
90004926:	2303      	movs	r3, #3
90004928:	e045      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000492a:	4b25      	ldr	r3, [pc, #148]	; (900049c0 <HAL_RCC_OscConfig+0x858>)
9000492c:	681b      	ldr	r3, [r3, #0]
9000492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90004932:	2b00      	cmp	r3, #0
90004934:	d1f0      	bne.n	90004918 <HAL_RCC_OscConfig+0x7b0>
90004936:	e03d      	b.n	900049b4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90004938:	4b21      	ldr	r3, [pc, #132]	; (900049c0 <HAL_RCC_OscConfig+0x858>)
9000493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000493c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
9000493e:	4b20      	ldr	r3, [pc, #128]	; (900049c0 <HAL_RCC_OscConfig+0x858>)
90004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004942:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004944:	687b      	ldr	r3, [r7, #4]
90004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004948:	2b01      	cmp	r3, #1
9000494a:	d031      	beq.n	900049b0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000494c:	693b      	ldr	r3, [r7, #16]
9000494e:	f003 0203 	and.w	r2, r3, #3
90004952:	687b      	ldr	r3, [r7, #4]
90004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004956:	429a      	cmp	r2, r3
90004958:	d12a      	bne.n	900049b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000495a:	693b      	ldr	r3, [r7, #16]
9000495c:	091b      	lsrs	r3, r3, #4
9000495e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
90004962:	687b      	ldr	r3, [r7, #4]
90004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90004966:	429a      	cmp	r2, r3
90004968:	d122      	bne.n	900049b0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000496a:	68fb      	ldr	r3, [r7, #12]
9000496c:	f3c3 0208 	ubfx	r2, r3, #0, #9
90004970:	687b      	ldr	r3, [r7, #4]
90004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004974:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90004976:	429a      	cmp	r2, r3
90004978:	d11a      	bne.n	900049b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000497a:	68fb      	ldr	r3, [r7, #12]
9000497c:	0a5b      	lsrs	r3, r3, #9
9000497e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90004982:	687b      	ldr	r3, [r7, #4]
90004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90004986:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90004988:	429a      	cmp	r2, r3
9000498a:	d111      	bne.n	900049b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000498c:	68fb      	ldr	r3, [r7, #12]
9000498e:	0c1b      	lsrs	r3, r3, #16
90004990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90004994:	687b      	ldr	r3, [r7, #4]
90004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90004998:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000499a:	429a      	cmp	r2, r3
9000499c:	d108      	bne.n	900049b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000499e:	68fb      	ldr	r3, [r7, #12]
900049a0:	0e1b      	lsrs	r3, r3, #24
900049a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
900049a6:	687b      	ldr	r3, [r7, #4]
900049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900049aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900049ac:	429a      	cmp	r2, r3
900049ae:	d001      	beq.n	900049b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
900049b0:	2301      	movs	r3, #1
900049b2:	e000      	b.n	900049b6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
900049b4:	2300      	movs	r3, #0
}
900049b6:	4618      	mov	r0, r3
900049b8:	3730      	adds	r7, #48	; 0x30
900049ba:	46bd      	mov	sp, r7
900049bc:	bd80      	pop	{r7, pc}
900049be:	bf00      	nop
900049c0:	58024400 	.word	0x58024400

900049c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
900049c4:	b580      	push	{r7, lr}
900049c6:	b086      	sub	sp, #24
900049c8:	af00      	add	r7, sp, #0
900049ca:	6078      	str	r0, [r7, #4]
900049cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
900049ce:	687b      	ldr	r3, [r7, #4]
900049d0:	2b00      	cmp	r3, #0
900049d2:	d101      	bne.n	900049d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
900049d4:	2301      	movs	r3, #1
900049d6:	e19c      	b.n	90004d12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
900049d8:	4b8a      	ldr	r3, [pc, #552]	; (90004c04 <HAL_RCC_ClockConfig+0x240>)
900049da:	681b      	ldr	r3, [r3, #0]
900049dc:	f003 030f 	and.w	r3, r3, #15
900049e0:	683a      	ldr	r2, [r7, #0]
900049e2:	429a      	cmp	r2, r3
900049e4:	d910      	bls.n	90004a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900049e6:	4b87      	ldr	r3, [pc, #540]	; (90004c04 <HAL_RCC_ClockConfig+0x240>)
900049e8:	681b      	ldr	r3, [r3, #0]
900049ea:	f023 020f 	bic.w	r2, r3, #15
900049ee:	4985      	ldr	r1, [pc, #532]	; (90004c04 <HAL_RCC_ClockConfig+0x240>)
900049f0:	683b      	ldr	r3, [r7, #0]
900049f2:	4313      	orrs	r3, r2
900049f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
900049f6:	4b83      	ldr	r3, [pc, #524]	; (90004c04 <HAL_RCC_ClockConfig+0x240>)
900049f8:	681b      	ldr	r3, [r3, #0]
900049fa:	f003 030f 	and.w	r3, r3, #15
900049fe:	683a      	ldr	r2, [r7, #0]
90004a00:	429a      	cmp	r2, r3
90004a02:	d001      	beq.n	90004a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90004a04:	2301      	movs	r3, #1
90004a06:	e184      	b.n	90004d12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90004a08:	687b      	ldr	r3, [r7, #4]
90004a0a:	681b      	ldr	r3, [r3, #0]
90004a0c:	f003 0304 	and.w	r3, r3, #4
90004a10:	2b00      	cmp	r3, #0
90004a12:	d010      	beq.n	90004a36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90004a14:	687b      	ldr	r3, [r7, #4]
90004a16:	691a      	ldr	r2, [r3, #16]
90004a18:	4b7b      	ldr	r3, [pc, #492]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004a1a:	699b      	ldr	r3, [r3, #24]
90004a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004a20:	429a      	cmp	r2, r3
90004a22:	d908      	bls.n	90004a36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90004a24:	4b78      	ldr	r3, [pc, #480]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004a26:	699b      	ldr	r3, [r3, #24]
90004a28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004a2c:	687b      	ldr	r3, [r7, #4]
90004a2e:	691b      	ldr	r3, [r3, #16]
90004a30:	4975      	ldr	r1, [pc, #468]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004a32:	4313      	orrs	r3, r2
90004a34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90004a36:	687b      	ldr	r3, [r7, #4]
90004a38:	681b      	ldr	r3, [r3, #0]
90004a3a:	f003 0308 	and.w	r3, r3, #8
90004a3e:	2b00      	cmp	r3, #0
90004a40:	d010      	beq.n	90004a64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90004a42:	687b      	ldr	r3, [r7, #4]
90004a44:	695a      	ldr	r2, [r3, #20]
90004a46:	4b70      	ldr	r3, [pc, #448]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004a48:	69db      	ldr	r3, [r3, #28]
90004a4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004a4e:	429a      	cmp	r2, r3
90004a50:	d908      	bls.n	90004a64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90004a52:	4b6d      	ldr	r3, [pc, #436]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004a54:	69db      	ldr	r3, [r3, #28]
90004a56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004a5a:	687b      	ldr	r3, [r7, #4]
90004a5c:	695b      	ldr	r3, [r3, #20]
90004a5e:	496a      	ldr	r1, [pc, #424]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004a60:	4313      	orrs	r3, r2
90004a62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004a64:	687b      	ldr	r3, [r7, #4]
90004a66:	681b      	ldr	r3, [r3, #0]
90004a68:	f003 0310 	and.w	r3, r3, #16
90004a6c:	2b00      	cmp	r3, #0
90004a6e:	d010      	beq.n	90004a92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90004a70:	687b      	ldr	r3, [r7, #4]
90004a72:	699a      	ldr	r2, [r3, #24]
90004a74:	4b64      	ldr	r3, [pc, #400]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004a76:	69db      	ldr	r3, [r3, #28]
90004a78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90004a7c:	429a      	cmp	r2, r3
90004a7e:	d908      	bls.n	90004a92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90004a80:	4b61      	ldr	r3, [pc, #388]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004a82:	69db      	ldr	r3, [r3, #28]
90004a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
90004a88:	687b      	ldr	r3, [r7, #4]
90004a8a:	699b      	ldr	r3, [r3, #24]
90004a8c:	495e      	ldr	r1, [pc, #376]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004a8e:	4313      	orrs	r3, r2
90004a90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90004a92:	687b      	ldr	r3, [r7, #4]
90004a94:	681b      	ldr	r3, [r3, #0]
90004a96:	f003 0320 	and.w	r3, r3, #32
90004a9a:	2b00      	cmp	r3, #0
90004a9c:	d010      	beq.n	90004ac0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90004a9e:	687b      	ldr	r3, [r7, #4]
90004aa0:	69da      	ldr	r2, [r3, #28]
90004aa2:	4b59      	ldr	r3, [pc, #356]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004aa4:	6a1b      	ldr	r3, [r3, #32]
90004aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004aaa:	429a      	cmp	r2, r3
90004aac:	d908      	bls.n	90004ac0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
90004aae:	4b56      	ldr	r3, [pc, #344]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004ab0:	6a1b      	ldr	r3, [r3, #32]
90004ab2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004ab6:	687b      	ldr	r3, [r7, #4]
90004ab8:	69db      	ldr	r3, [r3, #28]
90004aba:	4953      	ldr	r1, [pc, #332]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004abc:	4313      	orrs	r3, r2
90004abe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90004ac0:	687b      	ldr	r3, [r7, #4]
90004ac2:	681b      	ldr	r3, [r3, #0]
90004ac4:	f003 0302 	and.w	r3, r3, #2
90004ac8:	2b00      	cmp	r3, #0
90004aca:	d010      	beq.n	90004aee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90004acc:	687b      	ldr	r3, [r7, #4]
90004ace:	68da      	ldr	r2, [r3, #12]
90004ad0:	4b4d      	ldr	r3, [pc, #308]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004ad2:	699b      	ldr	r3, [r3, #24]
90004ad4:	f003 030f 	and.w	r3, r3, #15
90004ad8:	429a      	cmp	r2, r3
90004ada:	d908      	bls.n	90004aee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90004adc:	4b4a      	ldr	r3, [pc, #296]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004ade:	699b      	ldr	r3, [r3, #24]
90004ae0:	f023 020f 	bic.w	r2, r3, #15
90004ae4:	687b      	ldr	r3, [r7, #4]
90004ae6:	68db      	ldr	r3, [r3, #12]
90004ae8:	4947      	ldr	r1, [pc, #284]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004aea:	4313      	orrs	r3, r2
90004aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90004aee:	687b      	ldr	r3, [r7, #4]
90004af0:	681b      	ldr	r3, [r3, #0]
90004af2:	f003 0301 	and.w	r3, r3, #1
90004af6:	2b00      	cmp	r3, #0
90004af8:	d055      	beq.n	90004ba6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90004afa:	4b43      	ldr	r3, [pc, #268]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004afc:	699b      	ldr	r3, [r3, #24]
90004afe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
90004b02:	687b      	ldr	r3, [r7, #4]
90004b04:	689b      	ldr	r3, [r3, #8]
90004b06:	4940      	ldr	r1, [pc, #256]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004b08:	4313      	orrs	r3, r2
90004b0a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90004b0c:	687b      	ldr	r3, [r7, #4]
90004b0e:	685b      	ldr	r3, [r3, #4]
90004b10:	2b02      	cmp	r3, #2
90004b12:	d107      	bne.n	90004b24 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90004b14:	4b3c      	ldr	r3, [pc, #240]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004b16:	681b      	ldr	r3, [r3, #0]
90004b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90004b1c:	2b00      	cmp	r3, #0
90004b1e:	d121      	bne.n	90004b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90004b20:	2301      	movs	r3, #1
90004b22:	e0f6      	b.n	90004d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90004b24:	687b      	ldr	r3, [r7, #4]
90004b26:	685b      	ldr	r3, [r3, #4]
90004b28:	2b03      	cmp	r3, #3
90004b2a:	d107      	bne.n	90004b3c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90004b2c:	4b36      	ldr	r3, [pc, #216]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004b2e:	681b      	ldr	r3, [r3, #0]
90004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90004b34:	2b00      	cmp	r3, #0
90004b36:	d115      	bne.n	90004b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90004b38:	2301      	movs	r3, #1
90004b3a:	e0ea      	b.n	90004d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90004b3c:	687b      	ldr	r3, [r7, #4]
90004b3e:	685b      	ldr	r3, [r3, #4]
90004b40:	2b01      	cmp	r3, #1
90004b42:	d107      	bne.n	90004b54 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90004b44:	4b30      	ldr	r3, [pc, #192]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004b46:	681b      	ldr	r3, [r3, #0]
90004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004b4c:	2b00      	cmp	r3, #0
90004b4e:	d109      	bne.n	90004b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90004b50:	2301      	movs	r3, #1
90004b52:	e0de      	b.n	90004d12 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90004b54:	4b2c      	ldr	r3, [pc, #176]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004b56:	681b      	ldr	r3, [r3, #0]
90004b58:	f003 0304 	and.w	r3, r3, #4
90004b5c:	2b00      	cmp	r3, #0
90004b5e:	d101      	bne.n	90004b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90004b60:	2301      	movs	r3, #1
90004b62:	e0d6      	b.n	90004d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90004b64:	4b28      	ldr	r3, [pc, #160]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004b66:	691b      	ldr	r3, [r3, #16]
90004b68:	f023 0207 	bic.w	r2, r3, #7
90004b6c:	687b      	ldr	r3, [r7, #4]
90004b6e:	685b      	ldr	r3, [r3, #4]
90004b70:	4925      	ldr	r1, [pc, #148]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004b72:	4313      	orrs	r3, r2
90004b74:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90004b76:	f7fd fa1b 	bl	90001fb0 <HAL_GetTick>
90004b7a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004b7c:	e00a      	b.n	90004b94 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
90004b7e:	f7fd fa17 	bl	90001fb0 <HAL_GetTick>
90004b82:	4602      	mov	r2, r0
90004b84:	697b      	ldr	r3, [r7, #20]
90004b86:	1ad3      	subs	r3, r2, r3
90004b88:	f241 3288 	movw	r2, #5000	; 0x1388
90004b8c:	4293      	cmp	r3, r2
90004b8e:	d901      	bls.n	90004b94 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
90004b90:	2303      	movs	r3, #3
90004b92:	e0be      	b.n	90004d12 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004b94:	4b1c      	ldr	r3, [pc, #112]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004b96:	691b      	ldr	r3, [r3, #16]
90004b98:	f003 0238 	and.w	r2, r3, #56	; 0x38
90004b9c:	687b      	ldr	r3, [r7, #4]
90004b9e:	685b      	ldr	r3, [r3, #4]
90004ba0:	00db      	lsls	r3, r3, #3
90004ba2:	429a      	cmp	r2, r3
90004ba4:	d1eb      	bne.n	90004b7e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90004ba6:	687b      	ldr	r3, [r7, #4]
90004ba8:	681b      	ldr	r3, [r3, #0]
90004baa:	f003 0302 	and.w	r3, r3, #2
90004bae:	2b00      	cmp	r3, #0
90004bb0:	d010      	beq.n	90004bd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90004bb2:	687b      	ldr	r3, [r7, #4]
90004bb4:	68da      	ldr	r2, [r3, #12]
90004bb6:	4b14      	ldr	r3, [pc, #80]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004bb8:	699b      	ldr	r3, [r3, #24]
90004bba:	f003 030f 	and.w	r3, r3, #15
90004bbe:	429a      	cmp	r2, r3
90004bc0:	d208      	bcs.n	90004bd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90004bc2:	4b11      	ldr	r3, [pc, #68]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004bc4:	699b      	ldr	r3, [r3, #24]
90004bc6:	f023 020f 	bic.w	r2, r3, #15
90004bca:	687b      	ldr	r3, [r7, #4]
90004bcc:	68db      	ldr	r3, [r3, #12]
90004bce:	490e      	ldr	r1, [pc, #56]	; (90004c08 <HAL_RCC_ClockConfig+0x244>)
90004bd0:	4313      	orrs	r3, r2
90004bd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
90004bd4:	4b0b      	ldr	r3, [pc, #44]	; (90004c04 <HAL_RCC_ClockConfig+0x240>)
90004bd6:	681b      	ldr	r3, [r3, #0]
90004bd8:	f003 030f 	and.w	r3, r3, #15
90004bdc:	683a      	ldr	r2, [r7, #0]
90004bde:	429a      	cmp	r2, r3
90004be0:	d214      	bcs.n	90004c0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90004be2:	4b08      	ldr	r3, [pc, #32]	; (90004c04 <HAL_RCC_ClockConfig+0x240>)
90004be4:	681b      	ldr	r3, [r3, #0]
90004be6:	f023 020f 	bic.w	r2, r3, #15
90004bea:	4906      	ldr	r1, [pc, #24]	; (90004c04 <HAL_RCC_ClockConfig+0x240>)
90004bec:	683b      	ldr	r3, [r7, #0]
90004bee:	4313      	orrs	r3, r2
90004bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
90004bf2:	4b04      	ldr	r3, [pc, #16]	; (90004c04 <HAL_RCC_ClockConfig+0x240>)
90004bf4:	681b      	ldr	r3, [r3, #0]
90004bf6:	f003 030f 	and.w	r3, r3, #15
90004bfa:	683a      	ldr	r2, [r7, #0]
90004bfc:	429a      	cmp	r2, r3
90004bfe:	d005      	beq.n	90004c0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90004c00:	2301      	movs	r3, #1
90004c02:	e086      	b.n	90004d12 <HAL_RCC_ClockConfig+0x34e>
90004c04:	52002000 	.word	0x52002000
90004c08:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90004c0c:	687b      	ldr	r3, [r7, #4]
90004c0e:	681b      	ldr	r3, [r3, #0]
90004c10:	f003 0304 	and.w	r3, r3, #4
90004c14:	2b00      	cmp	r3, #0
90004c16:	d010      	beq.n	90004c3a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90004c18:	687b      	ldr	r3, [r7, #4]
90004c1a:	691a      	ldr	r2, [r3, #16]
90004c1c:	4b3f      	ldr	r3, [pc, #252]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004c1e:	699b      	ldr	r3, [r3, #24]
90004c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004c24:	429a      	cmp	r2, r3
90004c26:	d208      	bcs.n	90004c3a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90004c28:	4b3c      	ldr	r3, [pc, #240]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004c2a:	699b      	ldr	r3, [r3, #24]
90004c2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004c30:	687b      	ldr	r3, [r7, #4]
90004c32:	691b      	ldr	r3, [r3, #16]
90004c34:	4939      	ldr	r1, [pc, #228]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004c36:	4313      	orrs	r3, r2
90004c38:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90004c3a:	687b      	ldr	r3, [r7, #4]
90004c3c:	681b      	ldr	r3, [r3, #0]
90004c3e:	f003 0308 	and.w	r3, r3, #8
90004c42:	2b00      	cmp	r3, #0
90004c44:	d010      	beq.n	90004c68 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90004c46:	687b      	ldr	r3, [r7, #4]
90004c48:	695a      	ldr	r2, [r3, #20]
90004c4a:	4b34      	ldr	r3, [pc, #208]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004c4c:	69db      	ldr	r3, [r3, #28]
90004c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004c52:	429a      	cmp	r2, r3
90004c54:	d208      	bcs.n	90004c68 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90004c56:	4b31      	ldr	r3, [pc, #196]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004c58:	69db      	ldr	r3, [r3, #28]
90004c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004c5e:	687b      	ldr	r3, [r7, #4]
90004c60:	695b      	ldr	r3, [r3, #20]
90004c62:	492e      	ldr	r1, [pc, #184]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004c64:	4313      	orrs	r3, r2
90004c66:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004c68:	687b      	ldr	r3, [r7, #4]
90004c6a:	681b      	ldr	r3, [r3, #0]
90004c6c:	f003 0310 	and.w	r3, r3, #16
90004c70:	2b00      	cmp	r3, #0
90004c72:	d010      	beq.n	90004c96 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90004c74:	687b      	ldr	r3, [r7, #4]
90004c76:	699a      	ldr	r2, [r3, #24]
90004c78:	4b28      	ldr	r3, [pc, #160]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004c7a:	69db      	ldr	r3, [r3, #28]
90004c7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90004c80:	429a      	cmp	r2, r3
90004c82:	d208      	bcs.n	90004c96 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90004c84:	4b25      	ldr	r3, [pc, #148]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004c86:	69db      	ldr	r3, [r3, #28]
90004c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
90004c8c:	687b      	ldr	r3, [r7, #4]
90004c8e:	699b      	ldr	r3, [r3, #24]
90004c90:	4922      	ldr	r1, [pc, #136]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004c92:	4313      	orrs	r3, r2
90004c94:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90004c96:	687b      	ldr	r3, [r7, #4]
90004c98:	681b      	ldr	r3, [r3, #0]
90004c9a:	f003 0320 	and.w	r3, r3, #32
90004c9e:	2b00      	cmp	r3, #0
90004ca0:	d010      	beq.n	90004cc4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90004ca2:	687b      	ldr	r3, [r7, #4]
90004ca4:	69da      	ldr	r2, [r3, #28]
90004ca6:	4b1d      	ldr	r3, [pc, #116]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004ca8:	6a1b      	ldr	r3, [r3, #32]
90004caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004cae:	429a      	cmp	r2, r3
90004cb0:	d208      	bcs.n	90004cc4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
90004cb2:	4b1a      	ldr	r3, [pc, #104]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004cb4:	6a1b      	ldr	r3, [r3, #32]
90004cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004cba:	687b      	ldr	r3, [r7, #4]
90004cbc:	69db      	ldr	r3, [r3, #28]
90004cbe:	4917      	ldr	r1, [pc, #92]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004cc0:	4313      	orrs	r3, r2
90004cc2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90004cc4:	f000 f834 	bl	90004d30 <HAL_RCC_GetSysClockFreq>
90004cc8:	4602      	mov	r2, r0
90004cca:	4b14      	ldr	r3, [pc, #80]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004ccc:	699b      	ldr	r3, [r3, #24]
90004cce:	0a1b      	lsrs	r3, r3, #8
90004cd0:	f003 030f 	and.w	r3, r3, #15
90004cd4:	4912      	ldr	r1, [pc, #72]	; (90004d20 <HAL_RCC_ClockConfig+0x35c>)
90004cd6:	5ccb      	ldrb	r3, [r1, r3]
90004cd8:	f003 031f 	and.w	r3, r3, #31
90004cdc:	fa22 f303 	lsr.w	r3, r2, r3
90004ce0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90004ce2:	4b0e      	ldr	r3, [pc, #56]	; (90004d1c <HAL_RCC_ClockConfig+0x358>)
90004ce4:	699b      	ldr	r3, [r3, #24]
90004ce6:	f003 030f 	and.w	r3, r3, #15
90004cea:	4a0d      	ldr	r2, [pc, #52]	; (90004d20 <HAL_RCC_ClockConfig+0x35c>)
90004cec:	5cd3      	ldrb	r3, [r2, r3]
90004cee:	f003 031f 	and.w	r3, r3, #31
90004cf2:	693a      	ldr	r2, [r7, #16]
90004cf4:	fa22 f303 	lsr.w	r3, r2, r3
90004cf8:	4a0a      	ldr	r2, [pc, #40]	; (90004d24 <HAL_RCC_ClockConfig+0x360>)
90004cfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90004cfc:	4a0a      	ldr	r2, [pc, #40]	; (90004d28 <HAL_RCC_ClockConfig+0x364>)
90004cfe:	693b      	ldr	r3, [r7, #16]
90004d00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
90004d02:	4b0a      	ldr	r3, [pc, #40]	; (90004d2c <HAL_RCC_ClockConfig+0x368>)
90004d04:	681b      	ldr	r3, [r3, #0]
90004d06:	4618      	mov	r0, r3
90004d08:	f7fd f908 	bl	90001f1c <HAL_InitTick>
90004d0c:	4603      	mov	r3, r0
90004d0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90004d10:	7bfb      	ldrb	r3, [r7, #15]
}
90004d12:	4618      	mov	r0, r3
90004d14:	3718      	adds	r7, #24
90004d16:	46bd      	mov	sp, r7
90004d18:	bd80      	pop	{r7, pc}
90004d1a:	bf00      	nop
90004d1c:	58024400 	.word	0x58024400
90004d20:	90041ac8 	.word	0x90041ac8
90004d24:	2000000c 	.word	0x2000000c
90004d28:	20000008 	.word	0x20000008
90004d2c:	20000018 	.word	0x20000018

90004d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90004d30:	b480      	push	{r7}
90004d32:	b089      	sub	sp, #36	; 0x24
90004d34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90004d36:	4bb3      	ldr	r3, [pc, #716]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004d38:	691b      	ldr	r3, [r3, #16]
90004d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
90004d3e:	2b18      	cmp	r3, #24
90004d40:	f200 8155 	bhi.w	90004fee <HAL_RCC_GetSysClockFreq+0x2be>
90004d44:	a201      	add	r2, pc, #4	; (adr r2, 90004d4c <HAL_RCC_GetSysClockFreq+0x1c>)
90004d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004d4a:	bf00      	nop
90004d4c:	90004db1 	.word	0x90004db1
90004d50:	90004fef 	.word	0x90004fef
90004d54:	90004fef 	.word	0x90004fef
90004d58:	90004fef 	.word	0x90004fef
90004d5c:	90004fef 	.word	0x90004fef
90004d60:	90004fef 	.word	0x90004fef
90004d64:	90004fef 	.word	0x90004fef
90004d68:	90004fef 	.word	0x90004fef
90004d6c:	90004dd7 	.word	0x90004dd7
90004d70:	90004fef 	.word	0x90004fef
90004d74:	90004fef 	.word	0x90004fef
90004d78:	90004fef 	.word	0x90004fef
90004d7c:	90004fef 	.word	0x90004fef
90004d80:	90004fef 	.word	0x90004fef
90004d84:	90004fef 	.word	0x90004fef
90004d88:	90004fef 	.word	0x90004fef
90004d8c:	90004ddd 	.word	0x90004ddd
90004d90:	90004fef 	.word	0x90004fef
90004d94:	90004fef 	.word	0x90004fef
90004d98:	90004fef 	.word	0x90004fef
90004d9c:	90004fef 	.word	0x90004fef
90004da0:	90004fef 	.word	0x90004fef
90004da4:	90004fef 	.word	0x90004fef
90004da8:	90004fef 	.word	0x90004fef
90004dac:	90004de3 	.word	0x90004de3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004db0:	4b94      	ldr	r3, [pc, #592]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004db2:	681b      	ldr	r3, [r3, #0]
90004db4:	f003 0320 	and.w	r3, r3, #32
90004db8:	2b00      	cmp	r3, #0
90004dba:	d009      	beq.n	90004dd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90004dbc:	4b91      	ldr	r3, [pc, #580]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004dbe:	681b      	ldr	r3, [r3, #0]
90004dc0:	08db      	lsrs	r3, r3, #3
90004dc2:	f003 0303 	and.w	r3, r3, #3
90004dc6:	4a90      	ldr	r2, [pc, #576]	; (90005008 <HAL_RCC_GetSysClockFreq+0x2d8>)
90004dc8:	fa22 f303 	lsr.w	r3, r2, r3
90004dcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
90004dce:	e111      	b.n	90004ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90004dd0:	4b8d      	ldr	r3, [pc, #564]	; (90005008 <HAL_RCC_GetSysClockFreq+0x2d8>)
90004dd2:	61bb      	str	r3, [r7, #24]
    break;
90004dd4:	e10e      	b.n	90004ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
90004dd6:	4b8d      	ldr	r3, [pc, #564]	; (9000500c <HAL_RCC_GetSysClockFreq+0x2dc>)
90004dd8:	61bb      	str	r3, [r7, #24]
    break;
90004dda:	e10b      	b.n	90004ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
90004ddc:	4b8c      	ldr	r3, [pc, #560]	; (90005010 <HAL_RCC_GetSysClockFreq+0x2e0>)
90004dde:	61bb      	str	r3, [r7, #24]
    break;
90004de0:	e108      	b.n	90004ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90004de2:	4b88      	ldr	r3, [pc, #544]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004de6:	f003 0303 	and.w	r3, r3, #3
90004dea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
90004dec:	4b85      	ldr	r3, [pc, #532]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004df0:	091b      	lsrs	r3, r3, #4
90004df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90004df6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
90004df8:	4b82      	ldr	r3, [pc, #520]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004dfc:	f003 0301 	and.w	r3, r3, #1
90004e00:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
90004e02:	4b80      	ldr	r3, [pc, #512]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90004e06:	08db      	lsrs	r3, r3, #3
90004e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
90004e0c:	68fa      	ldr	r2, [r7, #12]
90004e0e:	fb02 f303 	mul.w	r3, r2, r3
90004e12:	ee07 3a90 	vmov	s15, r3
90004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004e1a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
90004e1e:	693b      	ldr	r3, [r7, #16]
90004e20:	2b00      	cmp	r3, #0
90004e22:	f000 80e1 	beq.w	90004fe8 <HAL_RCC_GetSysClockFreq+0x2b8>
90004e26:	697b      	ldr	r3, [r7, #20]
90004e28:	2b02      	cmp	r3, #2
90004e2a:	f000 8083 	beq.w	90004f34 <HAL_RCC_GetSysClockFreq+0x204>
90004e2e:	697b      	ldr	r3, [r7, #20]
90004e30:	2b02      	cmp	r3, #2
90004e32:	f200 80a1 	bhi.w	90004f78 <HAL_RCC_GetSysClockFreq+0x248>
90004e36:	697b      	ldr	r3, [r7, #20]
90004e38:	2b00      	cmp	r3, #0
90004e3a:	d003      	beq.n	90004e44 <HAL_RCC_GetSysClockFreq+0x114>
90004e3c:	697b      	ldr	r3, [r7, #20]
90004e3e:	2b01      	cmp	r3, #1
90004e40:	d056      	beq.n	90004ef0 <HAL_RCC_GetSysClockFreq+0x1c0>
90004e42:	e099      	b.n	90004f78 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004e44:	4b6f      	ldr	r3, [pc, #444]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004e46:	681b      	ldr	r3, [r3, #0]
90004e48:	f003 0320 	and.w	r3, r3, #32
90004e4c:	2b00      	cmp	r3, #0
90004e4e:	d02d      	beq.n	90004eac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90004e50:	4b6c      	ldr	r3, [pc, #432]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004e52:	681b      	ldr	r3, [r3, #0]
90004e54:	08db      	lsrs	r3, r3, #3
90004e56:	f003 0303 	and.w	r3, r3, #3
90004e5a:	4a6b      	ldr	r2, [pc, #428]	; (90005008 <HAL_RCC_GetSysClockFreq+0x2d8>)
90004e5c:	fa22 f303 	lsr.w	r3, r2, r3
90004e60:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004e62:	687b      	ldr	r3, [r7, #4]
90004e64:	ee07 3a90 	vmov	s15, r3
90004e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004e6c:	693b      	ldr	r3, [r7, #16]
90004e6e:	ee07 3a90 	vmov	s15, r3
90004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004e7a:	4b62      	ldr	r3, [pc, #392]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004e82:	ee07 3a90 	vmov	s15, r3
90004e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004e8a:	ed97 6a02 	vldr	s12, [r7, #8]
90004e8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 90005014 <HAL_RCC_GetSysClockFreq+0x2e4>
90004e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
90004ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
90004eaa:	e087      	b.n	90004fbc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004eac:	693b      	ldr	r3, [r7, #16]
90004eae:	ee07 3a90 	vmov	s15, r3
90004eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004eb6:	eddf 6a58 	vldr	s13, [pc, #352]	; 90005018 <HAL_RCC_GetSysClockFreq+0x2e8>
90004eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004ebe:	4b51      	ldr	r3, [pc, #324]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004ec6:	ee07 3a90 	vmov	s15, r3
90004eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004ece:	ed97 6a02 	vldr	s12, [r7, #8]
90004ed2:	eddf 5a50 	vldr	s11, [pc, #320]	; 90005014 <HAL_RCC_GetSysClockFreq+0x2e4>
90004ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
90004eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90004eee:	e065      	b.n	90004fbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004ef0:	693b      	ldr	r3, [r7, #16]
90004ef2:	ee07 3a90 	vmov	s15, r3
90004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004efa:	eddf 6a48 	vldr	s13, [pc, #288]	; 9000501c <HAL_RCC_GetSysClockFreq+0x2ec>
90004efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004f02:	4b40      	ldr	r3, [pc, #256]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004f0a:	ee07 3a90 	vmov	s15, r3
90004f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004f12:	ed97 6a02 	vldr	s12, [r7, #8]
90004f16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 90005014 <HAL_RCC_GetSysClockFreq+0x2e4>
90004f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
90004f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90004f32:	e043      	b.n	90004fbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004f34:	693b      	ldr	r3, [r7, #16]
90004f36:	ee07 3a90 	vmov	s15, r3
90004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004f3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 90005020 <HAL_RCC_GetSysClockFreq+0x2f0>
90004f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004f46:	4b2f      	ldr	r3, [pc, #188]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004f4e:	ee07 3a90 	vmov	s15, r3
90004f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004f56:	ed97 6a02 	vldr	s12, [r7, #8]
90004f5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 90005014 <HAL_RCC_GetSysClockFreq+0x2e4>
90004f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
90004f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90004f76:	e021      	b.n	90004fbc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004f78:	693b      	ldr	r3, [r7, #16]
90004f7a:	ee07 3a90 	vmov	s15, r3
90004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004f82:	eddf 6a26 	vldr	s13, [pc, #152]	; 9000501c <HAL_RCC_GetSysClockFreq+0x2ec>
90004f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004f8a:	4b1e      	ldr	r3, [pc, #120]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004f92:	ee07 3a90 	vmov	s15, r3
90004f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004f9a:	ed97 6a02 	vldr	s12, [r7, #8]
90004f9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 90005014 <HAL_RCC_GetSysClockFreq+0x2e4>
90004fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
90004fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90004fba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
90004fbc:	4b11      	ldr	r3, [pc, #68]	; (90005004 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004fc0:	0a5b      	lsrs	r3, r3, #9
90004fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90004fc6:	3301      	adds	r3, #1
90004fc8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
90004fca:	683b      	ldr	r3, [r7, #0]
90004fcc:	ee07 3a90 	vmov	s15, r3
90004fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90004fd4:	edd7 6a07 	vldr	s13, [r7, #28]
90004fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
90004fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90004fe0:	ee17 3a90 	vmov	r3, s15
90004fe4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
90004fe6:	e005      	b.n	90004ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
90004fe8:	2300      	movs	r3, #0
90004fea:	61bb      	str	r3, [r7, #24]
    break;
90004fec:	e002      	b.n	90004ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
90004fee:	4b07      	ldr	r3, [pc, #28]	; (9000500c <HAL_RCC_GetSysClockFreq+0x2dc>)
90004ff0:	61bb      	str	r3, [r7, #24]
    break;
90004ff2:	bf00      	nop
  }

  return sysclockfreq;
90004ff4:	69bb      	ldr	r3, [r7, #24]
}
90004ff6:	4618      	mov	r0, r3
90004ff8:	3724      	adds	r7, #36	; 0x24
90004ffa:	46bd      	mov	sp, r7
90004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
90005000:	4770      	bx	lr
90005002:	bf00      	nop
90005004:	58024400 	.word	0x58024400
90005008:	03d09000 	.word	0x03d09000
9000500c:	003d0900 	.word	0x003d0900
90005010:	017d7840 	.word	0x017d7840
90005014:	46000000 	.word	0x46000000
90005018:	4c742400 	.word	0x4c742400
9000501c:	4a742400 	.word	0x4a742400
90005020:	4bbebc20 	.word	0x4bbebc20

90005024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90005024:	b580      	push	{r7, lr}
90005026:	b082      	sub	sp, #8
90005028:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000502a:	f7ff fe81 	bl	90004d30 <HAL_RCC_GetSysClockFreq>
9000502e:	4602      	mov	r2, r0
90005030:	4b10      	ldr	r3, [pc, #64]	; (90005074 <HAL_RCC_GetHCLKFreq+0x50>)
90005032:	699b      	ldr	r3, [r3, #24]
90005034:	0a1b      	lsrs	r3, r3, #8
90005036:	f003 030f 	and.w	r3, r3, #15
9000503a:	490f      	ldr	r1, [pc, #60]	; (90005078 <HAL_RCC_GetHCLKFreq+0x54>)
9000503c:	5ccb      	ldrb	r3, [r1, r3]
9000503e:	f003 031f 	and.w	r3, r3, #31
90005042:	fa22 f303 	lsr.w	r3, r2, r3
90005046:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90005048:	4b0a      	ldr	r3, [pc, #40]	; (90005074 <HAL_RCC_GetHCLKFreq+0x50>)
9000504a:	699b      	ldr	r3, [r3, #24]
9000504c:	f003 030f 	and.w	r3, r3, #15
90005050:	4a09      	ldr	r2, [pc, #36]	; (90005078 <HAL_RCC_GetHCLKFreq+0x54>)
90005052:	5cd3      	ldrb	r3, [r2, r3]
90005054:	f003 031f 	and.w	r3, r3, #31
90005058:	687a      	ldr	r2, [r7, #4]
9000505a:	fa22 f303 	lsr.w	r3, r2, r3
9000505e:	4a07      	ldr	r2, [pc, #28]	; (9000507c <HAL_RCC_GetHCLKFreq+0x58>)
90005060:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90005062:	4a07      	ldr	r2, [pc, #28]	; (90005080 <HAL_RCC_GetHCLKFreq+0x5c>)
90005064:	687b      	ldr	r3, [r7, #4]
90005066:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90005068:	4b04      	ldr	r3, [pc, #16]	; (9000507c <HAL_RCC_GetHCLKFreq+0x58>)
9000506a:	681b      	ldr	r3, [r3, #0]
}
9000506c:	4618      	mov	r0, r3
9000506e:	3708      	adds	r7, #8
90005070:	46bd      	mov	sp, r7
90005072:	bd80      	pop	{r7, pc}
90005074:	58024400 	.word	0x58024400
90005078:	90041ac8 	.word	0x90041ac8
9000507c:	2000000c 	.word	0x2000000c
90005080:	20000008 	.word	0x20000008

90005084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90005084:	b580      	push	{r7, lr}
90005086:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90005088:	f7ff ffcc 	bl	90005024 <HAL_RCC_GetHCLKFreq>
9000508c:	4602      	mov	r2, r0
9000508e:	4b06      	ldr	r3, [pc, #24]	; (900050a8 <HAL_RCC_GetPCLK1Freq+0x24>)
90005090:	69db      	ldr	r3, [r3, #28]
90005092:	091b      	lsrs	r3, r3, #4
90005094:	f003 0307 	and.w	r3, r3, #7
90005098:	4904      	ldr	r1, [pc, #16]	; (900050ac <HAL_RCC_GetPCLK1Freq+0x28>)
9000509a:	5ccb      	ldrb	r3, [r1, r3]
9000509c:	f003 031f 	and.w	r3, r3, #31
900050a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
900050a4:	4618      	mov	r0, r3
900050a6:	bd80      	pop	{r7, pc}
900050a8:	58024400 	.word	0x58024400
900050ac:	90041ac8 	.word	0x90041ac8

900050b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
900050b0:	b580      	push	{r7, lr}
900050b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
900050b4:	f7ff ffb6 	bl	90005024 <HAL_RCC_GetHCLKFreq>
900050b8:	4602      	mov	r2, r0
900050ba:	4b06      	ldr	r3, [pc, #24]	; (900050d4 <HAL_RCC_GetPCLK2Freq+0x24>)
900050bc:	69db      	ldr	r3, [r3, #28]
900050be:	0a1b      	lsrs	r3, r3, #8
900050c0:	f003 0307 	and.w	r3, r3, #7
900050c4:	4904      	ldr	r1, [pc, #16]	; (900050d8 <HAL_RCC_GetPCLK2Freq+0x28>)
900050c6:	5ccb      	ldrb	r3, [r1, r3]
900050c8:	f003 031f 	and.w	r3, r3, #31
900050cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
900050d0:	4618      	mov	r0, r3
900050d2:	bd80      	pop	{r7, pc}
900050d4:	58024400 	.word	0x58024400
900050d8:	90041ac8 	.word	0x90041ac8

900050dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
900050dc:	b580      	push	{r7, lr}
900050de:	b086      	sub	sp, #24
900050e0:	af00      	add	r7, sp, #0
900050e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
900050e4:	2300      	movs	r3, #0
900050e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
900050e8:	2300      	movs	r3, #0
900050ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
900050ec:	687b      	ldr	r3, [r7, #4]
900050ee:	681b      	ldr	r3, [r3, #0]
900050f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900050f4:	2b00      	cmp	r3, #0
900050f6:	d03f      	beq.n	90005178 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
900050f8:	687b      	ldr	r3, [r7, #4]
900050fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900050fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90005100:	d02a      	beq.n	90005158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
90005102:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90005106:	d824      	bhi.n	90005152 <HAL_RCCEx_PeriphCLKConfig+0x76>
90005108:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
9000510c:	d018      	beq.n	90005140 <HAL_RCCEx_PeriphCLKConfig+0x64>
9000510e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90005112:	d81e      	bhi.n	90005152 <HAL_RCCEx_PeriphCLKConfig+0x76>
90005114:	2b00      	cmp	r3, #0
90005116:	d003      	beq.n	90005120 <HAL_RCCEx_PeriphCLKConfig+0x44>
90005118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
9000511c:	d007      	beq.n	9000512e <HAL_RCCEx_PeriphCLKConfig+0x52>
9000511e:	e018      	b.n	90005152 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005120:	4ba3      	ldr	r3, [pc, #652]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005124:	4aa2      	ldr	r2, [pc, #648]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90005126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000512a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
9000512c:	e015      	b.n	9000515a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
9000512e:	687b      	ldr	r3, [r7, #4]
90005130:	3304      	adds	r3, #4
90005132:	2102      	movs	r1, #2
90005134:	4618      	mov	r0, r3
90005136:	f001 fff9 	bl	9000712c <RCCEx_PLL2_Config>
9000513a:	4603      	mov	r3, r0
9000513c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
9000513e:	e00c      	b.n	9000515a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90005140:	687b      	ldr	r3, [r7, #4]
90005142:	3324      	adds	r3, #36	; 0x24
90005144:	2102      	movs	r1, #2
90005146:	4618      	mov	r0, r3
90005148:	f002 f8a2 	bl	90007290 <RCCEx_PLL3_Config>
9000514c:	4603      	mov	r3, r0
9000514e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
90005150:	e003      	b.n	9000515a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005152:	2301      	movs	r3, #1
90005154:	75fb      	strb	r3, [r7, #23]
      break;
90005156:	e000      	b.n	9000515a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
90005158:	bf00      	nop
    }

    if(ret == HAL_OK)
9000515a:	7dfb      	ldrb	r3, [r7, #23]
9000515c:	2b00      	cmp	r3, #0
9000515e:	d109      	bne.n	90005174 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90005160:	4b93      	ldr	r3, [pc, #588]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90005162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005164:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90005168:	687b      	ldr	r3, [r7, #4]
9000516a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000516c:	4990      	ldr	r1, [pc, #576]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000516e:	4313      	orrs	r3, r2
90005170:	650b      	str	r3, [r1, #80]	; 0x50
90005172:	e001      	b.n	90005178 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005174:	7dfb      	ldrb	r3, [r7, #23]
90005176:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90005178:	687b      	ldr	r3, [r7, #4]
9000517a:	681b      	ldr	r3, [r3, #0]
9000517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90005180:	2b00      	cmp	r3, #0
90005182:	d03d      	beq.n	90005200 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
90005184:	687b      	ldr	r3, [r7, #4]
90005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005188:	2b04      	cmp	r3, #4
9000518a:	d826      	bhi.n	900051da <HAL_RCCEx_PeriphCLKConfig+0xfe>
9000518c:	a201      	add	r2, pc, #4	; (adr r2, 90005194 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
9000518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005192:	bf00      	nop
90005194:	900051a9 	.word	0x900051a9
90005198:	900051b7 	.word	0x900051b7
9000519c:	900051c9 	.word	0x900051c9
900051a0:	900051e1 	.word	0x900051e1
900051a4:	900051e1 	.word	0x900051e1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900051a8:	4b81      	ldr	r3, [pc, #516]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900051ac:	4a80      	ldr	r2, [pc, #512]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900051ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900051b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
900051b4:	e015      	b.n	900051e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
900051b6:	687b      	ldr	r3, [r7, #4]
900051b8:	3304      	adds	r3, #4
900051ba:	2100      	movs	r1, #0
900051bc:	4618      	mov	r0, r3
900051be:	f001 ffb5 	bl	9000712c <RCCEx_PLL2_Config>
900051c2:	4603      	mov	r3, r0
900051c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
900051c6:	e00c      	b.n	900051e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
900051c8:	687b      	ldr	r3, [r7, #4]
900051ca:	3324      	adds	r3, #36	; 0x24
900051cc:	2100      	movs	r1, #0
900051ce:	4618      	mov	r0, r3
900051d0:	f002 f85e 	bl	90007290 <RCCEx_PLL3_Config>
900051d4:	4603      	mov	r3, r0
900051d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
900051d8:	e003      	b.n	900051e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900051da:	2301      	movs	r3, #1
900051dc:	75fb      	strb	r3, [r7, #23]
      break;
900051de:	e000      	b.n	900051e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
900051e0:	bf00      	nop
    }

    if(ret == HAL_OK)
900051e2:	7dfb      	ldrb	r3, [r7, #23]
900051e4:	2b00      	cmp	r3, #0
900051e6:	d109      	bne.n	900051fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900051e8:	4b71      	ldr	r3, [pc, #452]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900051ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900051ec:	f023 0207 	bic.w	r2, r3, #7
900051f0:	687b      	ldr	r3, [r7, #4]
900051f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900051f4:	496e      	ldr	r1, [pc, #440]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900051f6:	4313      	orrs	r3, r2
900051f8:	650b      	str	r3, [r1, #80]	; 0x50
900051fa:	e001      	b.n	90005200 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
900051fc:	7dfb      	ldrb	r3, [r7, #23]
900051fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90005200:	687b      	ldr	r3, [r7, #4]
90005202:	681b      	ldr	r3, [r3, #0]
90005204:	f403 7300 	and.w	r3, r3, #512	; 0x200
90005208:	2b00      	cmp	r3, #0
9000520a:	d042      	beq.n	90005292 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
9000520c:	687b      	ldr	r3, [r7, #4]
9000520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005214:	d02b      	beq.n	9000526e <HAL_RCCEx_PeriphCLKConfig+0x192>
90005216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000521a:	d825      	bhi.n	90005268 <HAL_RCCEx_PeriphCLKConfig+0x18c>
9000521c:	2bc0      	cmp	r3, #192	; 0xc0
9000521e:	d028      	beq.n	90005272 <HAL_RCCEx_PeriphCLKConfig+0x196>
90005220:	2bc0      	cmp	r3, #192	; 0xc0
90005222:	d821      	bhi.n	90005268 <HAL_RCCEx_PeriphCLKConfig+0x18c>
90005224:	2b80      	cmp	r3, #128	; 0x80
90005226:	d016      	beq.n	90005256 <HAL_RCCEx_PeriphCLKConfig+0x17a>
90005228:	2b80      	cmp	r3, #128	; 0x80
9000522a:	d81d      	bhi.n	90005268 <HAL_RCCEx_PeriphCLKConfig+0x18c>
9000522c:	2b00      	cmp	r3, #0
9000522e:	d002      	beq.n	90005236 <HAL_RCCEx_PeriphCLKConfig+0x15a>
90005230:	2b40      	cmp	r3, #64	; 0x40
90005232:	d007      	beq.n	90005244 <HAL_RCCEx_PeriphCLKConfig+0x168>
90005234:	e018      	b.n	90005268 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005236:	4b5e      	ldr	r3, [pc, #376]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000523a:	4a5d      	ldr	r2, [pc, #372]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000523c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005240:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
90005242:	e017      	b.n	90005274 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90005244:	687b      	ldr	r3, [r7, #4]
90005246:	3304      	adds	r3, #4
90005248:	2100      	movs	r1, #0
9000524a:	4618      	mov	r0, r3
9000524c:	f001 ff6e 	bl	9000712c <RCCEx_PLL2_Config>
90005250:	4603      	mov	r3, r0
90005252:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
90005254:	e00e      	b.n	90005274 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
90005256:	687b      	ldr	r3, [r7, #4]
90005258:	3324      	adds	r3, #36	; 0x24
9000525a:	2100      	movs	r1, #0
9000525c:	4618      	mov	r0, r3
9000525e:	f002 f817 	bl	90007290 <RCCEx_PLL3_Config>
90005262:	4603      	mov	r3, r0
90005264:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
90005266:	e005      	b.n	90005274 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005268:	2301      	movs	r3, #1
9000526a:	75fb      	strb	r3, [r7, #23]
      break;
9000526c:	e002      	b.n	90005274 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
9000526e:	bf00      	nop
90005270:	e000      	b.n	90005274 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
90005272:	bf00      	nop
    }

    if(ret == HAL_OK)
90005274:	7dfb      	ldrb	r3, [r7, #23]
90005276:	2b00      	cmp	r3, #0
90005278:	d109      	bne.n	9000528e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000527a:	4b4d      	ldr	r3, [pc, #308]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000527c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000527e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
90005282:	687b      	ldr	r3, [r7, #4]
90005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005286:	494a      	ldr	r1, [pc, #296]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90005288:	4313      	orrs	r3, r2
9000528a:	650b      	str	r3, [r1, #80]	; 0x50
9000528c:	e001      	b.n	90005292 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000528e:	7dfb      	ldrb	r3, [r7, #23]
90005290:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90005292:	687b      	ldr	r3, [r7, #4]
90005294:	681b      	ldr	r3, [r3, #0]
90005296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000529a:	2b00      	cmp	r3, #0
9000529c:	d049      	beq.n	90005332 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
9000529e:	687b      	ldr	r3, [r7, #4]
900052a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900052a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
900052a8:	d030      	beq.n	9000530c <HAL_RCCEx_PeriphCLKConfig+0x230>
900052aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
900052ae:	d82a      	bhi.n	90005306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
900052b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
900052b4:	d02c      	beq.n	90005310 <HAL_RCCEx_PeriphCLKConfig+0x234>
900052b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
900052ba:	d824      	bhi.n	90005306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
900052bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
900052c0:	d018      	beq.n	900052f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
900052c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
900052c6:	d81e      	bhi.n	90005306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
900052c8:	2b00      	cmp	r3, #0
900052ca:	d003      	beq.n	900052d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
900052cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900052d0:	d007      	beq.n	900052e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
900052d2:	e018      	b.n	90005306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900052d4:	4b36      	ldr	r3, [pc, #216]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900052d8:	4a35      	ldr	r2, [pc, #212]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900052da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900052de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
900052e0:	e017      	b.n	90005312 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
900052e2:	687b      	ldr	r3, [r7, #4]
900052e4:	3304      	adds	r3, #4
900052e6:	2100      	movs	r1, #0
900052e8:	4618      	mov	r0, r3
900052ea:	f001 ff1f 	bl	9000712c <RCCEx_PLL2_Config>
900052ee:	4603      	mov	r3, r0
900052f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
900052f2:	e00e      	b.n	90005312 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
900052f4:	687b      	ldr	r3, [r7, #4]
900052f6:	3324      	adds	r3, #36	; 0x24
900052f8:	2100      	movs	r1, #0
900052fa:	4618      	mov	r0, r3
900052fc:	f001 ffc8 	bl	90007290 <RCCEx_PLL3_Config>
90005300:	4603      	mov	r3, r0
90005302:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90005304:	e005      	b.n	90005312 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
90005306:	2301      	movs	r3, #1
90005308:	75fb      	strb	r3, [r7, #23]
      break;
9000530a:	e002      	b.n	90005312 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
9000530c:	bf00      	nop
9000530e:	e000      	b.n	90005312 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
90005310:	bf00      	nop
    }

    if(ret == HAL_OK)
90005312:	7dfb      	ldrb	r3, [r7, #23]
90005314:	2b00      	cmp	r3, #0
90005316:	d10a      	bne.n	9000532e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90005318:	4b25      	ldr	r3, [pc, #148]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000531a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000531c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
90005320:	687b      	ldr	r3, [r7, #4]
90005322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90005326:	4922      	ldr	r1, [pc, #136]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90005328:	4313      	orrs	r3, r2
9000532a:	658b      	str	r3, [r1, #88]	; 0x58
9000532c:	e001      	b.n	90005332 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000532e:	7dfb      	ldrb	r3, [r7, #23]
90005330:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90005332:	687b      	ldr	r3, [r7, #4]
90005334:	681b      	ldr	r3, [r3, #0]
90005336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000533a:	2b00      	cmp	r3, #0
9000533c:	d04b      	beq.n	900053d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
9000533e:	687b      	ldr	r3, [r7, #4]
90005340:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90005344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90005348:	d030      	beq.n	900053ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
9000534a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
9000534e:	d82a      	bhi.n	900053a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
90005350:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
90005354:	d02e      	beq.n	900053b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
90005356:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
9000535a:	d824      	bhi.n	900053a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
9000535c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90005360:	d018      	beq.n	90005394 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
90005362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90005366:	d81e      	bhi.n	900053a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
90005368:	2b00      	cmp	r3, #0
9000536a:	d003      	beq.n	90005374 <HAL_RCCEx_PeriphCLKConfig+0x298>
9000536c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90005370:	d007      	beq.n	90005382 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
90005372:	e018      	b.n	900053a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005374:	4b0e      	ldr	r3, [pc, #56]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005378:	4a0d      	ldr	r2, [pc, #52]	; (900053b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000537a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000537e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90005380:	e019      	b.n	900053b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90005382:	687b      	ldr	r3, [r7, #4]
90005384:	3304      	adds	r3, #4
90005386:	2100      	movs	r1, #0
90005388:	4618      	mov	r0, r3
9000538a:	f001 fecf 	bl	9000712c <RCCEx_PLL2_Config>
9000538e:	4603      	mov	r3, r0
90005390:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
90005392:	e010      	b.n	900053b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90005394:	687b      	ldr	r3, [r7, #4]
90005396:	3324      	adds	r3, #36	; 0x24
90005398:	2100      	movs	r1, #0
9000539a:	4618      	mov	r0, r3
9000539c:	f001 ff78 	bl	90007290 <RCCEx_PLL3_Config>
900053a0:	4603      	mov	r3, r0
900053a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
900053a4:	e007      	b.n	900053b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
900053a6:	2301      	movs	r3, #1
900053a8:	75fb      	strb	r3, [r7, #23]
      break;
900053aa:	e004      	b.n	900053b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
900053ac:	bf00      	nop
900053ae:	e002      	b.n	900053b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
900053b0:	58024400 	.word	0x58024400
      break;
900053b4:	bf00      	nop
    }

    if(ret == HAL_OK)
900053b6:	7dfb      	ldrb	r3, [r7, #23]
900053b8:	2b00      	cmp	r3, #0
900053ba:	d10a      	bne.n	900053d2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
900053bc:	4b99      	ldr	r3, [pc, #612]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
900053be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900053c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
900053c4:	687b      	ldr	r3, [r7, #4]
900053c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
900053ca:	4996      	ldr	r1, [pc, #600]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
900053cc:	4313      	orrs	r3, r2
900053ce:	658b      	str	r3, [r1, #88]	; 0x58
900053d0:	e001      	b.n	900053d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
900053d2:	7dfb      	ldrb	r3, [r7, #23]
900053d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
900053d6:	687b      	ldr	r3, [r7, #4]
900053d8:	681b      	ldr	r3, [r3, #0]
900053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900053de:	2b00      	cmp	r3, #0
900053e0:	d032      	beq.n	90005448 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
900053e2:	687b      	ldr	r3, [r7, #4]
900053e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900053e6:	2b30      	cmp	r3, #48	; 0x30
900053e8:	d01c      	beq.n	90005424 <HAL_RCCEx_PeriphCLKConfig+0x348>
900053ea:	2b30      	cmp	r3, #48	; 0x30
900053ec:	d817      	bhi.n	9000541e <HAL_RCCEx_PeriphCLKConfig+0x342>
900053ee:	2b20      	cmp	r3, #32
900053f0:	d00c      	beq.n	9000540c <HAL_RCCEx_PeriphCLKConfig+0x330>
900053f2:	2b20      	cmp	r3, #32
900053f4:	d813      	bhi.n	9000541e <HAL_RCCEx_PeriphCLKConfig+0x342>
900053f6:	2b00      	cmp	r3, #0
900053f8:	d016      	beq.n	90005428 <HAL_RCCEx_PeriphCLKConfig+0x34c>
900053fa:	2b10      	cmp	r3, #16
900053fc:	d10f      	bne.n	9000541e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900053fe:	4b89      	ldr	r3, [pc, #548]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005402:	4a88      	ldr	r2, [pc, #544]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90005404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
9000540a:	e00e      	b.n	9000542a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
9000540c:	687b      	ldr	r3, [r7, #4]
9000540e:	3304      	adds	r3, #4
90005410:	2102      	movs	r1, #2
90005412:	4618      	mov	r0, r3
90005414:	f001 fe8a 	bl	9000712c <RCCEx_PLL2_Config>
90005418:	4603      	mov	r3, r0
9000541a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
9000541c:	e005      	b.n	9000542a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
9000541e:	2301      	movs	r3, #1
90005420:	75fb      	strb	r3, [r7, #23]
      break;
90005422:	e002      	b.n	9000542a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
90005424:	bf00      	nop
90005426:	e000      	b.n	9000542a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
90005428:	bf00      	nop
    }

    if(ret == HAL_OK)
9000542a:	7dfb      	ldrb	r3, [r7, #23]
9000542c:	2b00      	cmp	r3, #0
9000542e:	d109      	bne.n	90005444 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90005430:	4b7c      	ldr	r3, [pc, #496]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90005432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005434:	f023 0230 	bic.w	r2, r3, #48	; 0x30
90005438:	687b      	ldr	r3, [r7, #4]
9000543a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9000543c:	4979      	ldr	r1, [pc, #484]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000543e:	4313      	orrs	r3, r2
90005440:	64cb      	str	r3, [r1, #76]	; 0x4c
90005442:	e001      	b.n	90005448 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005444:	7dfb      	ldrb	r3, [r7, #23]
90005446:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90005448:	687b      	ldr	r3, [r7, #4]
9000544a:	681b      	ldr	r3, [r3, #0]
9000544c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90005450:	2b00      	cmp	r3, #0
90005452:	d047      	beq.n	900054e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
90005454:	687b      	ldr	r3, [r7, #4]
90005456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90005458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000545c:	d030      	beq.n	900054c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
9000545e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90005462:	d82a      	bhi.n	900054ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
90005464:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90005468:	d02c      	beq.n	900054c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
9000546a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
9000546e:	d824      	bhi.n	900054ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
90005470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90005474:	d018      	beq.n	900054a8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
90005476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000547a:	d81e      	bhi.n	900054ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
9000547c:	2b00      	cmp	r3, #0
9000547e:	d003      	beq.n	90005488 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
90005480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90005484:	d007      	beq.n	90005496 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
90005486:	e018      	b.n	900054ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005488:	4b66      	ldr	r3, [pc, #408]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000548c:	4a65      	ldr	r2, [pc, #404]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000548e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
90005494:	e017      	b.n	900054c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90005496:	687b      	ldr	r3, [r7, #4]
90005498:	3304      	adds	r3, #4
9000549a:	2100      	movs	r1, #0
9000549c:	4618      	mov	r0, r3
9000549e:	f001 fe45 	bl	9000712c <RCCEx_PLL2_Config>
900054a2:	4603      	mov	r3, r0
900054a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
900054a6:	e00e      	b.n	900054c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
900054a8:	687b      	ldr	r3, [r7, #4]
900054aa:	3324      	adds	r3, #36	; 0x24
900054ac:	2100      	movs	r1, #0
900054ae:	4618      	mov	r0, r3
900054b0:	f001 feee 	bl	90007290 <RCCEx_PLL3_Config>
900054b4:	4603      	mov	r3, r0
900054b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
900054b8:	e005      	b.n	900054c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900054ba:	2301      	movs	r3, #1
900054bc:	75fb      	strb	r3, [r7, #23]
      break;
900054be:	e002      	b.n	900054c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
900054c0:	bf00      	nop
900054c2:	e000      	b.n	900054c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
900054c4:	bf00      	nop
    }

    if(ret == HAL_OK)
900054c6:	7dfb      	ldrb	r3, [r7, #23]
900054c8:	2b00      	cmp	r3, #0
900054ca:	d109      	bne.n	900054e0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
900054cc:	4b55      	ldr	r3, [pc, #340]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
900054ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900054d0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
900054d4:	687b      	ldr	r3, [r7, #4]
900054d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900054d8:	4952      	ldr	r1, [pc, #328]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
900054da:	4313      	orrs	r3, r2
900054dc:	650b      	str	r3, [r1, #80]	; 0x50
900054de:	e001      	b.n	900054e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
900054e0:	7dfb      	ldrb	r3, [r7, #23]
900054e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
900054e4:	687b      	ldr	r3, [r7, #4]
900054e6:	681b      	ldr	r3, [r3, #0]
900054e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900054ec:	2b00      	cmp	r3, #0
900054ee:	d049      	beq.n	90005584 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
900054f0:	687b      	ldr	r3, [r7, #4]
900054f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900054f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900054f8:	d02e      	beq.n	90005558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
900054fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900054fe:	d828      	bhi.n	90005552 <HAL_RCCEx_PeriphCLKConfig+0x476>
90005500:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90005504:	d02a      	beq.n	9000555c <HAL_RCCEx_PeriphCLKConfig+0x480>
90005506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
9000550a:	d822      	bhi.n	90005552 <HAL_RCCEx_PeriphCLKConfig+0x476>
9000550c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90005510:	d026      	beq.n	90005560 <HAL_RCCEx_PeriphCLKConfig+0x484>
90005512:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90005516:	d81c      	bhi.n	90005552 <HAL_RCCEx_PeriphCLKConfig+0x476>
90005518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000551c:	d010      	beq.n	90005540 <HAL_RCCEx_PeriphCLKConfig+0x464>
9000551e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90005522:	d816      	bhi.n	90005552 <HAL_RCCEx_PeriphCLKConfig+0x476>
90005524:	2b00      	cmp	r3, #0
90005526:	d01d      	beq.n	90005564 <HAL_RCCEx_PeriphCLKConfig+0x488>
90005528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000552c:	d111      	bne.n	90005552 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
9000552e:	687b      	ldr	r3, [r7, #4]
90005530:	3304      	adds	r3, #4
90005532:	2101      	movs	r1, #1
90005534:	4618      	mov	r0, r3
90005536:	f001 fdf9 	bl	9000712c <RCCEx_PLL2_Config>
9000553a:	4603      	mov	r3, r0
9000553c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
9000553e:	e012      	b.n	90005566 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90005540:	687b      	ldr	r3, [r7, #4]
90005542:	3324      	adds	r3, #36	; 0x24
90005544:	2101      	movs	r1, #1
90005546:	4618      	mov	r0, r3
90005548:	f001 fea2 	bl	90007290 <RCCEx_PLL3_Config>
9000554c:	4603      	mov	r3, r0
9000554e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
90005550:	e009      	b.n	90005566 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005552:	2301      	movs	r3, #1
90005554:	75fb      	strb	r3, [r7, #23]
      break;
90005556:	e006      	b.n	90005566 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
90005558:	bf00      	nop
9000555a:	e004      	b.n	90005566 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
9000555c:	bf00      	nop
9000555e:	e002      	b.n	90005566 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
90005560:	bf00      	nop
90005562:	e000      	b.n	90005566 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
90005564:	bf00      	nop
    }

    if(ret == HAL_OK)
90005566:	7dfb      	ldrb	r3, [r7, #23]
90005568:	2b00      	cmp	r3, #0
9000556a:	d109      	bne.n	90005580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000556c:	4b2d      	ldr	r3, [pc, #180]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000556e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005570:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
90005574:	687b      	ldr	r3, [r7, #4]
90005576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005578:	492a      	ldr	r1, [pc, #168]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000557a:	4313      	orrs	r3, r2
9000557c:	650b      	str	r3, [r1, #80]	; 0x50
9000557e:	e001      	b.n	90005584 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005580:	7dfb      	ldrb	r3, [r7, #23]
90005582:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90005584:	687b      	ldr	r3, [r7, #4]
90005586:	681b      	ldr	r3, [r3, #0]
90005588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
9000558c:	2b00      	cmp	r3, #0
9000558e:	d04d      	beq.n	9000562c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
90005590:	687b      	ldr	r3, [r7, #4]
90005592:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90005596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
9000559a:	d02e      	beq.n	900055fa <HAL_RCCEx_PeriphCLKConfig+0x51e>
9000559c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900055a0:	d828      	bhi.n	900055f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
900055a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900055a6:	d02a      	beq.n	900055fe <HAL_RCCEx_PeriphCLKConfig+0x522>
900055a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900055ac:	d822      	bhi.n	900055f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
900055ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
900055b2:	d026      	beq.n	90005602 <HAL_RCCEx_PeriphCLKConfig+0x526>
900055b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
900055b8:	d81c      	bhi.n	900055f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
900055ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900055be:	d010      	beq.n	900055e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
900055c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900055c4:	d816      	bhi.n	900055f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
900055c6:	2b00      	cmp	r3, #0
900055c8:	d01d      	beq.n	90005606 <HAL_RCCEx_PeriphCLKConfig+0x52a>
900055ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900055ce:	d111      	bne.n	900055f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
900055d0:	687b      	ldr	r3, [r7, #4]
900055d2:	3304      	adds	r3, #4
900055d4:	2101      	movs	r1, #1
900055d6:	4618      	mov	r0, r3
900055d8:	f001 fda8 	bl	9000712c <RCCEx_PLL2_Config>
900055dc:	4603      	mov	r3, r0
900055de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
900055e0:	e012      	b.n	90005608 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
900055e2:	687b      	ldr	r3, [r7, #4]
900055e4:	3324      	adds	r3, #36	; 0x24
900055e6:	2101      	movs	r1, #1
900055e8:	4618      	mov	r0, r3
900055ea:	f001 fe51 	bl	90007290 <RCCEx_PLL3_Config>
900055ee:	4603      	mov	r3, r0
900055f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
900055f2:	e009      	b.n	90005608 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
900055f4:	2301      	movs	r3, #1
900055f6:	75fb      	strb	r3, [r7, #23]
      break;
900055f8:	e006      	b.n	90005608 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
900055fa:	bf00      	nop
900055fc:	e004      	b.n	90005608 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
900055fe:	bf00      	nop
90005600:	e002      	b.n	90005608 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
90005602:	bf00      	nop
90005604:	e000      	b.n	90005608 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
90005606:	bf00      	nop
    }

    if(ret == HAL_OK)
90005608:	7dfb      	ldrb	r3, [r7, #23]
9000560a:	2b00      	cmp	r3, #0
9000560c:	d10c      	bne.n	90005628 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000560e:	4b05      	ldr	r3, [pc, #20]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90005610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005612:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
90005616:	687b      	ldr	r3, [r7, #4]
90005618:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
9000561c:	4901      	ldr	r1, [pc, #4]	; (90005624 <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000561e:	4313      	orrs	r3, r2
90005620:	658b      	str	r3, [r1, #88]	; 0x58
90005622:	e003      	b.n	9000562c <HAL_RCCEx_PeriphCLKConfig+0x550>
90005624:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90005628:	7dfb      	ldrb	r3, [r7, #23]
9000562a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000562c:	687b      	ldr	r3, [r7, #4]
9000562e:	681b      	ldr	r3, [r3, #0]
90005630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90005634:	2b00      	cmp	r3, #0
90005636:	d02f      	beq.n	90005698 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
90005638:	687b      	ldr	r3, [r7, #4]
9000563a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000563c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90005640:	d00e      	beq.n	90005660 <HAL_RCCEx_PeriphCLKConfig+0x584>
90005642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90005646:	d814      	bhi.n	90005672 <HAL_RCCEx_PeriphCLKConfig+0x596>
90005648:	2b00      	cmp	r3, #0
9000564a:	d015      	beq.n	90005678 <HAL_RCCEx_PeriphCLKConfig+0x59c>
9000564c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90005650:	d10f      	bne.n	90005672 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005652:	4baf      	ldr	r3, [pc, #700]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005656:	4aae      	ldr	r2, [pc, #696]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90005658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000565c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
9000565e:	e00c      	b.n	9000567a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90005660:	687b      	ldr	r3, [r7, #4]
90005662:	3304      	adds	r3, #4
90005664:	2101      	movs	r1, #1
90005666:	4618      	mov	r0, r3
90005668:	f001 fd60 	bl	9000712c <RCCEx_PLL2_Config>
9000566c:	4603      	mov	r3, r0
9000566e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
90005670:	e003      	b.n	9000567a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005672:	2301      	movs	r3, #1
90005674:	75fb      	strb	r3, [r7, #23]
      break;
90005676:	e000      	b.n	9000567a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
90005678:	bf00      	nop
    }

    if(ret == HAL_OK)
9000567a:	7dfb      	ldrb	r3, [r7, #23]
9000567c:	2b00      	cmp	r3, #0
9000567e:	d109      	bne.n	90005694 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
90005680:	4ba3      	ldr	r3, [pc, #652]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90005682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005684:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
90005688:	687b      	ldr	r3, [r7, #4]
9000568a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000568c:	49a0      	ldr	r1, [pc, #640]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
9000568e:	4313      	orrs	r3, r2
90005690:	650b      	str	r3, [r1, #80]	; 0x50
90005692:	e001      	b.n	90005698 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005694:	7dfb      	ldrb	r3, [r7, #23]
90005696:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90005698:	687b      	ldr	r3, [r7, #4]
9000569a:	681b      	ldr	r3, [r3, #0]
9000569c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
900056a0:	2b00      	cmp	r3, #0
900056a2:	d032      	beq.n	9000570a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
900056a4:	687b      	ldr	r3, [r7, #4]
900056a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900056a8:	2b03      	cmp	r3, #3
900056aa:	d81b      	bhi.n	900056e4 <HAL_RCCEx_PeriphCLKConfig+0x608>
900056ac:	a201      	add	r2, pc, #4	; (adr r2, 900056b4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
900056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900056b2:	bf00      	nop
900056b4:	900056eb 	.word	0x900056eb
900056b8:	900056c5 	.word	0x900056c5
900056bc:	900056d3 	.word	0x900056d3
900056c0:	900056eb 	.word	0x900056eb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900056c4:	4b92      	ldr	r3, [pc, #584]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900056c8:	4a91      	ldr	r2, [pc, #580]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900056ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900056ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
900056d0:	e00c      	b.n	900056ec <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
900056d2:	687b      	ldr	r3, [r7, #4]
900056d4:	3304      	adds	r3, #4
900056d6:	2102      	movs	r1, #2
900056d8:	4618      	mov	r0, r3
900056da:	f001 fd27 	bl	9000712c <RCCEx_PLL2_Config>
900056de:	4603      	mov	r3, r0
900056e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
900056e2:	e003      	b.n	900056ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
900056e4:	2301      	movs	r3, #1
900056e6:	75fb      	strb	r3, [r7, #23]
      break;
900056e8:	e000      	b.n	900056ec <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
900056ea:	bf00      	nop
    }

    if(ret == HAL_OK)
900056ec:	7dfb      	ldrb	r3, [r7, #23]
900056ee:	2b00      	cmp	r3, #0
900056f0:	d109      	bne.n	90005706 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
900056f2:	4b87      	ldr	r3, [pc, #540]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900056f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900056f6:	f023 0203 	bic.w	r2, r3, #3
900056fa:	687b      	ldr	r3, [r7, #4]
900056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900056fe:	4984      	ldr	r1, [pc, #528]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90005700:	4313      	orrs	r3, r2
90005702:	64cb      	str	r3, [r1, #76]	; 0x4c
90005704:	e001      	b.n	9000570a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005706:	7dfb      	ldrb	r3, [r7, #23]
90005708:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000570a:	687b      	ldr	r3, [r7, #4]
9000570c:	681b      	ldr	r3, [r3, #0]
9000570e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90005712:	2b00      	cmp	r3, #0
90005714:	f000 8086 	beq.w	90005824 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
90005718:	4b7e      	ldr	r3, [pc, #504]	; (90005914 <HAL_RCCEx_PeriphCLKConfig+0x838>)
9000571a:	681b      	ldr	r3, [r3, #0]
9000571c:	4a7d      	ldr	r2, [pc, #500]	; (90005914 <HAL_RCCEx_PeriphCLKConfig+0x838>)
9000571e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90005722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90005724:	f7fc fc44 	bl	90001fb0 <HAL_GetTick>
90005728:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000572a:	e009      	b.n	90005740 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000572c:	f7fc fc40 	bl	90001fb0 <HAL_GetTick>
90005730:	4602      	mov	r2, r0
90005732:	693b      	ldr	r3, [r7, #16]
90005734:	1ad3      	subs	r3, r2, r3
90005736:	2b64      	cmp	r3, #100	; 0x64
90005738:	d902      	bls.n	90005740 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
9000573a:	2303      	movs	r3, #3
9000573c:	75fb      	strb	r3, [r7, #23]
        break;
9000573e:	e005      	b.n	9000574c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90005740:	4b74      	ldr	r3, [pc, #464]	; (90005914 <HAL_RCCEx_PeriphCLKConfig+0x838>)
90005742:	681b      	ldr	r3, [r3, #0]
90005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
90005748:	2b00      	cmp	r3, #0
9000574a:	d0ef      	beq.n	9000572c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
9000574c:	7dfb      	ldrb	r3, [r7, #23]
9000574e:	2b00      	cmp	r3, #0
90005750:	d166      	bne.n	90005820 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90005752:	4b6f      	ldr	r3, [pc, #444]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90005754:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90005756:	687b      	ldr	r3, [r7, #4]
90005758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000575c:	4053      	eors	r3, r2
9000575e:	f403 7340 	and.w	r3, r3, #768	; 0x300
90005762:	2b00      	cmp	r3, #0
90005764:	d013      	beq.n	9000578e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90005766:	4b6a      	ldr	r3, [pc, #424]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000576a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
9000576e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90005770:	4b67      	ldr	r3, [pc, #412]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90005774:	4a66      	ldr	r2, [pc, #408]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90005776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000577a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000577c:	4b64      	ldr	r3, [pc, #400]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
9000577e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90005780:	4a63      	ldr	r2, [pc, #396]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90005782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90005786:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90005788:	4a61      	ldr	r2, [pc, #388]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
9000578a:	68fb      	ldr	r3, [r7, #12]
9000578c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000578e:	687b      	ldr	r3, [r7, #4]
90005790:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90005794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005798:	d115      	bne.n	900057c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000579a:	f7fc fc09 	bl	90001fb0 <HAL_GetTick>
9000579e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900057a0:	e00b      	b.n	900057ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900057a2:	f7fc fc05 	bl	90001fb0 <HAL_GetTick>
900057a6:	4602      	mov	r2, r0
900057a8:	693b      	ldr	r3, [r7, #16]
900057aa:	1ad3      	subs	r3, r2, r3
900057ac:	f241 3288 	movw	r2, #5000	; 0x1388
900057b0:	4293      	cmp	r3, r2
900057b2:	d902      	bls.n	900057ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
900057b4:	2303      	movs	r3, #3
900057b6:	75fb      	strb	r3, [r7, #23]
            break;
900057b8:	e005      	b.n	900057c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900057ba:	4b55      	ldr	r3, [pc, #340]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900057be:	f003 0302 	and.w	r3, r3, #2
900057c2:	2b00      	cmp	r3, #0
900057c4:	d0ed      	beq.n	900057a2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
900057c6:	7dfb      	ldrb	r3, [r7, #23]
900057c8:	2b00      	cmp	r3, #0
900057ca:	d126      	bne.n	9000581a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900057cc:	687b      	ldr	r3, [r7, #4]
900057ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900057d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
900057d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900057da:	d10d      	bne.n	900057f8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
900057dc:	4b4c      	ldr	r3, [pc, #304]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900057de:	691b      	ldr	r3, [r3, #16]
900057e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
900057e4:	687b      	ldr	r3, [r7, #4]
900057e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900057ea:	0919      	lsrs	r1, r3, #4
900057ec:	4b4a      	ldr	r3, [pc, #296]	; (90005918 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
900057ee:	400b      	ands	r3, r1
900057f0:	4947      	ldr	r1, [pc, #284]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900057f2:	4313      	orrs	r3, r2
900057f4:	610b      	str	r3, [r1, #16]
900057f6:	e005      	b.n	90005804 <HAL_RCCEx_PeriphCLKConfig+0x728>
900057f8:	4b45      	ldr	r3, [pc, #276]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900057fa:	691b      	ldr	r3, [r3, #16]
900057fc:	4a44      	ldr	r2, [pc, #272]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900057fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
90005802:	6113      	str	r3, [r2, #16]
90005804:	4b42      	ldr	r3, [pc, #264]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90005806:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90005808:	687b      	ldr	r3, [r7, #4]
9000580a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000580e:	f3c3 030b 	ubfx	r3, r3, #0, #12
90005812:	493f      	ldr	r1, [pc, #252]	; (90005910 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90005814:	4313      	orrs	r3, r2
90005816:	670b      	str	r3, [r1, #112]	; 0x70
90005818:	e004      	b.n	90005824 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
9000581a:	7dfb      	ldrb	r3, [r7, #23]
9000581c:	75bb      	strb	r3, [r7, #22]
9000581e:	e001      	b.n	90005824 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90005820:	7dfb      	ldrb	r3, [r7, #23]
90005822:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90005824:	687b      	ldr	r3, [r7, #4]
90005826:	681b      	ldr	r3, [r3, #0]
90005828:	f003 0301 	and.w	r3, r3, #1
9000582c:	2b00      	cmp	r3, #0
9000582e:	f000 8085 	beq.w	9000593c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
90005832:	687b      	ldr	r3, [r7, #4]
90005834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90005836:	2b28      	cmp	r3, #40	; 0x28
90005838:	d866      	bhi.n	90005908 <HAL_RCCEx_PeriphCLKConfig+0x82c>
9000583a:	a201      	add	r2, pc, #4	; (adr r2, 90005840 <HAL_RCCEx_PeriphCLKConfig+0x764>)
9000583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005840:	9000591d 	.word	0x9000591d
90005844:	90005909 	.word	0x90005909
90005848:	90005909 	.word	0x90005909
9000584c:	90005909 	.word	0x90005909
90005850:	90005909 	.word	0x90005909
90005854:	90005909 	.word	0x90005909
90005858:	90005909 	.word	0x90005909
9000585c:	90005909 	.word	0x90005909
90005860:	900058e5 	.word	0x900058e5
90005864:	90005909 	.word	0x90005909
90005868:	90005909 	.word	0x90005909
9000586c:	90005909 	.word	0x90005909
90005870:	90005909 	.word	0x90005909
90005874:	90005909 	.word	0x90005909
90005878:	90005909 	.word	0x90005909
9000587c:	90005909 	.word	0x90005909
90005880:	900058f7 	.word	0x900058f7
90005884:	90005909 	.word	0x90005909
90005888:	90005909 	.word	0x90005909
9000588c:	90005909 	.word	0x90005909
90005890:	90005909 	.word	0x90005909
90005894:	90005909 	.word	0x90005909
90005898:	90005909 	.word	0x90005909
9000589c:	90005909 	.word	0x90005909
900058a0:	9000591d 	.word	0x9000591d
900058a4:	90005909 	.word	0x90005909
900058a8:	90005909 	.word	0x90005909
900058ac:	90005909 	.word	0x90005909
900058b0:	90005909 	.word	0x90005909
900058b4:	90005909 	.word	0x90005909
900058b8:	90005909 	.word	0x90005909
900058bc:	90005909 	.word	0x90005909
900058c0:	9000591d 	.word	0x9000591d
900058c4:	90005909 	.word	0x90005909
900058c8:	90005909 	.word	0x90005909
900058cc:	90005909 	.word	0x90005909
900058d0:	90005909 	.word	0x90005909
900058d4:	90005909 	.word	0x90005909
900058d8:	90005909 	.word	0x90005909
900058dc:	90005909 	.word	0x90005909
900058e0:	9000591d 	.word	0x9000591d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
900058e4:	687b      	ldr	r3, [r7, #4]
900058e6:	3304      	adds	r3, #4
900058e8:	2101      	movs	r1, #1
900058ea:	4618      	mov	r0, r3
900058ec:	f001 fc1e 	bl	9000712c <RCCEx_PLL2_Config>
900058f0:	4603      	mov	r3, r0
900058f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
900058f4:	e013      	b.n	9000591e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
900058f6:	687b      	ldr	r3, [r7, #4]
900058f8:	3324      	adds	r3, #36	; 0x24
900058fa:	2101      	movs	r1, #1
900058fc:	4618      	mov	r0, r3
900058fe:	f001 fcc7 	bl	90007290 <RCCEx_PLL3_Config>
90005902:	4603      	mov	r3, r0
90005904:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
90005906:	e00a      	b.n	9000591e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005908:	2301      	movs	r3, #1
9000590a:	75fb      	strb	r3, [r7, #23]
      break;
9000590c:	e007      	b.n	9000591e <HAL_RCCEx_PeriphCLKConfig+0x842>
9000590e:	bf00      	nop
90005910:	58024400 	.word	0x58024400
90005914:	58024800 	.word	0x58024800
90005918:	00ffffcf 	.word	0x00ffffcf
      break;
9000591c:	bf00      	nop
    }

    if(ret == HAL_OK)
9000591e:	7dfb      	ldrb	r3, [r7, #23]
90005920:	2b00      	cmp	r3, #0
90005922:	d109      	bne.n	90005938 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90005924:	4b96      	ldr	r3, [pc, #600]	; (90005b80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90005926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005928:	f023 0238 	bic.w	r2, r3, #56	; 0x38
9000592c:	687b      	ldr	r3, [r7, #4]
9000592e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90005930:	4993      	ldr	r1, [pc, #588]	; (90005b80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90005932:	4313      	orrs	r3, r2
90005934:	654b      	str	r3, [r1, #84]	; 0x54
90005936:	e001      	b.n	9000593c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005938:	7dfb      	ldrb	r3, [r7, #23]
9000593a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000593c:	687b      	ldr	r3, [r7, #4]
9000593e:	681b      	ldr	r3, [r3, #0]
90005940:	f003 0302 	and.w	r3, r3, #2
90005944:	2b00      	cmp	r3, #0
90005946:	d038      	beq.n	900059ba <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
90005948:	687b      	ldr	r3, [r7, #4]
9000594a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000594c:	2b05      	cmp	r3, #5
9000594e:	d821      	bhi.n	90005994 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
90005950:	a201      	add	r2, pc, #4	; (adr r2, 90005958 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
90005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005956:	bf00      	nop
90005958:	9000599b 	.word	0x9000599b
9000595c:	90005971 	.word	0x90005971
90005960:	90005983 	.word	0x90005983
90005964:	9000599b 	.word	0x9000599b
90005968:	9000599b 	.word	0x9000599b
9000596c:	9000599b 	.word	0x9000599b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90005970:	687b      	ldr	r3, [r7, #4]
90005972:	3304      	adds	r3, #4
90005974:	2101      	movs	r1, #1
90005976:	4618      	mov	r0, r3
90005978:	f001 fbd8 	bl	9000712c <RCCEx_PLL2_Config>
9000597c:	4603      	mov	r3, r0
9000597e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
90005980:	e00c      	b.n	9000599c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90005982:	687b      	ldr	r3, [r7, #4]
90005984:	3324      	adds	r3, #36	; 0x24
90005986:	2101      	movs	r1, #1
90005988:	4618      	mov	r0, r3
9000598a:	f001 fc81 	bl	90007290 <RCCEx_PLL3_Config>
9000598e:	4603      	mov	r3, r0
90005990:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
90005992:	e003      	b.n	9000599c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005994:	2301      	movs	r3, #1
90005996:	75fb      	strb	r3, [r7, #23]
      break;
90005998:	e000      	b.n	9000599c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
9000599a:	bf00      	nop
    }

    if(ret == HAL_OK)
9000599c:	7dfb      	ldrb	r3, [r7, #23]
9000599e:	2b00      	cmp	r3, #0
900059a0:	d109      	bne.n	900059b6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
900059a2:	4b77      	ldr	r3, [pc, #476]	; (90005b80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
900059a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900059a6:	f023 0207 	bic.w	r2, r3, #7
900059aa:	687b      	ldr	r3, [r7, #4]
900059ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900059ae:	4974      	ldr	r1, [pc, #464]	; (90005b80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
900059b0:	4313      	orrs	r3, r2
900059b2:	654b      	str	r3, [r1, #84]	; 0x54
900059b4:	e001      	b.n	900059ba <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
900059b6:	7dfb      	ldrb	r3, [r7, #23]
900059b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
900059ba:	687b      	ldr	r3, [r7, #4]
900059bc:	681b      	ldr	r3, [r3, #0]
900059be:	f003 0304 	and.w	r3, r3, #4
900059c2:	2b00      	cmp	r3, #0
900059c4:	d03a      	beq.n	90005a3c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
900059c6:	687b      	ldr	r3, [r7, #4]
900059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900059cc:	2b05      	cmp	r3, #5
900059ce:	d821      	bhi.n	90005a14 <HAL_RCCEx_PeriphCLKConfig+0x938>
900059d0:	a201      	add	r2, pc, #4	; (adr r2, 900059d8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
900059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900059d6:	bf00      	nop
900059d8:	90005a1b 	.word	0x90005a1b
900059dc:	900059f1 	.word	0x900059f1
900059e0:	90005a03 	.word	0x90005a03
900059e4:	90005a1b 	.word	0x90005a1b
900059e8:	90005a1b 	.word	0x90005a1b
900059ec:	90005a1b 	.word	0x90005a1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
900059f0:	687b      	ldr	r3, [r7, #4]
900059f2:	3304      	adds	r3, #4
900059f4:	2101      	movs	r1, #1
900059f6:	4618      	mov	r0, r3
900059f8:	f001 fb98 	bl	9000712c <RCCEx_PLL2_Config>
900059fc:	4603      	mov	r3, r0
900059fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
90005a00:	e00c      	b.n	90005a1c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90005a02:	687b      	ldr	r3, [r7, #4]
90005a04:	3324      	adds	r3, #36	; 0x24
90005a06:	2101      	movs	r1, #1
90005a08:	4618      	mov	r0, r3
90005a0a:	f001 fc41 	bl	90007290 <RCCEx_PLL3_Config>
90005a0e:	4603      	mov	r3, r0
90005a10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
90005a12:	e003      	b.n	90005a1c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005a14:	2301      	movs	r3, #1
90005a16:	75fb      	strb	r3, [r7, #23]
      break;
90005a18:	e000      	b.n	90005a1c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
90005a1a:	bf00      	nop
    }

    if(ret == HAL_OK)
90005a1c:	7dfb      	ldrb	r3, [r7, #23]
90005a1e:	2b00      	cmp	r3, #0
90005a20:	d10a      	bne.n	90005a38 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
90005a22:	4b57      	ldr	r3, [pc, #348]	; (90005b80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90005a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005a26:	f023 0207 	bic.w	r2, r3, #7
90005a2a:	687b      	ldr	r3, [r7, #4]
90005a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90005a30:	4953      	ldr	r1, [pc, #332]	; (90005b80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90005a32:	4313      	orrs	r3, r2
90005a34:	658b      	str	r3, [r1, #88]	; 0x58
90005a36:	e001      	b.n	90005a3c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005a38:	7dfb      	ldrb	r3, [r7, #23]
90005a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90005a3c:	687b      	ldr	r3, [r7, #4]
90005a3e:	681b      	ldr	r3, [r3, #0]
90005a40:	f003 0320 	and.w	r3, r3, #32
90005a44:	2b00      	cmp	r3, #0
90005a46:	d04b      	beq.n	90005ae0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
90005a48:	687b      	ldr	r3, [r7, #4]
90005a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90005a52:	d02e      	beq.n	90005ab2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
90005a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90005a58:	d828      	bhi.n	90005aac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90005a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90005a5e:	d02a      	beq.n	90005ab6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
90005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90005a64:	d822      	bhi.n	90005aac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90005a66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90005a6a:	d026      	beq.n	90005aba <HAL_RCCEx_PeriphCLKConfig+0x9de>
90005a6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90005a70:	d81c      	bhi.n	90005aac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90005a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90005a76:	d010      	beq.n	90005a9a <HAL_RCCEx_PeriphCLKConfig+0x9be>
90005a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90005a7c:	d816      	bhi.n	90005aac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90005a7e:	2b00      	cmp	r3, #0
90005a80:	d01d      	beq.n	90005abe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
90005a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90005a86:	d111      	bne.n	90005aac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90005a88:	687b      	ldr	r3, [r7, #4]
90005a8a:	3304      	adds	r3, #4
90005a8c:	2100      	movs	r1, #0
90005a8e:	4618      	mov	r0, r3
90005a90:	f001 fb4c 	bl	9000712c <RCCEx_PLL2_Config>
90005a94:	4603      	mov	r3, r0
90005a96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
90005a98:	e012      	b.n	90005ac0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90005a9a:	687b      	ldr	r3, [r7, #4]
90005a9c:	3324      	adds	r3, #36	; 0x24
90005a9e:	2102      	movs	r1, #2
90005aa0:	4618      	mov	r0, r3
90005aa2:	f001 fbf5 	bl	90007290 <RCCEx_PLL3_Config>
90005aa6:	4603      	mov	r3, r0
90005aa8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
90005aaa:	e009      	b.n	90005ac0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005aac:	2301      	movs	r3, #1
90005aae:	75fb      	strb	r3, [r7, #23]
      break;
90005ab0:	e006      	b.n	90005ac0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90005ab2:	bf00      	nop
90005ab4:	e004      	b.n	90005ac0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90005ab6:	bf00      	nop
90005ab8:	e002      	b.n	90005ac0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90005aba:	bf00      	nop
90005abc:	e000      	b.n	90005ac0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90005abe:	bf00      	nop
    }

    if(ret == HAL_OK)
90005ac0:	7dfb      	ldrb	r3, [r7, #23]
90005ac2:	2b00      	cmp	r3, #0
90005ac4:	d10a      	bne.n	90005adc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90005ac6:	4b2e      	ldr	r3, [pc, #184]	; (90005b80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90005ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005aca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
90005ace:	687b      	ldr	r3, [r7, #4]
90005ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005ad4:	492a      	ldr	r1, [pc, #168]	; (90005b80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90005ad6:	4313      	orrs	r3, r2
90005ad8:	654b      	str	r3, [r1, #84]	; 0x54
90005ada:	e001      	b.n	90005ae0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005adc:	7dfb      	ldrb	r3, [r7, #23]
90005ade:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90005ae0:	687b      	ldr	r3, [r7, #4]
90005ae2:	681b      	ldr	r3, [r3, #0]
90005ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
90005ae8:	2b00      	cmp	r3, #0
90005aea:	d04d      	beq.n	90005b88 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
90005aec:	687b      	ldr	r3, [r7, #4]
90005aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90005af2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90005af6:	d02e      	beq.n	90005b56 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
90005af8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90005afc:	d828      	bhi.n	90005b50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
90005afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90005b02:	d02a      	beq.n	90005b5a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
90005b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90005b08:	d822      	bhi.n	90005b50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
90005b0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90005b0e:	d026      	beq.n	90005b5e <HAL_RCCEx_PeriphCLKConfig+0xa82>
90005b10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90005b14:	d81c      	bhi.n	90005b50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
90005b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90005b1a:	d010      	beq.n	90005b3e <HAL_RCCEx_PeriphCLKConfig+0xa62>
90005b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90005b20:	d816      	bhi.n	90005b50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
90005b22:	2b00      	cmp	r3, #0
90005b24:	d01d      	beq.n	90005b62 <HAL_RCCEx_PeriphCLKConfig+0xa86>
90005b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90005b2a:	d111      	bne.n	90005b50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90005b2c:	687b      	ldr	r3, [r7, #4]
90005b2e:	3304      	adds	r3, #4
90005b30:	2100      	movs	r1, #0
90005b32:	4618      	mov	r0, r3
90005b34:	f001 fafa 	bl	9000712c <RCCEx_PLL2_Config>
90005b38:	4603      	mov	r3, r0
90005b3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
90005b3c:	e012      	b.n	90005b64 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90005b3e:	687b      	ldr	r3, [r7, #4]
90005b40:	3324      	adds	r3, #36	; 0x24
90005b42:	2102      	movs	r1, #2
90005b44:	4618      	mov	r0, r3
90005b46:	f001 fba3 	bl	90007290 <RCCEx_PLL3_Config>
90005b4a:	4603      	mov	r3, r0
90005b4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
90005b4e:	e009      	b.n	90005b64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005b50:	2301      	movs	r3, #1
90005b52:	75fb      	strb	r3, [r7, #23]
      break;
90005b54:	e006      	b.n	90005b64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90005b56:	bf00      	nop
90005b58:	e004      	b.n	90005b64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90005b5a:	bf00      	nop
90005b5c:	e002      	b.n	90005b64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90005b5e:	bf00      	nop
90005b60:	e000      	b.n	90005b64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90005b62:	bf00      	nop
    }

    if(ret == HAL_OK)
90005b64:	7dfb      	ldrb	r3, [r7, #23]
90005b66:	2b00      	cmp	r3, #0
90005b68:	d10c      	bne.n	90005b84 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90005b6a:	4b05      	ldr	r3, [pc, #20]	; (90005b80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90005b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005b6e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
90005b72:	687b      	ldr	r3, [r7, #4]
90005b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90005b78:	4901      	ldr	r1, [pc, #4]	; (90005b80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90005b7a:	4313      	orrs	r3, r2
90005b7c:	658b      	str	r3, [r1, #88]	; 0x58
90005b7e:	e003      	b.n	90005b88 <HAL_RCCEx_PeriphCLKConfig+0xaac>
90005b80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90005b84:	7dfb      	ldrb	r3, [r7, #23]
90005b86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90005b88:	687b      	ldr	r3, [r7, #4]
90005b8a:	681b      	ldr	r3, [r3, #0]
90005b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
90005b90:	2b00      	cmp	r3, #0
90005b92:	d04b      	beq.n	90005c2c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
90005b94:	687b      	ldr	r3, [r7, #4]
90005b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90005b9a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90005b9e:	d02e      	beq.n	90005bfe <HAL_RCCEx_PeriphCLKConfig+0xb22>
90005ba0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90005ba4:	d828      	bhi.n	90005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90005ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90005baa:	d02a      	beq.n	90005c02 <HAL_RCCEx_PeriphCLKConfig+0xb26>
90005bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90005bb0:	d822      	bhi.n	90005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90005bb2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90005bb6:	d026      	beq.n	90005c06 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
90005bb8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90005bbc:	d81c      	bhi.n	90005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90005bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90005bc2:	d010      	beq.n	90005be6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
90005bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90005bc8:	d816      	bhi.n	90005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90005bca:	2b00      	cmp	r3, #0
90005bcc:	d01d      	beq.n	90005c0a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
90005bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90005bd2:	d111      	bne.n	90005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90005bd4:	687b      	ldr	r3, [r7, #4]
90005bd6:	3304      	adds	r3, #4
90005bd8:	2100      	movs	r1, #0
90005bda:	4618      	mov	r0, r3
90005bdc:	f001 faa6 	bl	9000712c <RCCEx_PLL2_Config>
90005be0:	4603      	mov	r3, r0
90005be2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
90005be4:	e012      	b.n	90005c0c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90005be6:	687b      	ldr	r3, [r7, #4]
90005be8:	3324      	adds	r3, #36	; 0x24
90005bea:	2102      	movs	r1, #2
90005bec:	4618      	mov	r0, r3
90005bee:	f001 fb4f 	bl	90007290 <RCCEx_PLL3_Config>
90005bf2:	4603      	mov	r3, r0
90005bf4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
90005bf6:	e009      	b.n	90005c0c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005bf8:	2301      	movs	r3, #1
90005bfa:	75fb      	strb	r3, [r7, #23]
      break;
90005bfc:	e006      	b.n	90005c0c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
90005bfe:	bf00      	nop
90005c00:	e004      	b.n	90005c0c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
90005c02:	bf00      	nop
90005c04:	e002      	b.n	90005c0c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
90005c06:	bf00      	nop
90005c08:	e000      	b.n	90005c0c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
90005c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
90005c0c:	7dfb      	ldrb	r3, [r7, #23]
90005c0e:	2b00      	cmp	r3, #0
90005c10:	d10a      	bne.n	90005c28 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
90005c12:	4b9d      	ldr	r3, [pc, #628]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
90005c1a:	687b      	ldr	r3, [r7, #4]
90005c1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90005c20:	4999      	ldr	r1, [pc, #612]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005c22:	4313      	orrs	r3, r2
90005c24:	658b      	str	r3, [r1, #88]	; 0x58
90005c26:	e001      	b.n	90005c2c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005c28:	7dfb      	ldrb	r3, [r7, #23]
90005c2a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90005c2c:	687b      	ldr	r3, [r7, #4]
90005c2e:	681b      	ldr	r3, [r3, #0]
90005c30:	f003 0308 	and.w	r3, r3, #8
90005c34:	2b00      	cmp	r3, #0
90005c36:	d01a      	beq.n	90005c6e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
90005c38:	687b      	ldr	r3, [r7, #4]
90005c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90005c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90005c42:	d10a      	bne.n	90005c5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
90005c44:	687b      	ldr	r3, [r7, #4]
90005c46:	3324      	adds	r3, #36	; 0x24
90005c48:	2102      	movs	r1, #2
90005c4a:	4618      	mov	r0, r3
90005c4c:	f001 fb20 	bl	90007290 <RCCEx_PLL3_Config>
90005c50:	4603      	mov	r3, r0
90005c52:	2b00      	cmp	r3, #0
90005c54:	d001      	beq.n	90005c5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
90005c56:	2301      	movs	r3, #1
90005c58:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90005c5a:	4b8b      	ldr	r3, [pc, #556]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005c5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
90005c62:	687b      	ldr	r3, [r7, #4]
90005c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90005c68:	4987      	ldr	r1, [pc, #540]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005c6a:	4313      	orrs	r3, r2
90005c6c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90005c6e:	687b      	ldr	r3, [r7, #4]
90005c70:	681b      	ldr	r3, [r3, #0]
90005c72:	f003 0310 	and.w	r3, r3, #16
90005c76:	2b00      	cmp	r3, #0
90005c78:	d01a      	beq.n	90005cb0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
90005c7a:	687b      	ldr	r3, [r7, #4]
90005c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
90005c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005c84:	d10a      	bne.n	90005c9c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
90005c86:	687b      	ldr	r3, [r7, #4]
90005c88:	3324      	adds	r3, #36	; 0x24
90005c8a:	2102      	movs	r1, #2
90005c8c:	4618      	mov	r0, r3
90005c8e:	f001 faff 	bl	90007290 <RCCEx_PLL3_Config>
90005c92:	4603      	mov	r3, r0
90005c94:	2b00      	cmp	r3, #0
90005c96:	d001      	beq.n	90005c9c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
90005c98:	2301      	movs	r3, #1
90005c9a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90005c9c:	4b7a      	ldr	r3, [pc, #488]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90005ca4:	687b      	ldr	r3, [r7, #4]
90005ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
90005caa:	4977      	ldr	r1, [pc, #476]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005cac:	4313      	orrs	r3, r2
90005cae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90005cb0:	687b      	ldr	r3, [r7, #4]
90005cb2:	681b      	ldr	r3, [r3, #0]
90005cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90005cb8:	2b00      	cmp	r3, #0
90005cba:	d034      	beq.n	90005d26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
90005cbc:	687b      	ldr	r3, [r7, #4]
90005cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90005cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90005cc6:	d01d      	beq.n	90005d04 <HAL_RCCEx_PeriphCLKConfig+0xc28>
90005cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90005ccc:	d817      	bhi.n	90005cfe <HAL_RCCEx_PeriphCLKConfig+0xc22>
90005cce:	2b00      	cmp	r3, #0
90005cd0:	d003      	beq.n	90005cda <HAL_RCCEx_PeriphCLKConfig+0xbfe>
90005cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90005cd6:	d009      	beq.n	90005cec <HAL_RCCEx_PeriphCLKConfig+0xc10>
90005cd8:	e011      	b.n	90005cfe <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90005cda:	687b      	ldr	r3, [r7, #4]
90005cdc:	3304      	adds	r3, #4
90005cde:	2100      	movs	r1, #0
90005ce0:	4618      	mov	r0, r3
90005ce2:	f001 fa23 	bl	9000712c <RCCEx_PLL2_Config>
90005ce6:	4603      	mov	r3, r0
90005ce8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
90005cea:	e00c      	b.n	90005d06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90005cec:	687b      	ldr	r3, [r7, #4]
90005cee:	3324      	adds	r3, #36	; 0x24
90005cf0:	2102      	movs	r1, #2
90005cf2:	4618      	mov	r0, r3
90005cf4:	f001 facc 	bl	90007290 <RCCEx_PLL3_Config>
90005cf8:	4603      	mov	r3, r0
90005cfa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
90005cfc:	e003      	b.n	90005d06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005cfe:	2301      	movs	r3, #1
90005d00:	75fb      	strb	r3, [r7, #23]
      break;
90005d02:	e000      	b.n	90005d06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
90005d04:	bf00      	nop
    }

    if(ret == HAL_OK)
90005d06:	7dfb      	ldrb	r3, [r7, #23]
90005d08:	2b00      	cmp	r3, #0
90005d0a:	d10a      	bne.n	90005d22 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90005d0c:	4b5e      	ldr	r3, [pc, #376]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005d10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90005d14:	687b      	ldr	r3, [r7, #4]
90005d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90005d1a:	495b      	ldr	r1, [pc, #364]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005d1c:	4313      	orrs	r3, r2
90005d1e:	658b      	str	r3, [r1, #88]	; 0x58
90005d20:	e001      	b.n	90005d26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005d22:	7dfb      	ldrb	r3, [r7, #23]
90005d24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90005d26:	687b      	ldr	r3, [r7, #4]
90005d28:	681b      	ldr	r3, [r3, #0]
90005d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90005d2e:	2b00      	cmp	r3, #0
90005d30:	d033      	beq.n	90005d9a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
90005d32:	687b      	ldr	r3, [r7, #4]
90005d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005d38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90005d3c:	d01c      	beq.n	90005d78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
90005d3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90005d42:	d816      	bhi.n	90005d72 <HAL_RCCEx_PeriphCLKConfig+0xc96>
90005d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90005d48:	d003      	beq.n	90005d52 <HAL_RCCEx_PeriphCLKConfig+0xc76>
90005d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90005d4e:	d007      	beq.n	90005d60 <HAL_RCCEx_PeriphCLKConfig+0xc84>
90005d50:	e00f      	b.n	90005d72 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005d52:	4b4d      	ldr	r3, [pc, #308]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005d56:	4a4c      	ldr	r2, [pc, #304]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
90005d5e:	e00c      	b.n	90005d7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90005d60:	687b      	ldr	r3, [r7, #4]
90005d62:	3324      	adds	r3, #36	; 0x24
90005d64:	2101      	movs	r1, #1
90005d66:	4618      	mov	r0, r3
90005d68:	f001 fa92 	bl	90007290 <RCCEx_PLL3_Config>
90005d6c:	4603      	mov	r3, r0
90005d6e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
90005d70:	e003      	b.n	90005d7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005d72:	2301      	movs	r3, #1
90005d74:	75fb      	strb	r3, [r7, #23]
      break;
90005d76:	e000      	b.n	90005d7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
90005d78:	bf00      	nop
    }

    if(ret == HAL_OK)
90005d7a:	7dfb      	ldrb	r3, [r7, #23]
90005d7c:	2b00      	cmp	r3, #0
90005d7e:	d10a      	bne.n	90005d96 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90005d80:	4b41      	ldr	r3, [pc, #260]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90005d88:	687b      	ldr	r3, [r7, #4]
90005d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005d8e:	493e      	ldr	r1, [pc, #248]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005d90:	4313      	orrs	r3, r2
90005d92:	654b      	str	r3, [r1, #84]	; 0x54
90005d94:	e001      	b.n	90005d9a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005d96:	7dfb      	ldrb	r3, [r7, #23]
90005d98:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90005d9a:	687b      	ldr	r3, [r7, #4]
90005d9c:	681b      	ldr	r3, [r3, #0]
90005d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90005da2:	2b00      	cmp	r3, #0
90005da4:	d029      	beq.n	90005dfa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
90005da6:	687b      	ldr	r3, [r7, #4]
90005da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005daa:	2b00      	cmp	r3, #0
90005dac:	d003      	beq.n	90005db6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
90005dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90005db2:	d007      	beq.n	90005dc4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
90005db4:	e00f      	b.n	90005dd6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005db6:	4b34      	ldr	r3, [pc, #208]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005dba:	4a33      	ldr	r2, [pc, #204]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
90005dc2:	e00b      	b.n	90005ddc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
90005dc4:	687b      	ldr	r3, [r7, #4]
90005dc6:	3304      	adds	r3, #4
90005dc8:	2102      	movs	r1, #2
90005dca:	4618      	mov	r0, r3
90005dcc:	f001 f9ae 	bl	9000712c <RCCEx_PLL2_Config>
90005dd0:	4603      	mov	r3, r0
90005dd2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
90005dd4:	e002      	b.n	90005ddc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
90005dd6:	2301      	movs	r3, #1
90005dd8:	75fb      	strb	r3, [r7, #23]
      break;
90005dda:	bf00      	nop
    }

    if(ret == HAL_OK)
90005ddc:	7dfb      	ldrb	r3, [r7, #23]
90005dde:	2b00      	cmp	r3, #0
90005de0:	d109      	bne.n	90005df6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90005de2:	4b29      	ldr	r3, [pc, #164]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005de6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
90005dea:	687b      	ldr	r3, [r7, #4]
90005dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005dee:	4926      	ldr	r1, [pc, #152]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005df0:	4313      	orrs	r3, r2
90005df2:	64cb      	str	r3, [r1, #76]	; 0x4c
90005df4:	e001      	b.n	90005dfa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005df6:	7dfb      	ldrb	r3, [r7, #23]
90005df8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90005dfa:	687b      	ldr	r3, [r7, #4]
90005dfc:	681b      	ldr	r3, [r3, #0]
90005dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90005e02:	2b00      	cmp	r3, #0
90005e04:	d00a      	beq.n	90005e1c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
90005e06:	687b      	ldr	r3, [r7, #4]
90005e08:	3324      	adds	r3, #36	; 0x24
90005e0a:	2102      	movs	r1, #2
90005e0c:	4618      	mov	r0, r3
90005e0e:	f001 fa3f 	bl	90007290 <RCCEx_PLL3_Config>
90005e12:	4603      	mov	r3, r0
90005e14:	2b00      	cmp	r3, #0
90005e16:	d001      	beq.n	90005e1c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
90005e18:	2301      	movs	r3, #1
90005e1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90005e1c:	687b      	ldr	r3, [r7, #4]
90005e1e:	681b      	ldr	r3, [r3, #0]
90005e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90005e24:	2b00      	cmp	r3, #0
90005e26:	d033      	beq.n	90005e90 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
90005e28:	687b      	ldr	r3, [r7, #4]
90005e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90005e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90005e30:	d017      	beq.n	90005e62 <HAL_RCCEx_PeriphCLKConfig+0xd86>
90005e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90005e36:	d811      	bhi.n	90005e5c <HAL_RCCEx_PeriphCLKConfig+0xd80>
90005e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90005e3c:	d013      	beq.n	90005e66 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
90005e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90005e42:	d80b      	bhi.n	90005e5c <HAL_RCCEx_PeriphCLKConfig+0xd80>
90005e44:	2b00      	cmp	r3, #0
90005e46:	d010      	beq.n	90005e6a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
90005e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005e4c:	d106      	bne.n	90005e5c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005e4e:	4b0e      	ldr	r3, [pc, #56]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005e52:	4a0d      	ldr	r2, [pc, #52]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005e58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
90005e5a:	e007      	b.n	90005e6c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005e5c:	2301      	movs	r3, #1
90005e5e:	75fb      	strb	r3, [r7, #23]
      break;
90005e60:	e004      	b.n	90005e6c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
90005e62:	bf00      	nop
90005e64:	e002      	b.n	90005e6c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
90005e66:	bf00      	nop
90005e68:	e000      	b.n	90005e6c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
90005e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
90005e6c:	7dfb      	ldrb	r3, [r7, #23]
90005e6e:	2b00      	cmp	r3, #0
90005e70:	d10c      	bne.n	90005e8c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90005e72:	4b05      	ldr	r3, [pc, #20]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005e76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90005e7a:	687b      	ldr	r3, [r7, #4]
90005e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90005e7e:	4902      	ldr	r1, [pc, #8]	; (90005e88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90005e80:	4313      	orrs	r3, r2
90005e82:	654b      	str	r3, [r1, #84]	; 0x54
90005e84:	e004      	b.n	90005e90 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
90005e86:	bf00      	nop
90005e88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90005e8c:	7dfb      	ldrb	r3, [r7, #23]
90005e8e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90005e90:	687b      	ldr	r3, [r7, #4]
90005e92:	681b      	ldr	r3, [r3, #0]
90005e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90005e98:	2b00      	cmp	r3, #0
90005e9a:	d008      	beq.n	90005eae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90005e9c:	4b31      	ldr	r3, [pc, #196]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005ea0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90005ea4:	687b      	ldr	r3, [r7, #4]
90005ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90005ea8:	492e      	ldr	r1, [pc, #184]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005eaa:	4313      	orrs	r3, r2
90005eac:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90005eae:	687b      	ldr	r3, [r7, #4]
90005eb0:	681b      	ldr	r3, [r3, #0]
90005eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90005eb6:	2b00      	cmp	r3, #0
90005eb8:	d009      	beq.n	90005ece <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90005eba:	4b2a      	ldr	r3, [pc, #168]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005ebc:	691b      	ldr	r3, [r3, #16]
90005ebe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
90005ec2:	687b      	ldr	r3, [r7, #4]
90005ec4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90005ec8:	4926      	ldr	r1, [pc, #152]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005eca:	4313      	orrs	r3, r2
90005ecc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90005ece:	687b      	ldr	r3, [r7, #4]
90005ed0:	681b      	ldr	r3, [r3, #0]
90005ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90005ed6:	2b00      	cmp	r3, #0
90005ed8:	d008      	beq.n	90005eec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90005eda:	4b22      	ldr	r3, [pc, #136]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005ede:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
90005ee2:	687b      	ldr	r3, [r7, #4]
90005ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90005ee6:	491f      	ldr	r1, [pc, #124]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005ee8:	4313      	orrs	r3, r2
90005eea:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90005eec:	687b      	ldr	r3, [r7, #4]
90005eee:	681b      	ldr	r3, [r3, #0]
90005ef0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
90005ef4:	2b00      	cmp	r3, #0
90005ef6:	d00d      	beq.n	90005f14 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90005ef8:	4b1a      	ldr	r3, [pc, #104]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005efa:	691b      	ldr	r3, [r3, #16]
90005efc:	4a19      	ldr	r2, [pc, #100]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005efe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90005f02:	6113      	str	r3, [r2, #16]
90005f04:	4b17      	ldr	r3, [pc, #92]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005f06:	691a      	ldr	r2, [r3, #16]
90005f08:	687b      	ldr	r3, [r7, #4]
90005f0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
90005f0e:	4915      	ldr	r1, [pc, #84]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005f10:	4313      	orrs	r3, r2
90005f12:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90005f14:	687b      	ldr	r3, [r7, #4]
90005f16:	681b      	ldr	r3, [r3, #0]
90005f18:	2b00      	cmp	r3, #0
90005f1a:	da08      	bge.n	90005f2e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90005f1c:	4b11      	ldr	r3, [pc, #68]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005f20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
90005f24:	687b      	ldr	r3, [r7, #4]
90005f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005f28:	490e      	ldr	r1, [pc, #56]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005f2a:	4313      	orrs	r3, r2
90005f2c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90005f2e:	687b      	ldr	r3, [r7, #4]
90005f30:	681b      	ldr	r3, [r3, #0]
90005f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90005f36:	2b00      	cmp	r3, #0
90005f38:	d009      	beq.n	90005f4e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90005f3a:	4b0a      	ldr	r3, [pc, #40]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005f3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
90005f42:	687b      	ldr	r3, [r7, #4]
90005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90005f48:	4906      	ldr	r1, [pc, #24]	; (90005f64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90005f4a:	4313      	orrs	r3, r2
90005f4c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
90005f4e:	7dbb      	ldrb	r3, [r7, #22]
90005f50:	2b00      	cmp	r3, #0
90005f52:	d101      	bne.n	90005f58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
90005f54:	2300      	movs	r3, #0
90005f56:	e000      	b.n	90005f5a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
90005f58:	2301      	movs	r3, #1
}
90005f5a:	4618      	mov	r0, r3
90005f5c:	3718      	adds	r7, #24
90005f5e:	46bd      	mov	sp, r7
90005f60:	bd80      	pop	{r7, pc}
90005f62:	bf00      	nop
90005f64:	58024400 	.word	0x58024400

90005f68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
90005f68:	b580      	push	{r7, lr}
90005f6a:	b090      	sub	sp, #64	; 0x40
90005f6c:	af00      	add	r7, sp, #0
90005f6e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
90005f70:	687b      	ldr	r3, [r7, #4]
90005f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005f76:	f040 8095 	bne.w	900060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
90005f7a:	4b97      	ldr	r3, [pc, #604]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
90005f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005f7e:	f003 0307 	and.w	r3, r3, #7
90005f82:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
90005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005f86:	2b04      	cmp	r3, #4
90005f88:	f200 8088 	bhi.w	9000609c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
90005f8c:	a201      	add	r2, pc, #4	; (adr r2, 90005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
90005f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005f92:	bf00      	nop
90005f94:	90005fa9 	.word	0x90005fa9
90005f98:	90005fd1 	.word	0x90005fd1
90005f9c:	90005ff9 	.word	0x90005ff9
90005fa0:	90006095 	.word	0x90006095
90005fa4:	90006021 	.word	0x90006021
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
90005fa8:	4b8b      	ldr	r3, [pc, #556]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
90005faa:	681b      	ldr	r3, [r3, #0]
90005fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90005fb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90005fb4:	d108      	bne.n	90005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
90005fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
90005fba:	4618      	mov	r0, r3
90005fbc:	f000 ff64 	bl	90006e88 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
90005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
90005fc4:	f000 bc94 	b.w	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
90005fc8:	2300      	movs	r3, #0
90005fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005fcc:	f000 bc90 	b.w	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
90005fd0:	4b81      	ldr	r3, [pc, #516]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
90005fd2:	681b      	ldr	r3, [r3, #0]
90005fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90005fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90005fdc:	d108      	bne.n	90005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90005fde:	f107 0318 	add.w	r3, r7, #24
90005fe2:	4618      	mov	r0, r3
90005fe4:	f000 fca8 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
90005fe8:	69bb      	ldr	r3, [r7, #24]
90005fea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
90005fec:	f000 bc80 	b.w	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
90005ff0:	2300      	movs	r3, #0
90005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005ff4:	f000 bc7c 	b.w	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
90005ff8:	4b77      	ldr	r3, [pc, #476]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
90005ffa:	681b      	ldr	r3, [r3, #0]
90005ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90006000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006004:	d108      	bne.n	90006018 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90006006:	f107 030c 	add.w	r3, r7, #12
9000600a:	4618      	mov	r0, r3
9000600c:	f000 fde8 	bl	90006be0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
90006010:	68fb      	ldr	r3, [r7, #12]
90006012:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
90006014:	f000 bc6c 	b.w	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
90006018:	2300      	movs	r3, #0
9000601a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000601c:	f000 bc68 	b.w	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
90006020:	4b6d      	ldr	r3, [pc, #436]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
90006022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90006024:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
90006028:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000602a:	4b6b      	ldr	r3, [pc, #428]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
9000602c:	681b      	ldr	r3, [r3, #0]
9000602e:	f003 0304 	and.w	r3, r3, #4
90006032:	2b04      	cmp	r3, #4
90006034:	d10c      	bne.n	90006050 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
90006036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006038:	2b00      	cmp	r3, #0
9000603a:	d109      	bne.n	90006050 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
9000603c:	4b66      	ldr	r3, [pc, #408]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
9000603e:	681b      	ldr	r3, [r3, #0]
90006040:	08db      	lsrs	r3, r3, #3
90006042:	f003 0303 	and.w	r3, r3, #3
90006046:	4a65      	ldr	r2, [pc, #404]	; (900061dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
90006048:	fa22 f303 	lsr.w	r3, r2, r3
9000604c:	63fb      	str	r3, [r7, #60]	; 0x3c
9000604e:	e01f      	b.n	90006090 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
90006050:	4b61      	ldr	r3, [pc, #388]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
90006052:	681b      	ldr	r3, [r3, #0]
90006054:	f403 7380 	and.w	r3, r3, #256	; 0x100
90006058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000605c:	d106      	bne.n	9000606c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
9000605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006060:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90006064:	d102      	bne.n	9000606c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
90006066:	4b5e      	ldr	r3, [pc, #376]	; (900061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
90006068:	63fb      	str	r3, [r7, #60]	; 0x3c
9000606a:	e011      	b.n	90006090 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
9000606c:	4b5a      	ldr	r3, [pc, #360]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
9000606e:	681b      	ldr	r3, [r3, #0]
90006070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90006074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90006078:	d106      	bne.n	90006088 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
9000607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000607c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006080:	d102      	bne.n	90006088 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
90006082:	4b58      	ldr	r3, [pc, #352]	; (900061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
90006084:	63fb      	str	r3, [r7, #60]	; 0x3c
90006086:	e003      	b.n	90006090 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
90006088:	2300      	movs	r3, #0
9000608a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
9000608c:	f000 bc30 	b.w	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
90006090:	f000 bc2e 	b.w	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
90006094:	4b54      	ldr	r3, [pc, #336]	; (900061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
90006096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006098:	f000 bc2a 	b.w	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
9000609c:	2300      	movs	r3, #0
9000609e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900060a0:	f000 bc26 	b.w	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
900060a4:	687b      	ldr	r3, [r7, #4]
900060a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900060aa:	f040 809f 	bne.w	900061ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
900060ae:	4b4a      	ldr	r3, [pc, #296]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
900060b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900060b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
900060b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
900060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900060ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900060be:	d04d      	beq.n	9000615c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
900060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900060c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900060c6:	f200 8084 	bhi.w	900061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
900060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900060cc:	2bc0      	cmp	r3, #192	; 0xc0
900060ce:	d07d      	beq.n	900061cc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
900060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900060d2:	2bc0      	cmp	r3, #192	; 0xc0
900060d4:	d87d      	bhi.n	900061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
900060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900060d8:	2b80      	cmp	r3, #128	; 0x80
900060da:	d02d      	beq.n	90006138 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
900060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900060de:	2b80      	cmp	r3, #128	; 0x80
900060e0:	d877      	bhi.n	900061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
900060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900060e4:	2b00      	cmp	r3, #0
900060e6:	d003      	beq.n	900060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
900060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900060ea:	2b40      	cmp	r3, #64	; 0x40
900060ec:	d012      	beq.n	90006114 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
900060ee:	e070      	b.n	900061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
900060f0:	4b39      	ldr	r3, [pc, #228]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
900060f2:	681b      	ldr	r3, [r3, #0]
900060f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900060f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
900060fc:	d107      	bne.n	9000610e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
900060fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
90006102:	4618      	mov	r0, r3
90006104:	f000 fec0 	bl	90006e88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
90006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000610a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
9000610c:	e3f0      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
9000610e:	2300      	movs	r3, #0
90006110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006112:	e3ed      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
90006114:	4b30      	ldr	r3, [pc, #192]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
90006116:	681b      	ldr	r3, [r3, #0]
90006118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
9000611c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90006120:	d107      	bne.n	90006132 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90006122:	f107 0318 	add.w	r3, r7, #24
90006126:	4618      	mov	r0, r3
90006128:	f000 fc06 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
9000612c:	69bb      	ldr	r3, [r7, #24]
9000612e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
90006130:	e3de      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
90006132:	2300      	movs	r3, #0
90006134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006136:	e3db      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
90006138:	4b27      	ldr	r3, [pc, #156]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
9000613a:	681b      	ldr	r3, [r3, #0]
9000613c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90006140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006144:	d107      	bne.n	90006156 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90006146:	f107 030c 	add.w	r3, r7, #12
9000614a:	4618      	mov	r0, r3
9000614c:	f000 fd48 	bl	90006be0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
90006150:	68fb      	ldr	r3, [r7, #12]
90006152:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
90006154:	e3cc      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
90006156:	2300      	movs	r3, #0
90006158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000615a:	e3c9      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
9000615c:	4b1e      	ldr	r3, [pc, #120]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
9000615e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90006160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
90006164:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
90006166:	4b1c      	ldr	r3, [pc, #112]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
90006168:	681b      	ldr	r3, [r3, #0]
9000616a:	f003 0304 	and.w	r3, r3, #4
9000616e:	2b04      	cmp	r3, #4
90006170:	d10c      	bne.n	9000618c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
90006172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006174:	2b00      	cmp	r3, #0
90006176:	d109      	bne.n	9000618c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90006178:	4b17      	ldr	r3, [pc, #92]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
9000617a:	681b      	ldr	r3, [r3, #0]
9000617c:	08db      	lsrs	r3, r3, #3
9000617e:	f003 0303 	and.w	r3, r3, #3
90006182:	4a16      	ldr	r2, [pc, #88]	; (900061dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
90006184:	fa22 f303 	lsr.w	r3, r2, r3
90006188:	63fb      	str	r3, [r7, #60]	; 0x3c
9000618a:	e01e      	b.n	900061ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
9000618c:	4b12      	ldr	r3, [pc, #72]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
9000618e:	681b      	ldr	r3, [r3, #0]
90006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
90006194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90006198:	d106      	bne.n	900061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
9000619a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000619c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900061a0:	d102      	bne.n	900061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
900061a2:	4b0f      	ldr	r3, [pc, #60]	; (900061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
900061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
900061a6:	e010      	b.n	900061ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
900061a8:	4b0b      	ldr	r3, [pc, #44]	; (900061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
900061aa:	681b      	ldr	r3, [r3, #0]
900061ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900061b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
900061b4:	d106      	bne.n	900061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
900061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900061b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900061bc:	d102      	bne.n	900061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
900061be:	4b09      	ldr	r3, [pc, #36]	; (900061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
900061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
900061c2:	e002      	b.n	900061ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
900061c4:	2300      	movs	r3, #0
900061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
900061c8:	e392      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
900061ca:	e391      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
900061cc:	4b06      	ldr	r3, [pc, #24]	; (900061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
900061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900061d0:	e38e      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
900061d2:	2300      	movs	r3, #0
900061d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900061d6:	e38b      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
900061d8:	58024400 	.word	0x58024400
900061dc:	03d09000 	.word	0x03d09000
900061e0:	003d0900 	.word	0x003d0900
900061e4:	017d7840 	.word	0x017d7840
900061e8:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
900061ec:	687b      	ldr	r3, [r7, #4]
900061ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
900061f2:	f040 809c 	bne.w	9000632e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
900061f6:	4b9d      	ldr	r3, [pc, #628]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
900061f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900061fa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
900061fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
90006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006202:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90006206:	d054      	beq.n	900062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
90006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000620a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
9000620e:	f200 808b 	bhi.w	90006328 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
90006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006214:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90006218:	f000 8083 	beq.w	90006322 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
9000621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000621e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90006222:	f200 8081 	bhi.w	90006328 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
90006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000622c:	d02f      	beq.n	9000628e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
9000622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90006234:	d878      	bhi.n	90006328 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
90006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006238:	2b00      	cmp	r3, #0
9000623a:	d004      	beq.n	90006246 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
9000623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000623e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90006242:	d012      	beq.n	9000626a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
90006244:	e070      	b.n	90006328 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
90006246:	4b89      	ldr	r3, [pc, #548]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
90006248:	681b      	ldr	r3, [r3, #0]
9000624a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000624e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90006252:	d107      	bne.n	90006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
90006254:	f107 0324 	add.w	r3, r7, #36	; 0x24
90006258:	4618      	mov	r0, r3
9000625a:	f000 fe15 	bl	90006e88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
9000625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006260:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
90006262:	e345      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
90006264:	2300      	movs	r3, #0
90006266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006268:	e342      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000626a:	4b80      	ldr	r3, [pc, #512]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
9000626c:	681b      	ldr	r3, [r3, #0]
9000626e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90006272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90006276:	d107      	bne.n	90006288 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90006278:	f107 0318 	add.w	r3, r7, #24
9000627c:	4618      	mov	r0, r3
9000627e:	f000 fb5b 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
90006282:	69bb      	ldr	r3, [r7, #24]
90006284:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
90006286:	e333      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
90006288:	2300      	movs	r3, #0
9000628a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000628c:	e330      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000628e:	4b77      	ldr	r3, [pc, #476]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
90006290:	681b      	ldr	r3, [r3, #0]
90006292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90006296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000629a:	d107      	bne.n	900062ac <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000629c:	f107 030c 	add.w	r3, r7, #12
900062a0:	4618      	mov	r0, r3
900062a2:	f000 fc9d 	bl	90006be0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
900062a6:	68fb      	ldr	r3, [r7, #12]
900062a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
900062aa:	e321      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
900062ac:	2300      	movs	r3, #0
900062ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900062b0:	e31e      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
900062b2:	4b6e      	ldr	r3, [pc, #440]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
900062b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900062b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
900062ba:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
900062bc:	4b6b      	ldr	r3, [pc, #428]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
900062be:	681b      	ldr	r3, [r3, #0]
900062c0:	f003 0304 	and.w	r3, r3, #4
900062c4:	2b04      	cmp	r3, #4
900062c6:	d10c      	bne.n	900062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
900062c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900062ca:	2b00      	cmp	r3, #0
900062cc:	d109      	bne.n	900062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
900062ce:	4b67      	ldr	r3, [pc, #412]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
900062d0:	681b      	ldr	r3, [r3, #0]
900062d2:	08db      	lsrs	r3, r3, #3
900062d4:	f003 0303 	and.w	r3, r3, #3
900062d8:	4a65      	ldr	r2, [pc, #404]	; (90006470 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
900062da:	fa22 f303 	lsr.w	r3, r2, r3
900062de:	63fb      	str	r3, [r7, #60]	; 0x3c
900062e0:	e01e      	b.n	90006320 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
900062e2:	4b62      	ldr	r3, [pc, #392]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
900062e4:	681b      	ldr	r3, [r3, #0]
900062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
900062ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900062ee:	d106      	bne.n	900062fe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
900062f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900062f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900062f6:	d102      	bne.n	900062fe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
900062f8:	4b5e      	ldr	r3, [pc, #376]	; (90006474 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
900062fa:	63fb      	str	r3, [r7, #60]	; 0x3c
900062fc:	e010      	b.n	90006320 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
900062fe:	4b5b      	ldr	r3, [pc, #364]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
90006300:	681b      	ldr	r3, [r3, #0]
90006302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90006306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000630a:	d106      	bne.n	9000631a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
9000630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000630e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006312:	d102      	bne.n	9000631a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
90006314:	4b58      	ldr	r3, [pc, #352]	; (90006478 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
90006316:	63fb      	str	r3, [r7, #60]	; 0x3c
90006318:	e002      	b.n	90006320 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
9000631a:	2300      	movs	r3, #0
9000631c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
9000631e:	e2e7      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
90006320:	e2e6      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
90006322:	4b56      	ldr	r3, [pc, #344]	; (9000647c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
90006324:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006326:	e2e3      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
90006328:	2300      	movs	r3, #0
9000632a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000632c:	e2e0      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
9000632e:	687b      	ldr	r3, [r7, #4]
90006330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90006334:	f040 80a7 	bne.w	90006486 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
90006338:	4b4c      	ldr	r3, [pc, #304]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
9000633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000633c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
90006340:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
90006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90006348:	d055      	beq.n	900063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
9000634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000634c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90006350:	f200 8096 	bhi.w	90006480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
90006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006356:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
9000635a:	f000 8084 	beq.w	90006466 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
9000635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006360:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
90006364:	f200 808c 	bhi.w	90006480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
90006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000636a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9000636e:	d030      	beq.n	900063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
90006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90006376:	f200 8083 	bhi.w	90006480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
9000637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000637c:	2b00      	cmp	r3, #0
9000637e:	d004      	beq.n	9000638a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
90006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006382:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90006386:	d012      	beq.n	900063ae <HAL_RCCEx_GetPeriphCLKFreq+0x446>
90006388:	e07a      	b.n	90006480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
9000638a:	4b38      	ldr	r3, [pc, #224]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
9000638c:	681b      	ldr	r3, [r3, #0]
9000638e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90006392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90006396:	d107      	bne.n	900063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
90006398:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000639c:	4618      	mov	r0, r3
9000639e:	f000 fd73 	bl	90006e88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
900063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900063a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
900063a6:	e2a3      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
900063a8:	2300      	movs	r3, #0
900063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900063ac:	e2a0      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
900063ae:	4b2f      	ldr	r3, [pc, #188]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
900063b0:	681b      	ldr	r3, [r3, #0]
900063b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900063b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
900063ba:	d107      	bne.n	900063cc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
900063bc:	f107 0318 	add.w	r3, r7, #24
900063c0:	4618      	mov	r0, r3
900063c2:	f000 fab9 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
900063c6:	69bb      	ldr	r3, [r7, #24]
900063c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
900063ca:	e291      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
900063cc:	2300      	movs	r3, #0
900063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900063d0:	e28e      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
900063d2:	4b26      	ldr	r3, [pc, #152]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
900063d4:	681b      	ldr	r3, [r3, #0]
900063d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
900063da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900063de:	d107      	bne.n	900063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
900063e0:	f107 030c 	add.w	r3, r7, #12
900063e4:	4618      	mov	r0, r3
900063e6:	f000 fbfb 	bl	90006be0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
900063ea:	68fb      	ldr	r3, [r7, #12]
900063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
900063ee:	e27f      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
900063f0:	2300      	movs	r3, #0
900063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900063f4:	e27c      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
900063f6:	4b1d      	ldr	r3, [pc, #116]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
900063f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900063fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
900063fe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
90006400:	4b1a      	ldr	r3, [pc, #104]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
90006402:	681b      	ldr	r3, [r3, #0]
90006404:	f003 0304 	and.w	r3, r3, #4
90006408:	2b04      	cmp	r3, #4
9000640a:	d10c      	bne.n	90006426 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
9000640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000640e:	2b00      	cmp	r3, #0
90006410:	d109      	bne.n	90006426 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90006412:	4b16      	ldr	r3, [pc, #88]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
90006414:	681b      	ldr	r3, [r3, #0]
90006416:	08db      	lsrs	r3, r3, #3
90006418:	f003 0303 	and.w	r3, r3, #3
9000641c:	4a14      	ldr	r2, [pc, #80]	; (90006470 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
9000641e:	fa22 f303 	lsr.w	r3, r2, r3
90006422:	63fb      	str	r3, [r7, #60]	; 0x3c
90006424:	e01e      	b.n	90006464 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
90006426:	4b11      	ldr	r3, [pc, #68]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
90006428:	681b      	ldr	r3, [r3, #0]
9000642a:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000642e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90006432:	d106      	bne.n	90006442 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
90006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000643a:	d102      	bne.n	90006442 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
9000643c:	4b0d      	ldr	r3, [pc, #52]	; (90006474 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
9000643e:	63fb      	str	r3, [r7, #60]	; 0x3c
90006440:	e010      	b.n	90006464 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
90006442:	4b0a      	ldr	r3, [pc, #40]	; (9000646c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
90006444:	681b      	ldr	r3, [r3, #0]
90006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000644a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000644e:	d106      	bne.n	9000645e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
90006450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006456:	d102      	bne.n	9000645e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
90006458:	4b07      	ldr	r3, [pc, #28]	; (90006478 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
9000645a:	63fb      	str	r3, [r7, #60]	; 0x3c
9000645c:	e002      	b.n	90006464 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
9000645e:	2300      	movs	r3, #0
90006460:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
90006462:	e245      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
90006464:	e244      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
90006466:	4b05      	ldr	r3, [pc, #20]	; (9000647c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
90006468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000646a:	e241      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
9000646c:	58024400 	.word	0x58024400
90006470:	03d09000 	.word	0x03d09000
90006474:	003d0900 	.word	0x003d0900
90006478:	017d7840 	.word	0x017d7840
9000647c:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
90006480:	2300      	movs	r3, #0
90006482:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006484:	e234      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
90006486:	687b      	ldr	r3, [r7, #4]
90006488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000648c:	f040 809c 	bne.w	900065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
90006490:	4b9b      	ldr	r3, [pc, #620]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
90006492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90006494:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
90006498:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
9000649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000649c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
900064a0:	d054      	beq.n	9000654c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
900064a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900064a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
900064a8:	f200 808b 	bhi.w	900065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
900064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900064ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
900064b2:	f000 8083 	beq.w	900065bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
900064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900064b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
900064bc:	f200 8081 	bhi.w	900065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
900064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900064c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900064c6:	d02f      	beq.n	90006528 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
900064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900064ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900064ce:	d878      	bhi.n	900065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
900064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900064d2:	2b00      	cmp	r3, #0
900064d4:	d004      	beq.n	900064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
900064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900064d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
900064dc:	d012      	beq.n	90006504 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
900064de:	e070      	b.n	900065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
900064e0:	4b87      	ldr	r3, [pc, #540]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
900064e2:	681b      	ldr	r3, [r3, #0]
900064e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900064e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
900064ec:	d107      	bne.n	900064fe <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
900064ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
900064f2:	4618      	mov	r0, r3
900064f4:	f000 fcc8 	bl	90006e88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
900064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900064fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
900064fc:	e1f8      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
900064fe:	2300      	movs	r3, #0
90006500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006502:	e1f5      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
90006504:	4b7e      	ldr	r3, [pc, #504]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
90006506:	681b      	ldr	r3, [r3, #0]
90006508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
9000650c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90006510:	d107      	bne.n	90006522 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90006512:	f107 0318 	add.w	r3, r7, #24
90006516:	4618      	mov	r0, r3
90006518:	f000 fa0e 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
9000651c:	69bb      	ldr	r3, [r7, #24]
9000651e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
90006520:	e1e6      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
90006522:	2300      	movs	r3, #0
90006524:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006526:	e1e3      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
90006528:	4b75      	ldr	r3, [pc, #468]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
9000652a:	681b      	ldr	r3, [r3, #0]
9000652c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90006530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006534:	d107      	bne.n	90006546 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90006536:	f107 030c 	add.w	r3, r7, #12
9000653a:	4618      	mov	r0, r3
9000653c:	f000 fb50 	bl	90006be0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
90006540:	68fb      	ldr	r3, [r7, #12]
90006542:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
90006544:	e1d4      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
90006546:	2300      	movs	r3, #0
90006548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000654a:	e1d1      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
9000654c:	4b6c      	ldr	r3, [pc, #432]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
9000654e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90006550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
90006554:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
90006556:	4b6a      	ldr	r3, [pc, #424]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
90006558:	681b      	ldr	r3, [r3, #0]
9000655a:	f003 0304 	and.w	r3, r3, #4
9000655e:	2b04      	cmp	r3, #4
90006560:	d10c      	bne.n	9000657c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
90006562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006564:	2b00      	cmp	r3, #0
90006566:	d109      	bne.n	9000657c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90006568:	4b65      	ldr	r3, [pc, #404]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
9000656a:	681b      	ldr	r3, [r3, #0]
9000656c:	08db      	lsrs	r3, r3, #3
9000656e:	f003 0303 	and.w	r3, r3, #3
90006572:	4a64      	ldr	r2, [pc, #400]	; (90006704 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
90006574:	fa22 f303 	lsr.w	r3, r2, r3
90006578:	63fb      	str	r3, [r7, #60]	; 0x3c
9000657a:	e01e      	b.n	900065ba <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
9000657c:	4b60      	ldr	r3, [pc, #384]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
9000657e:	681b      	ldr	r3, [r3, #0]
90006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
90006584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90006588:	d106      	bne.n	90006598 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
9000658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000658c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90006590:	d102      	bne.n	90006598 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
90006592:	4b5d      	ldr	r3, [pc, #372]	; (90006708 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
90006594:	63fb      	str	r3, [r7, #60]	; 0x3c
90006596:	e010      	b.n	900065ba <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
90006598:	4b59      	ldr	r3, [pc, #356]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
9000659a:	681b      	ldr	r3, [r3, #0]
9000659c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900065a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
900065a4:	d106      	bne.n	900065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
900065a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900065a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900065ac:	d102      	bne.n	900065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
900065ae:	4b57      	ldr	r3, [pc, #348]	; (9000670c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
900065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
900065b2:	e002      	b.n	900065ba <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
900065b4:	2300      	movs	r3, #0
900065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
900065b8:	e19a      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
900065ba:	e199      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
900065bc:	4b54      	ldr	r3, [pc, #336]	; (90006710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
900065be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900065c0:	e196      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
900065c2:	2300      	movs	r3, #0
900065c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900065c6:	e193      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
900065c8:	687b      	ldr	r3, [r7, #4]
900065ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
900065ce:	d173      	bne.n	900066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
900065d0:	4b4b      	ldr	r3, [pc, #300]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
900065d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900065d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
900065d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
900065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900065dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
900065e0:	d02f      	beq.n	90006642 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
900065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900065e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
900065e8:	d863      	bhi.n	900066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
900065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900065ec:	2b00      	cmp	r3, #0
900065ee:	d004      	beq.n	900065fa <HAL_RCCEx_GetPeriphCLKFreq+0x692>
900065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900065f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900065f6:	d012      	beq.n	9000661e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
900065f8:	e05b      	b.n	900066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
900065fa:	4b41      	ldr	r3, [pc, #260]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
900065fc:	681b      	ldr	r3, [r3, #0]
900065fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90006602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90006606:	d107      	bne.n	90006618 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90006608:	f107 0318 	add.w	r3, r7, #24
9000660c:	4618      	mov	r0, r3
9000660e:	f000 f993 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
90006612:	69bb      	ldr	r3, [r7, #24]
90006614:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
90006616:	e16b      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
90006618:	2300      	movs	r3, #0
9000661a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000661c:	e168      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000661e:	4b38      	ldr	r3, [pc, #224]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
90006620:	681b      	ldr	r3, [r3, #0]
90006622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90006626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000662a:	d107      	bne.n	9000663c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000662c:	f107 030c 	add.w	r3, r7, #12
90006630:	4618      	mov	r0, r3
90006632:	f000 fad5 	bl	90006be0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
90006636:	697b      	ldr	r3, [r7, #20]
90006638:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
9000663a:	e159      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
9000663c:	2300      	movs	r3, #0
9000663e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006640:	e156      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
90006642:	4b2f      	ldr	r3, [pc, #188]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
90006644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90006646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
9000664a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000664c:	4b2c      	ldr	r3, [pc, #176]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
9000664e:	681b      	ldr	r3, [r3, #0]
90006650:	f003 0304 	and.w	r3, r3, #4
90006654:	2b04      	cmp	r3, #4
90006656:	d10c      	bne.n	90006672 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
90006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000665a:	2b00      	cmp	r3, #0
9000665c:	d109      	bne.n	90006672 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
9000665e:	4b28      	ldr	r3, [pc, #160]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
90006660:	681b      	ldr	r3, [r3, #0]
90006662:	08db      	lsrs	r3, r3, #3
90006664:	f003 0303 	and.w	r3, r3, #3
90006668:	4a26      	ldr	r2, [pc, #152]	; (90006704 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
9000666a:	fa22 f303 	lsr.w	r3, r2, r3
9000666e:	63fb      	str	r3, [r7, #60]	; 0x3c
90006670:	e01e      	b.n	900066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
90006672:	4b23      	ldr	r3, [pc, #140]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
90006674:	681b      	ldr	r3, [r3, #0]
90006676:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000667a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000667e:	d106      	bne.n	9000668e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
90006680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90006686:	d102      	bne.n	9000668e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
90006688:	4b1f      	ldr	r3, [pc, #124]	; (90006708 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
9000668a:	63fb      	str	r3, [r7, #60]	; 0x3c
9000668c:	e010      	b.n	900066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
9000668e:	4b1c      	ldr	r3, [pc, #112]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
90006690:	681b      	ldr	r3, [r3, #0]
90006692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90006696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000669a:	d106      	bne.n	900066aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
9000669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000669e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900066a2:	d102      	bne.n	900066aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
900066a4:	4b19      	ldr	r3, [pc, #100]	; (9000670c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
900066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
900066a8:	e002      	b.n	900066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
900066aa:	2300      	movs	r3, #0
900066ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
900066ae:	e11f      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
900066b0:	e11e      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
900066b2:	2300      	movs	r3, #0
900066b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900066b6:	e11b      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
900066b8:	687b      	ldr	r3, [r7, #4]
900066ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900066be:	d13e      	bne.n	9000673e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
900066c0:	4b0f      	ldr	r3, [pc, #60]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
900066c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900066c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900066c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
900066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900066cc:	2b00      	cmp	r3, #0
900066ce:	d004      	beq.n	900066da <HAL_RCCEx_GetPeriphCLKFreq+0x772>
900066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900066d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900066d6:	d01d      	beq.n	90006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
900066d8:	e02e      	b.n	90006738 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
900066da:	4b09      	ldr	r3, [pc, #36]	; (90006700 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
900066dc:	681b      	ldr	r3, [r3, #0]
900066de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900066e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
900066e6:	d107      	bne.n	900066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
900066e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
900066ec:	4618      	mov	r0, r3
900066ee:	f000 fbcb 	bl	90006e88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
900066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
900066f6:	e0fb      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
900066f8:	2300      	movs	r3, #0
900066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900066fc:	e0f8      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
900066fe:	bf00      	nop
90006700:	58024400 	.word	0x58024400
90006704:	03d09000 	.word	0x03d09000
90006708:	003d0900 	.word	0x003d0900
9000670c:	017d7840 	.word	0x017d7840
90006710:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
90006714:	4b79      	ldr	r3, [pc, #484]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
90006716:	681b      	ldr	r3, [r3, #0]
90006718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
9000671c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90006720:	d107      	bne.n	90006732 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90006722:	f107 0318 	add.w	r3, r7, #24
90006726:	4618      	mov	r0, r3
90006728:	f000 f906 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
9000672c:	6a3b      	ldr	r3, [r7, #32]
9000672e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
90006730:	e0de      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
90006732:	2300      	movs	r3, #0
90006734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006736:	e0db      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
90006738:	2300      	movs	r3, #0
9000673a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000673c:	e0d8      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
9000673e:	687b      	ldr	r3, [r7, #4]
90006740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90006744:	f040 8085 	bne.w	90006852 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
90006748:	4b6c      	ldr	r3, [pc, #432]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
9000674a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000674c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
90006750:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
90006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90006758:	d06b      	beq.n	90006832 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
9000675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000675c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90006760:	d874      	bhi.n	9000684c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
90006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90006768:	d056      	beq.n	90006818 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
9000676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000676c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90006770:	d86c      	bhi.n	9000684c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
90006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006774:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90006778:	d03b      	beq.n	900067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
9000677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000677c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90006780:	d864      	bhi.n	9000684c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
90006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006788:	d021      	beq.n	900067ce <HAL_RCCEx_GetPeriphCLKFreq+0x866>
9000678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000678c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006790:	d85c      	bhi.n	9000684c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
90006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006794:	2b00      	cmp	r3, #0
90006796:	d004      	beq.n	900067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
90006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000679a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000679e:	d004      	beq.n	900067aa <HAL_RCCEx_GetPeriphCLKFreq+0x842>
900067a0:	e054      	b.n	9000684c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
900067a2:	f000 f8b3 	bl	9000690c <HAL_RCCEx_GetD3PCLK1Freq>
900067a6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
900067a8:	e0a2      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
900067aa:	4b54      	ldr	r3, [pc, #336]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
900067ac:	681b      	ldr	r3, [r3, #0]
900067ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900067b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
900067b6:	d107      	bne.n	900067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
900067b8:	f107 0318 	add.w	r3, r7, #24
900067bc:	4618      	mov	r0, r3
900067be:	f000 f8bb 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
900067c2:	69fb      	ldr	r3, [r7, #28]
900067c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
900067c6:	e093      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
900067c8:	2300      	movs	r3, #0
900067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900067cc:	e090      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
900067ce:	4b4b      	ldr	r3, [pc, #300]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
900067d0:	681b      	ldr	r3, [r3, #0]
900067d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
900067d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900067da:	d107      	bne.n	900067ec <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
900067dc:	f107 030c 	add.w	r3, r7, #12
900067e0:	4618      	mov	r0, r3
900067e2:	f000 f9fd 	bl	90006be0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
900067e6:	693b      	ldr	r3, [r7, #16]
900067e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
900067ea:	e081      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
900067ec:	2300      	movs	r3, #0
900067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900067f0:	e07e      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
900067f2:	4b42      	ldr	r3, [pc, #264]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
900067f4:	681b      	ldr	r3, [r3, #0]
900067f6:	f003 0304 	and.w	r3, r3, #4
900067fa:	2b04      	cmp	r3, #4
900067fc:	d109      	bne.n	90006812 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
900067fe:	4b3f      	ldr	r3, [pc, #252]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
90006800:	681b      	ldr	r3, [r3, #0]
90006802:	08db      	lsrs	r3, r3, #3
90006804:	f003 0303 	and.w	r3, r3, #3
90006808:	4a3d      	ldr	r2, [pc, #244]	; (90006900 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
9000680a:	fa22 f303 	lsr.w	r3, r2, r3
9000680e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
90006810:	e06e      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
90006812:	2300      	movs	r3, #0
90006814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006816:	e06b      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
90006818:	4b38      	ldr	r3, [pc, #224]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
9000681a:	681b      	ldr	r3, [r3, #0]
9000681c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90006820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90006824:	d102      	bne.n	9000682c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
90006826:	4b37      	ldr	r3, [pc, #220]	; (90006904 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
90006828:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
9000682a:	e061      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
9000682c:	2300      	movs	r3, #0
9000682e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006830:	e05e      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
90006832:	4b32      	ldr	r3, [pc, #200]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
90006834:	681b      	ldr	r3, [r3, #0]
90006836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000683a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000683e:	d102      	bne.n	90006846 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
90006840:	4b31      	ldr	r3, [pc, #196]	; (90006908 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
90006842:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
90006844:	e054      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
90006846:	2300      	movs	r3, #0
90006848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000684a:	e051      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
9000684c:	2300      	movs	r3, #0
9000684e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006850:	e04e      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
90006852:	687b      	ldr	r3, [r7, #4]
90006854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90006858:	d148      	bne.n	900068ec <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
9000685a:	4b28      	ldr	r3, [pc, #160]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
9000685c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000685e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
90006862:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
90006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000686a:	d02a      	beq.n	900068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
9000686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000686e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006872:	d838      	bhi.n	900068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
90006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006876:	2b00      	cmp	r3, #0
90006878:	d004      	beq.n	90006884 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
9000687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000687c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90006880:	d00d      	beq.n	9000689e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
90006882:	e030      	b.n	900068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
90006884:	4b1d      	ldr	r3, [pc, #116]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
90006886:	681b      	ldr	r3, [r3, #0]
90006888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000688c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90006890:	d102      	bne.n	90006898 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
90006892:	4b1d      	ldr	r3, [pc, #116]	; (90006908 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
90006894:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
90006896:	e02b      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
90006898:	2300      	movs	r3, #0
9000689a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000689c:	e028      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
9000689e:	4b17      	ldr	r3, [pc, #92]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
900068a0:	681b      	ldr	r3, [r3, #0]
900068a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900068a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
900068aa:	d107      	bne.n	900068bc <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
900068ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
900068b0:	4618      	mov	r0, r3
900068b2:	f000 fae9 	bl	90006e88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
900068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
900068b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
900068ba:	e019      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
900068bc:	2300      	movs	r3, #0
900068be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900068c0:	e016      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
900068c2:	4b0e      	ldr	r3, [pc, #56]	; (900068fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
900068c4:	681b      	ldr	r3, [r3, #0]
900068c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900068ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
900068ce:	d107      	bne.n	900068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
900068d0:	f107 0318 	add.w	r3, r7, #24
900068d4:	4618      	mov	r0, r3
900068d6:	f000 f82f 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
900068da:	69fb      	ldr	r3, [r7, #28]
900068dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
900068de:	e007      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
900068e0:	2300      	movs	r3, #0
900068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900068e4:	e004      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
900068e6:	2300      	movs	r3, #0
900068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900068ea:	e001      	b.n	900068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
900068ec:	2300      	movs	r3, #0
900068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
900068f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
900068f2:	4618      	mov	r0, r3
900068f4:	3740      	adds	r7, #64	; 0x40
900068f6:	46bd      	mov	sp, r7
900068f8:	bd80      	pop	{r7, pc}
900068fa:	bf00      	nop
900068fc:	58024400 	.word	0x58024400
90006900:	03d09000 	.word	0x03d09000
90006904:	003d0900 	.word	0x003d0900
90006908:	017d7840 	.word	0x017d7840

9000690c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
9000690c:	b580      	push	{r7, lr}
9000690e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90006910:	f7fe fb88 	bl	90005024 <HAL_RCC_GetHCLKFreq>
90006914:	4602      	mov	r2, r0
90006916:	4b06      	ldr	r3, [pc, #24]	; (90006930 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90006918:	6a1b      	ldr	r3, [r3, #32]
9000691a:	091b      	lsrs	r3, r3, #4
9000691c:	f003 0307 	and.w	r3, r3, #7
90006920:	4904      	ldr	r1, [pc, #16]	; (90006934 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
90006922:	5ccb      	ldrb	r3, [r1, r3]
90006924:	f003 031f 	and.w	r3, r3, #31
90006928:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
9000692c:	4618      	mov	r0, r3
9000692e:	bd80      	pop	{r7, pc}
90006930:	58024400 	.word	0x58024400
90006934:	90041ac8 	.word	0x90041ac8

90006938 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
90006938:	b480      	push	{r7}
9000693a:	b089      	sub	sp, #36	; 0x24
9000693c:	af00      	add	r7, sp, #0
9000693e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90006940:	4ba1      	ldr	r3, [pc, #644]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006944:	f003 0303 	and.w	r3, r3, #3
90006948:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
9000694a:	4b9f      	ldr	r3, [pc, #636]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000694e:	0b1b      	lsrs	r3, r3, #12
90006950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90006954:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
90006956:	4b9c      	ldr	r3, [pc, #624]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000695a:	091b      	lsrs	r3, r3, #4
9000695c:	f003 0301 	and.w	r3, r3, #1
90006960:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
90006962:	4b99      	ldr	r3, [pc, #612]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006966:	08db      	lsrs	r3, r3, #3
90006968:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000696c:	693a      	ldr	r2, [r7, #16]
9000696e:	fb02 f303 	mul.w	r3, r2, r3
90006972:	ee07 3a90 	vmov	s15, r3
90006976:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000697a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
9000697e:	697b      	ldr	r3, [r7, #20]
90006980:	2b00      	cmp	r3, #0
90006982:	f000 8111 	beq.w	90006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
90006986:	69bb      	ldr	r3, [r7, #24]
90006988:	2b02      	cmp	r3, #2
9000698a:	f000 8083 	beq.w	90006a94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
9000698e:	69bb      	ldr	r3, [r7, #24]
90006990:	2b02      	cmp	r3, #2
90006992:	f200 80a1 	bhi.w	90006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
90006996:	69bb      	ldr	r3, [r7, #24]
90006998:	2b00      	cmp	r3, #0
9000699a:	d003      	beq.n	900069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
9000699c:	69bb      	ldr	r3, [r7, #24]
9000699e:	2b01      	cmp	r3, #1
900069a0:	d056      	beq.n	90006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
900069a2:	e099      	b.n	90006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900069a4:	4b88      	ldr	r3, [pc, #544]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900069a6:	681b      	ldr	r3, [r3, #0]
900069a8:	f003 0320 	and.w	r3, r3, #32
900069ac:	2b00      	cmp	r3, #0
900069ae:	d02d      	beq.n	90006a0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
900069b0:	4b85      	ldr	r3, [pc, #532]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900069b2:	681b      	ldr	r3, [r3, #0]
900069b4:	08db      	lsrs	r3, r3, #3
900069b6:	f003 0303 	and.w	r3, r3, #3
900069ba:	4a84      	ldr	r2, [pc, #528]	; (90006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
900069bc:	fa22 f303 	lsr.w	r3, r2, r3
900069c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
900069c2:	68bb      	ldr	r3, [r7, #8]
900069c4:	ee07 3a90 	vmov	s15, r3
900069c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
900069cc:	697b      	ldr	r3, [r7, #20]
900069ce:	ee07 3a90 	vmov	s15, r3
900069d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900069d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900069da:	4b7b      	ldr	r3, [pc, #492]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
900069e2:	ee07 3a90 	vmov	s15, r3
900069e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900069ea:	ed97 6a03 	vldr	s12, [r7, #12]
900069ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 90006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900069f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
900069f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
900069fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900069fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006a02:	ee67 7a27 	vmul.f32	s15, s14, s15
90006a06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
90006a0a:	e087      	b.n	90006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
90006a0c:	697b      	ldr	r3, [r7, #20]
90006a0e:	ee07 3a90 	vmov	s15, r3
90006a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006a16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 90006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
90006a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006a1e:	4b6a      	ldr	r3, [pc, #424]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006a26:	ee07 3a90 	vmov	s15, r3
90006a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006a2e:	ed97 6a03 	vldr	s12, [r7, #12]
90006a32:	eddf 5a67 	vldr	s11, [pc, #412]	; 90006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90006a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006a46:	ee67 7a27 	vmul.f32	s15, s14, s15
90006a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006a4e:	e065      	b.n	90006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
90006a50:	697b      	ldr	r3, [r7, #20]
90006a52:	ee07 3a90 	vmov	s15, r3
90006a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006a5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 90006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90006a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006a62:	4b59      	ldr	r3, [pc, #356]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006a6a:	ee07 3a90 	vmov	s15, r3
90006a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006a72:	ed97 6a03 	vldr	s12, [r7, #12]
90006a76:	eddf 5a56 	vldr	s11, [pc, #344]	; 90006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90006a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
90006a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006a92:	e043      	b.n	90006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
90006a94:	697b      	ldr	r3, [r7, #20]
90006a96:	ee07 3a90 	vmov	s15, r3
90006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006a9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 90006bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
90006aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006aa6:	4b48      	ldr	r3, [pc, #288]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006aae:	ee07 3a90 	vmov	s15, r3
90006ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006ab6:	ed97 6a03 	vldr	s12, [r7, #12]
90006aba:	eddf 5a45 	vldr	s11, [pc, #276]	; 90006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90006abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006ace:	ee67 7a27 	vmul.f32	s15, s14, s15
90006ad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006ad6:	e021      	b.n	90006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
90006ad8:	697b      	ldr	r3, [r7, #20]
90006ada:	ee07 3a90 	vmov	s15, r3
90006ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006ae2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 90006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90006ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006aea:	4b37      	ldr	r3, [pc, #220]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006af2:	ee07 3a90 	vmov	s15, r3
90006af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006afa:	ed97 6a03 	vldr	s12, [r7, #12]
90006afe:	eddf 5a34 	vldr	s11, [pc, #208]	; 90006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90006b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006b12:	ee67 7a27 	vmul.f32	s15, s14, s15
90006b16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006b1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
90006b1c:	4b2a      	ldr	r3, [pc, #168]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006b20:	0a5b      	lsrs	r3, r3, #9
90006b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006b26:	ee07 3a90 	vmov	s15, r3
90006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006b32:	ee37 7a87 	vadd.f32	s14, s15, s14
90006b36:	edd7 6a07 	vldr	s13, [r7, #28]
90006b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006b42:	ee17 2a90 	vmov	r2, s15
90006b46:	687b      	ldr	r3, [r7, #4]
90006b48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
90006b4a:	4b1f      	ldr	r3, [pc, #124]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006b4e:	0c1b      	lsrs	r3, r3, #16
90006b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006b54:	ee07 3a90 	vmov	s15, r3
90006b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006b5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006b60:	ee37 7a87 	vadd.f32	s14, s15, s14
90006b64:	edd7 6a07 	vldr	s13, [r7, #28]
90006b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006b70:	ee17 2a90 	vmov	r2, s15
90006b74:	687b      	ldr	r3, [r7, #4]
90006b76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
90006b78:	4b13      	ldr	r3, [pc, #76]	; (90006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006b7c:	0e1b      	lsrs	r3, r3, #24
90006b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006b82:	ee07 3a90 	vmov	s15, r3
90006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
90006b92:	edd7 6a07 	vldr	s13, [r7, #28]
90006b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006b9e:	ee17 2a90 	vmov	r2, s15
90006ba2:	687b      	ldr	r3, [r7, #4]
90006ba4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
90006ba6:	e008      	b.n	90006bba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
90006ba8:	687b      	ldr	r3, [r7, #4]
90006baa:	2200      	movs	r2, #0
90006bac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
90006bae:	687b      	ldr	r3, [r7, #4]
90006bb0:	2200      	movs	r2, #0
90006bb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
90006bb4:	687b      	ldr	r3, [r7, #4]
90006bb6:	2200      	movs	r2, #0
90006bb8:	609a      	str	r2, [r3, #8]
}
90006bba:	bf00      	nop
90006bbc:	3724      	adds	r7, #36	; 0x24
90006bbe:	46bd      	mov	sp, r7
90006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
90006bc4:	4770      	bx	lr
90006bc6:	bf00      	nop
90006bc8:	58024400 	.word	0x58024400
90006bcc:	03d09000 	.word	0x03d09000
90006bd0:	46000000 	.word	0x46000000
90006bd4:	4c742400 	.word	0x4c742400
90006bd8:	4a742400 	.word	0x4a742400
90006bdc:	4bbebc20 	.word	0x4bbebc20

90006be0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
90006be0:	b480      	push	{r7}
90006be2:	b089      	sub	sp, #36	; 0x24
90006be4:	af00      	add	r7, sp, #0
90006be6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90006be8:	4ba1      	ldr	r3, [pc, #644]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006bec:	f003 0303 	and.w	r3, r3, #3
90006bf0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
90006bf2:	4b9f      	ldr	r3, [pc, #636]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006bf6:	0d1b      	lsrs	r3, r3, #20
90006bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90006bfc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
90006bfe:	4b9c      	ldr	r3, [pc, #624]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c02:	0a1b      	lsrs	r3, r3, #8
90006c04:	f003 0301 	and.w	r3, r3, #1
90006c08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
90006c0a:	4b99      	ldr	r3, [pc, #612]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90006c0e:	08db      	lsrs	r3, r3, #3
90006c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
90006c14:	693a      	ldr	r2, [r7, #16]
90006c16:	fb02 f303 	mul.w	r3, r2, r3
90006c1a:	ee07 3a90 	vmov	s15, r3
90006c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006c22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
90006c26:	697b      	ldr	r3, [r7, #20]
90006c28:	2b00      	cmp	r3, #0
90006c2a:	f000 8111 	beq.w	90006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
90006c2e:	69bb      	ldr	r3, [r7, #24]
90006c30:	2b02      	cmp	r3, #2
90006c32:	f000 8083 	beq.w	90006d3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
90006c36:	69bb      	ldr	r3, [r7, #24]
90006c38:	2b02      	cmp	r3, #2
90006c3a:	f200 80a1 	bhi.w	90006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
90006c3e:	69bb      	ldr	r3, [r7, #24]
90006c40:	2b00      	cmp	r3, #0
90006c42:	d003      	beq.n	90006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90006c44:	69bb      	ldr	r3, [r7, #24]
90006c46:	2b01      	cmp	r3, #1
90006c48:	d056      	beq.n	90006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
90006c4a:	e099      	b.n	90006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90006c4c:	4b88      	ldr	r3, [pc, #544]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006c4e:	681b      	ldr	r3, [r3, #0]
90006c50:	f003 0320 	and.w	r3, r3, #32
90006c54:	2b00      	cmp	r3, #0
90006c56:	d02d      	beq.n	90006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90006c58:	4b85      	ldr	r3, [pc, #532]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006c5a:	681b      	ldr	r3, [r3, #0]
90006c5c:	08db      	lsrs	r3, r3, #3
90006c5e:	f003 0303 	and.w	r3, r3, #3
90006c62:	4a84      	ldr	r2, [pc, #528]	; (90006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
90006c64:	fa22 f303 	lsr.w	r3, r2, r3
90006c68:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90006c6a:	68bb      	ldr	r3, [r7, #8]
90006c6c:	ee07 3a90 	vmov	s15, r3
90006c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006c74:	697b      	ldr	r3, [r7, #20]
90006c76:	ee07 3a90 	vmov	s15, r3
90006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006c82:	4b7b      	ldr	r3, [pc, #492]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006c8a:	ee07 3a90 	vmov	s15, r3
90006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006c92:	ed97 6a03 	vldr	s12, [r7, #12]
90006c96:	eddf 5a78 	vldr	s11, [pc, #480]	; 90006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
90006cae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
90006cb2:	e087      	b.n	90006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90006cb4:	697b      	ldr	r3, [r7, #20]
90006cb6:	ee07 3a90 	vmov	s15, r3
90006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006cbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 90006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
90006cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006cc6:	4b6a      	ldr	r3, [pc, #424]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006cce:	ee07 3a90 	vmov	s15, r3
90006cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006cd6:	ed97 6a03 	vldr	s12, [r7, #12]
90006cda:	eddf 5a67 	vldr	s11, [pc, #412]	; 90006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90006cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
90006cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006cf6:	e065      	b.n	90006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90006cf8:	697b      	ldr	r3, [r7, #20]
90006cfa:	ee07 3a90 	vmov	s15, r3
90006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006d02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 90006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90006d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006d0a:	4b59      	ldr	r3, [pc, #356]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006d12:	ee07 3a90 	vmov	s15, r3
90006d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006d1a:	ed97 6a03 	vldr	s12, [r7, #12]
90006d1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 90006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90006d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006d32:	ee67 7a27 	vmul.f32	s15, s14, s15
90006d36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006d3a:	e043      	b.n	90006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90006d3c:	697b      	ldr	r3, [r7, #20]
90006d3e:	ee07 3a90 	vmov	s15, r3
90006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006d46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 90006e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
90006d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006d4e:	4b48      	ldr	r3, [pc, #288]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006d56:	ee07 3a90 	vmov	s15, r3
90006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006d5e:	ed97 6a03 	vldr	s12, [r7, #12]
90006d62:	eddf 5a45 	vldr	s11, [pc, #276]	; 90006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90006d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
90006d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006d7e:	e021      	b.n	90006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90006d80:	697b      	ldr	r3, [r7, #20]
90006d82:	ee07 3a90 	vmov	s15, r3
90006d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006d8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 90006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90006d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006d92:	4b37      	ldr	r3, [pc, #220]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006d9a:	ee07 3a90 	vmov	s15, r3
90006d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006da2:	ed97 6a03 	vldr	s12, [r7, #12]
90006da6:	eddf 5a34 	vldr	s11, [pc, #208]	; 90006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90006daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006dba:	ee67 7a27 	vmul.f32	s15, s14, s15
90006dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006dc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
90006dc4:	4b2a      	ldr	r3, [pc, #168]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006dc8:	0a5b      	lsrs	r3, r3, #9
90006dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006dce:	ee07 3a90 	vmov	s15, r3
90006dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006dda:	ee37 7a87 	vadd.f32	s14, s15, s14
90006dde:	edd7 6a07 	vldr	s13, [r7, #28]
90006de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006dea:	ee17 2a90 	vmov	r2, s15
90006dee:	687b      	ldr	r3, [r7, #4]
90006df0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
90006df2:	4b1f      	ldr	r3, [pc, #124]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006df6:	0c1b      	lsrs	r3, r3, #16
90006df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006dfc:	ee07 3a90 	vmov	s15, r3
90006e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006e08:	ee37 7a87 	vadd.f32	s14, s15, s14
90006e0c:	edd7 6a07 	vldr	s13, [r7, #28]
90006e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006e18:	ee17 2a90 	vmov	r2, s15
90006e1c:	687b      	ldr	r3, [r7, #4]
90006e1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
90006e20:	4b13      	ldr	r3, [pc, #76]	; (90006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006e24:	0e1b      	lsrs	r3, r3, #24
90006e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006e2a:	ee07 3a90 	vmov	s15, r3
90006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006e36:	ee37 7a87 	vadd.f32	s14, s15, s14
90006e3a:	edd7 6a07 	vldr	s13, [r7, #28]
90006e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006e46:	ee17 2a90 	vmov	r2, s15
90006e4a:	687b      	ldr	r3, [r7, #4]
90006e4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
90006e4e:	e008      	b.n	90006e62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
90006e50:	687b      	ldr	r3, [r7, #4]
90006e52:	2200      	movs	r2, #0
90006e54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
90006e56:	687b      	ldr	r3, [r7, #4]
90006e58:	2200      	movs	r2, #0
90006e5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
90006e5c:	687b      	ldr	r3, [r7, #4]
90006e5e:	2200      	movs	r2, #0
90006e60:	609a      	str	r2, [r3, #8]
}
90006e62:	bf00      	nop
90006e64:	3724      	adds	r7, #36	; 0x24
90006e66:	46bd      	mov	sp, r7
90006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
90006e6c:	4770      	bx	lr
90006e6e:	bf00      	nop
90006e70:	58024400 	.word	0x58024400
90006e74:	03d09000 	.word	0x03d09000
90006e78:	46000000 	.word	0x46000000
90006e7c:	4c742400 	.word	0x4c742400
90006e80:	4a742400 	.word	0x4a742400
90006e84:	4bbebc20 	.word	0x4bbebc20

90006e88 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
90006e88:	b480      	push	{r7}
90006e8a:	b089      	sub	sp, #36	; 0x24
90006e8c:	af00      	add	r7, sp, #0
90006e8e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90006e90:	4ba0      	ldr	r3, [pc, #640]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
90006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006e94:	f003 0303 	and.w	r3, r3, #3
90006e98:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
90006e9a:	4b9e      	ldr	r3, [pc, #632]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
90006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006e9e:	091b      	lsrs	r3, r3, #4
90006ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90006ea4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
90006ea6:	4b9b      	ldr	r3, [pc, #620]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
90006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006eaa:	f003 0301 	and.w	r3, r3, #1
90006eae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
90006eb0:	4b98      	ldr	r3, [pc, #608]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
90006eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90006eb4:	08db      	lsrs	r3, r3, #3
90006eb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
90006eba:	693a      	ldr	r2, [r7, #16]
90006ebc:	fb02 f303 	mul.w	r3, r2, r3
90006ec0:	ee07 3a90 	vmov	s15, r3
90006ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006ec8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
90006ecc:	697b      	ldr	r3, [r7, #20]
90006ece:	2b00      	cmp	r3, #0
90006ed0:	f000 8111 	beq.w	900070f6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
90006ed4:	69bb      	ldr	r3, [r7, #24]
90006ed6:	2b02      	cmp	r3, #2
90006ed8:	f000 8083 	beq.w	90006fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
90006edc:	69bb      	ldr	r3, [r7, #24]
90006ede:	2b02      	cmp	r3, #2
90006ee0:	f200 80a1 	bhi.w	90007026 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
90006ee4:	69bb      	ldr	r3, [r7, #24]
90006ee6:	2b00      	cmp	r3, #0
90006ee8:	d003      	beq.n	90006ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
90006eea:	69bb      	ldr	r3, [r7, #24]
90006eec:	2b01      	cmp	r3, #1
90006eee:	d056      	beq.n	90006f9e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
90006ef0:	e099      	b.n	90007026 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90006ef2:	4b88      	ldr	r3, [pc, #544]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
90006ef4:	681b      	ldr	r3, [r3, #0]
90006ef6:	f003 0320 	and.w	r3, r3, #32
90006efa:	2b00      	cmp	r3, #0
90006efc:	d02d      	beq.n	90006f5a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90006efe:	4b85      	ldr	r3, [pc, #532]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
90006f00:	681b      	ldr	r3, [r3, #0]
90006f02:	08db      	lsrs	r3, r3, #3
90006f04:	f003 0303 	and.w	r3, r3, #3
90006f08:	4a83      	ldr	r2, [pc, #524]	; (90007118 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
90006f0a:	fa22 f303 	lsr.w	r3, r2, r3
90006f0e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90006f10:	68bb      	ldr	r3, [r7, #8]
90006f12:	ee07 3a90 	vmov	s15, r3
90006f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006f1a:	697b      	ldr	r3, [r7, #20]
90006f1c:	ee07 3a90 	vmov	s15, r3
90006f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006f24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006f28:	4b7a      	ldr	r3, [pc, #488]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
90006f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006f30:	ee07 3a90 	vmov	s15, r3
90006f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006f38:	ed97 6a03 	vldr	s12, [r7, #12]
90006f3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 9000711c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
90006f40:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006f48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006f50:	ee67 7a27 	vmul.f32	s15, s14, s15
90006f54:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
90006f58:	e087      	b.n	9000706a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90006f5a:	697b      	ldr	r3, [r7, #20]
90006f5c:	ee07 3a90 	vmov	s15, r3
90006f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006f64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 90007120 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
90006f68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006f6c:	4b69      	ldr	r3, [pc, #420]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
90006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006f74:	ee07 3a90 	vmov	s15, r3
90006f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006f7c:	ed97 6a03 	vldr	s12, [r7, #12]
90006f80:	eddf 5a66 	vldr	s11, [pc, #408]	; 9000711c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
90006f84:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006f88:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006f8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006f94:	ee67 7a27 	vmul.f32	s15, s14, s15
90006f98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006f9c:	e065      	b.n	9000706a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90006f9e:	697b      	ldr	r3, [r7, #20]
90006fa0:	ee07 3a90 	vmov	s15, r3
90006fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006fa8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 90007124 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
90006fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006fb0:	4b58      	ldr	r3, [pc, #352]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
90006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006fb8:	ee07 3a90 	vmov	s15, r3
90006fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006fc0:	ed97 6a03 	vldr	s12, [r7, #12]
90006fc4:	eddf 5a55 	vldr	s11, [pc, #340]	; 9000711c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
90006fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
90006fdc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006fe0:	e043      	b.n	9000706a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90006fe2:	697b      	ldr	r3, [r7, #20]
90006fe4:	ee07 3a90 	vmov	s15, r3
90006fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006fec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 90007128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
90006ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006ff4:	4b47      	ldr	r3, [pc, #284]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
90006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006ffc:	ee07 3a90 	vmov	s15, r3
90007000:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007004:	ed97 6a03 	vldr	s12, [r7, #12]
90007008:	eddf 5a44 	vldr	s11, [pc, #272]	; 9000711c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
9000700c:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007010:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007014:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90007018:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000701c:	ee67 7a27 	vmul.f32	s15, s14, s15
90007020:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90007024:	e021      	b.n	9000706a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90007026:	697b      	ldr	r3, [r7, #20]
90007028:	ee07 3a90 	vmov	s15, r3
9000702c:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007030:	eddf 6a3b 	vldr	s13, [pc, #236]	; 90007120 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
90007034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007038:	4b36      	ldr	r3, [pc, #216]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
9000703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000703c:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007040:	ee07 3a90 	vmov	s15, r3
90007044:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007048:	ed97 6a03 	vldr	s12, [r7, #12]
9000704c:	eddf 5a33 	vldr	s11, [pc, #204]	; 9000711c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
90007050:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007054:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007058:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000705c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007060:	ee67 7a27 	vmul.f32	s15, s14, s15
90007064:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90007068:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
9000706a:	4b2a      	ldr	r3, [pc, #168]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
9000706c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000706e:	0a5b      	lsrs	r3, r3, #9
90007070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90007074:	ee07 3a90 	vmov	s15, r3
90007078:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000707c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90007080:	ee37 7a87 	vadd.f32	s14, s15, s14
90007084:	edd7 6a07 	vldr	s13, [r7, #28]
90007088:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000708c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007090:	ee17 2a90 	vmov	r2, s15
90007094:	687b      	ldr	r3, [r7, #4]
90007096:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
90007098:	4b1e      	ldr	r3, [pc, #120]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
9000709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000709c:	0c1b      	lsrs	r3, r3, #16
9000709e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900070a2:	ee07 3a90 	vmov	s15, r3
900070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900070aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900070ae:	ee37 7a87 	vadd.f32	s14, s15, s14
900070b2:	edd7 6a07 	vldr	s13, [r7, #28]
900070b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
900070ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900070be:	ee17 2a90 	vmov	r2, s15
900070c2:	687b      	ldr	r3, [r7, #4]
900070c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
900070c6:	4b13      	ldr	r3, [pc, #76]	; (90007114 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
900070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900070ca:	0e1b      	lsrs	r3, r3, #24
900070cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900070d0:	ee07 3a90 	vmov	s15, r3
900070d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
900070d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900070dc:	ee37 7a87 	vadd.f32	s14, s15, s14
900070e0:	edd7 6a07 	vldr	s13, [r7, #28]
900070e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
900070e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900070ec:	ee17 2a90 	vmov	r2, s15
900070f0:	687b      	ldr	r3, [r7, #4]
900070f2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
900070f4:	e008      	b.n	90007108 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
900070f6:	687b      	ldr	r3, [r7, #4]
900070f8:	2200      	movs	r2, #0
900070fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
900070fc:	687b      	ldr	r3, [r7, #4]
900070fe:	2200      	movs	r2, #0
90007100:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
90007102:	687b      	ldr	r3, [r7, #4]
90007104:	2200      	movs	r2, #0
90007106:	609a      	str	r2, [r3, #8]
}
90007108:	bf00      	nop
9000710a:	3724      	adds	r7, #36	; 0x24
9000710c:	46bd      	mov	sp, r7
9000710e:	f85d 7b04 	ldr.w	r7, [sp], #4
90007112:	4770      	bx	lr
90007114:	58024400 	.word	0x58024400
90007118:	03d09000 	.word	0x03d09000
9000711c:	46000000 	.word	0x46000000
90007120:	4c742400 	.word	0x4c742400
90007124:	4a742400 	.word	0x4a742400
90007128:	4bbebc20 	.word	0x4bbebc20

9000712c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000712c:	b580      	push	{r7, lr}
9000712e:	b084      	sub	sp, #16
90007130:	af00      	add	r7, sp, #0
90007132:	6078      	str	r0, [r7, #4]
90007134:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90007136:	2300      	movs	r3, #0
90007138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000713a:	4b53      	ldr	r3, [pc, #332]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
9000713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000713e:	f003 0303 	and.w	r3, r3, #3
90007142:	2b03      	cmp	r3, #3
90007144:	d101      	bne.n	9000714a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90007146:	2301      	movs	r3, #1
90007148:	e099      	b.n	9000727e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000714a:	4b4f      	ldr	r3, [pc, #316]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
9000714c:	681b      	ldr	r3, [r3, #0]
9000714e:	4a4e      	ldr	r2, [pc, #312]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
90007150:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90007154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90007156:	f7fa ff2b 	bl	90001fb0 <HAL_GetTick>
9000715a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000715c:	e008      	b.n	90007170 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
9000715e:	f7fa ff27 	bl	90001fb0 <HAL_GetTick>
90007162:	4602      	mov	r2, r0
90007164:	68bb      	ldr	r3, [r7, #8]
90007166:	1ad3      	subs	r3, r2, r3
90007168:	2b02      	cmp	r3, #2
9000716a:	d901      	bls.n	90007170 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
9000716c:	2303      	movs	r3, #3
9000716e:	e086      	b.n	9000727e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90007170:	4b45      	ldr	r3, [pc, #276]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
90007172:	681b      	ldr	r3, [r3, #0]
90007174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90007178:	2b00      	cmp	r3, #0
9000717a:	d1f0      	bne.n	9000715e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000717c:	4b42      	ldr	r3, [pc, #264]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
9000717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90007180:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90007184:	687b      	ldr	r3, [r7, #4]
90007186:	681b      	ldr	r3, [r3, #0]
90007188:	031b      	lsls	r3, r3, #12
9000718a:	493f      	ldr	r1, [pc, #252]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
9000718c:	4313      	orrs	r3, r2
9000718e:	628b      	str	r3, [r1, #40]	; 0x28
90007190:	687b      	ldr	r3, [r7, #4]
90007192:	685b      	ldr	r3, [r3, #4]
90007194:	3b01      	subs	r3, #1
90007196:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000719a:	687b      	ldr	r3, [r7, #4]
9000719c:	689b      	ldr	r3, [r3, #8]
9000719e:	3b01      	subs	r3, #1
900071a0:	025b      	lsls	r3, r3, #9
900071a2:	b29b      	uxth	r3, r3
900071a4:	431a      	orrs	r2, r3
900071a6:	687b      	ldr	r3, [r7, #4]
900071a8:	68db      	ldr	r3, [r3, #12]
900071aa:	3b01      	subs	r3, #1
900071ac:	041b      	lsls	r3, r3, #16
900071ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
900071b2:	431a      	orrs	r2, r3
900071b4:	687b      	ldr	r3, [r7, #4]
900071b6:	691b      	ldr	r3, [r3, #16]
900071b8:	3b01      	subs	r3, #1
900071ba:	061b      	lsls	r3, r3, #24
900071bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
900071c0:	4931      	ldr	r1, [pc, #196]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
900071c2:	4313      	orrs	r3, r2
900071c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
900071c6:	4b30      	ldr	r3, [pc, #192]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
900071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900071ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
900071ce:	687b      	ldr	r3, [r7, #4]
900071d0:	695b      	ldr	r3, [r3, #20]
900071d2:	492d      	ldr	r1, [pc, #180]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
900071d4:	4313      	orrs	r3, r2
900071d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
900071d8:	4b2b      	ldr	r3, [pc, #172]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
900071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900071dc:	f023 0220 	bic.w	r2, r3, #32
900071e0:	687b      	ldr	r3, [r7, #4]
900071e2:	699b      	ldr	r3, [r3, #24]
900071e4:	4928      	ldr	r1, [pc, #160]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
900071e6:	4313      	orrs	r3, r2
900071e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
900071ea:	4b27      	ldr	r3, [pc, #156]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
900071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900071ee:	4a26      	ldr	r2, [pc, #152]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
900071f0:	f023 0310 	bic.w	r3, r3, #16
900071f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
900071f6:	4b24      	ldr	r3, [pc, #144]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
900071f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
900071fa:	4b24      	ldr	r3, [pc, #144]	; (9000728c <RCCEx_PLL2_Config+0x160>)
900071fc:	4013      	ands	r3, r2
900071fe:	687a      	ldr	r2, [r7, #4]
90007200:	69d2      	ldr	r2, [r2, #28]
90007202:	00d2      	lsls	r2, r2, #3
90007204:	4920      	ldr	r1, [pc, #128]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
90007206:	4313      	orrs	r3, r2
90007208:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000720a:	4b1f      	ldr	r3, [pc, #124]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
9000720c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000720e:	4a1e      	ldr	r2, [pc, #120]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
90007210:	f043 0310 	orr.w	r3, r3, #16
90007214:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
90007216:	683b      	ldr	r3, [r7, #0]
90007218:	2b00      	cmp	r3, #0
9000721a:	d106      	bne.n	9000722a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000721c:	4b1a      	ldr	r3, [pc, #104]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
9000721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007220:	4a19      	ldr	r2, [pc, #100]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
90007222:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
90007226:	62d3      	str	r3, [r2, #44]	; 0x2c
90007228:	e00f      	b.n	9000724a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
9000722a:	683b      	ldr	r3, [r7, #0]
9000722c:	2b01      	cmp	r3, #1
9000722e:	d106      	bne.n	9000723e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90007230:	4b15      	ldr	r3, [pc, #84]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
90007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007234:	4a14      	ldr	r2, [pc, #80]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
90007236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
9000723a:	62d3      	str	r3, [r2, #44]	; 0x2c
9000723c:	e005      	b.n	9000724a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000723e:	4b12      	ldr	r3, [pc, #72]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
90007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007242:	4a11      	ldr	r2, [pc, #68]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
90007244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90007248:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000724a:	4b0f      	ldr	r3, [pc, #60]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
9000724c:	681b      	ldr	r3, [r3, #0]
9000724e:	4a0e      	ldr	r2, [pc, #56]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
90007250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90007254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90007256:	f7fa feab 	bl	90001fb0 <HAL_GetTick>
9000725a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000725c:	e008      	b.n	90007270 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
9000725e:	f7fa fea7 	bl	90001fb0 <HAL_GetTick>
90007262:	4602      	mov	r2, r0
90007264:	68bb      	ldr	r3, [r7, #8]
90007266:	1ad3      	subs	r3, r2, r3
90007268:	2b02      	cmp	r3, #2
9000726a:	d901      	bls.n	90007270 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
9000726c:	2303      	movs	r3, #3
9000726e:	e006      	b.n	9000727e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90007270:	4b05      	ldr	r3, [pc, #20]	; (90007288 <RCCEx_PLL2_Config+0x15c>)
90007272:	681b      	ldr	r3, [r3, #0]
90007274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90007278:	2b00      	cmp	r3, #0
9000727a:	d0f0      	beq.n	9000725e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
9000727c:	7bfb      	ldrb	r3, [r7, #15]
}
9000727e:	4618      	mov	r0, r3
90007280:	3710      	adds	r7, #16
90007282:	46bd      	mov	sp, r7
90007284:	bd80      	pop	{r7, pc}
90007286:	bf00      	nop
90007288:	58024400 	.word	0x58024400
9000728c:	ffff0007 	.word	0xffff0007

90007290 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
90007290:	b580      	push	{r7, lr}
90007292:	b084      	sub	sp, #16
90007294:	af00      	add	r7, sp, #0
90007296:	6078      	str	r0, [r7, #4]
90007298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000729a:	2300      	movs	r3, #0
9000729c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000729e:	4b53      	ldr	r3, [pc, #332]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
900072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900072a2:	f003 0303 	and.w	r3, r3, #3
900072a6:	2b03      	cmp	r3, #3
900072a8:	d101      	bne.n	900072ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
900072aa:	2301      	movs	r3, #1
900072ac:	e099      	b.n	900073e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
900072ae:	4b4f      	ldr	r3, [pc, #316]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
900072b0:	681b      	ldr	r3, [r3, #0]
900072b2:	4a4e      	ldr	r2, [pc, #312]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
900072b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
900072b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900072ba:	f7fa fe79 	bl	90001fb0 <HAL_GetTick>
900072be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
900072c0:	e008      	b.n	900072d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
900072c2:	f7fa fe75 	bl	90001fb0 <HAL_GetTick>
900072c6:	4602      	mov	r2, r0
900072c8:	68bb      	ldr	r3, [r7, #8]
900072ca:	1ad3      	subs	r3, r2, r3
900072cc:	2b02      	cmp	r3, #2
900072ce:	d901      	bls.n	900072d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
900072d0:	2303      	movs	r3, #3
900072d2:	e086      	b.n	900073e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
900072d4:	4b45      	ldr	r3, [pc, #276]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
900072d6:	681b      	ldr	r3, [r3, #0]
900072d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
900072dc:	2b00      	cmp	r3, #0
900072de:	d1f0      	bne.n	900072c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
900072e0:	4b42      	ldr	r3, [pc, #264]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
900072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900072e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
900072e8:	687b      	ldr	r3, [r7, #4]
900072ea:	681b      	ldr	r3, [r3, #0]
900072ec:	051b      	lsls	r3, r3, #20
900072ee:	493f      	ldr	r1, [pc, #252]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
900072f0:	4313      	orrs	r3, r2
900072f2:	628b      	str	r3, [r1, #40]	; 0x28
900072f4:	687b      	ldr	r3, [r7, #4]
900072f6:	685b      	ldr	r3, [r3, #4]
900072f8:	3b01      	subs	r3, #1
900072fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
900072fe:	687b      	ldr	r3, [r7, #4]
90007300:	689b      	ldr	r3, [r3, #8]
90007302:	3b01      	subs	r3, #1
90007304:	025b      	lsls	r3, r3, #9
90007306:	b29b      	uxth	r3, r3
90007308:	431a      	orrs	r2, r3
9000730a:	687b      	ldr	r3, [r7, #4]
9000730c:	68db      	ldr	r3, [r3, #12]
9000730e:	3b01      	subs	r3, #1
90007310:	041b      	lsls	r3, r3, #16
90007312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90007316:	431a      	orrs	r2, r3
90007318:	687b      	ldr	r3, [r7, #4]
9000731a:	691b      	ldr	r3, [r3, #16]
9000731c:	3b01      	subs	r3, #1
9000731e:	061b      	lsls	r3, r3, #24
90007320:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90007324:	4931      	ldr	r1, [pc, #196]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
90007326:	4313      	orrs	r3, r2
90007328:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000732a:	4b30      	ldr	r3, [pc, #192]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
9000732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000732e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
90007332:	687b      	ldr	r3, [r7, #4]
90007334:	695b      	ldr	r3, [r3, #20]
90007336:	492d      	ldr	r1, [pc, #180]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
90007338:	4313      	orrs	r3, r2
9000733a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000733c:	4b2b      	ldr	r3, [pc, #172]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
9000733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007340:	f423 7200 	bic.w	r2, r3, #512	; 0x200
90007344:	687b      	ldr	r3, [r7, #4]
90007346:	699b      	ldr	r3, [r3, #24]
90007348:	4928      	ldr	r1, [pc, #160]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
9000734a:	4313      	orrs	r3, r2
9000734c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
9000734e:	4b27      	ldr	r3, [pc, #156]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
90007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007352:	4a26      	ldr	r2, [pc, #152]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
90007354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90007358:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000735a:	4b24      	ldr	r3, [pc, #144]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
9000735c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000735e:	4b24      	ldr	r3, [pc, #144]	; (900073f0 <RCCEx_PLL3_Config+0x160>)
90007360:	4013      	ands	r3, r2
90007362:	687a      	ldr	r2, [r7, #4]
90007364:	69d2      	ldr	r2, [r2, #28]
90007366:	00d2      	lsls	r2, r2, #3
90007368:	4920      	ldr	r1, [pc, #128]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
9000736a:	4313      	orrs	r3, r2
9000736c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000736e:	4b1f      	ldr	r3, [pc, #124]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
90007370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007372:	4a1e      	ldr	r2, [pc, #120]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
90007374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90007378:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
9000737a:	683b      	ldr	r3, [r7, #0]
9000737c:	2b00      	cmp	r3, #0
9000737e:	d106      	bne.n	9000738e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90007380:	4b1a      	ldr	r3, [pc, #104]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
90007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007384:	4a19      	ldr	r2, [pc, #100]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
90007386:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000738a:	62d3      	str	r3, [r2, #44]	; 0x2c
9000738c:	e00f      	b.n	900073ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
9000738e:	683b      	ldr	r3, [r7, #0]
90007390:	2b01      	cmp	r3, #1
90007392:	d106      	bne.n	900073a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90007394:	4b15      	ldr	r3, [pc, #84]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
90007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007398:	4a14      	ldr	r2, [pc, #80]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
9000739a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
9000739e:	62d3      	str	r3, [r2, #44]	; 0x2c
900073a0:	e005      	b.n	900073ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
900073a2:	4b12      	ldr	r3, [pc, #72]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
900073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900073a6:	4a11      	ldr	r2, [pc, #68]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
900073a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
900073ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
900073ae:	4b0f      	ldr	r3, [pc, #60]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
900073b0:	681b      	ldr	r3, [r3, #0]
900073b2:	4a0e      	ldr	r2, [pc, #56]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
900073b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
900073b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900073ba:	f7fa fdf9 	bl	90001fb0 <HAL_GetTick>
900073be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
900073c0:	e008      	b.n	900073d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
900073c2:	f7fa fdf5 	bl	90001fb0 <HAL_GetTick>
900073c6:	4602      	mov	r2, r0
900073c8:	68bb      	ldr	r3, [r7, #8]
900073ca:	1ad3      	subs	r3, r2, r3
900073cc:	2b02      	cmp	r3, #2
900073ce:	d901      	bls.n	900073d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
900073d0:	2303      	movs	r3, #3
900073d2:	e006      	b.n	900073e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
900073d4:	4b05      	ldr	r3, [pc, #20]	; (900073ec <RCCEx_PLL3_Config+0x15c>)
900073d6:	681b      	ldr	r3, [r3, #0]
900073d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
900073dc:	2b00      	cmp	r3, #0
900073de:	d0f0      	beq.n	900073c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
900073e0:	7bfb      	ldrb	r3, [r7, #15]
}
900073e2:	4618      	mov	r0, r3
900073e4:	3710      	adds	r7, #16
900073e6:	46bd      	mov	sp, r7
900073e8:	bd80      	pop	{r7, pc}
900073ea:	bf00      	nop
900073ec:	58024400 	.word	0x58024400
900073f0:	ffff0007 	.word	0xffff0007

900073f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
900073f4:	b580      	push	{r7, lr}
900073f6:	b084      	sub	sp, #16
900073f8:	af00      	add	r7, sp, #0
900073fa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
900073fc:	687b      	ldr	r3, [r7, #4]
900073fe:	2b00      	cmp	r3, #0
90007400:	d101      	bne.n	90007406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
90007402:	2301      	movs	r3, #1
90007404:	e0f1      	b.n	900075ea <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
90007406:	687b      	ldr	r3, [r7, #4]
90007408:	2200      	movs	r2, #0
9000740a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
9000740c:	687b      	ldr	r3, [r7, #4]
9000740e:	681b      	ldr	r3, [r3, #0]
90007410:	4a78      	ldr	r2, [pc, #480]	; (900075f4 <HAL_SPI_Init+0x200>)
90007412:	4293      	cmp	r3, r2
90007414:	d00f      	beq.n	90007436 <HAL_SPI_Init+0x42>
90007416:	687b      	ldr	r3, [r7, #4]
90007418:	681b      	ldr	r3, [r3, #0]
9000741a:	4a77      	ldr	r2, [pc, #476]	; (900075f8 <HAL_SPI_Init+0x204>)
9000741c:	4293      	cmp	r3, r2
9000741e:	d00a      	beq.n	90007436 <HAL_SPI_Init+0x42>
90007420:	687b      	ldr	r3, [r7, #4]
90007422:	681b      	ldr	r3, [r3, #0]
90007424:	4a75      	ldr	r2, [pc, #468]	; (900075fc <HAL_SPI_Init+0x208>)
90007426:	4293      	cmp	r3, r2
90007428:	d005      	beq.n	90007436 <HAL_SPI_Init+0x42>
9000742a:	687b      	ldr	r3, [r7, #4]
9000742c:	68db      	ldr	r3, [r3, #12]
9000742e:	2b0f      	cmp	r3, #15
90007430:	d901      	bls.n	90007436 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
90007432:	2301      	movs	r3, #1
90007434:	e0d9      	b.n	900075ea <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
90007436:	6878      	ldr	r0, [r7, #4]
90007438:	f000 f8e2 	bl	90007600 <SPI_GetPacketSize>
9000743c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
9000743e:	687b      	ldr	r3, [r7, #4]
90007440:	681b      	ldr	r3, [r3, #0]
90007442:	4a6c      	ldr	r2, [pc, #432]	; (900075f4 <HAL_SPI_Init+0x200>)
90007444:	4293      	cmp	r3, r2
90007446:	d00c      	beq.n	90007462 <HAL_SPI_Init+0x6e>
90007448:	687b      	ldr	r3, [r7, #4]
9000744a:	681b      	ldr	r3, [r3, #0]
9000744c:	4a6a      	ldr	r2, [pc, #424]	; (900075f8 <HAL_SPI_Init+0x204>)
9000744e:	4293      	cmp	r3, r2
90007450:	d007      	beq.n	90007462 <HAL_SPI_Init+0x6e>
90007452:	687b      	ldr	r3, [r7, #4]
90007454:	681b      	ldr	r3, [r3, #0]
90007456:	4a69      	ldr	r2, [pc, #420]	; (900075fc <HAL_SPI_Init+0x208>)
90007458:	4293      	cmp	r3, r2
9000745a:	d002      	beq.n	90007462 <HAL_SPI_Init+0x6e>
9000745c:	68fb      	ldr	r3, [r7, #12]
9000745e:	2b08      	cmp	r3, #8
90007460:	d811      	bhi.n	90007486 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
90007462:	687b      	ldr	r3, [r7, #4]
90007464:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
90007466:	4a63      	ldr	r2, [pc, #396]	; (900075f4 <HAL_SPI_Init+0x200>)
90007468:	4293      	cmp	r3, r2
9000746a:	d009      	beq.n	90007480 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
9000746c:	687b      	ldr	r3, [r7, #4]
9000746e:	681b      	ldr	r3, [r3, #0]
90007470:	4a61      	ldr	r2, [pc, #388]	; (900075f8 <HAL_SPI_Init+0x204>)
90007472:	4293      	cmp	r3, r2
90007474:	d004      	beq.n	90007480 <HAL_SPI_Init+0x8c>
90007476:	687b      	ldr	r3, [r7, #4]
90007478:	681b      	ldr	r3, [r3, #0]
9000747a:	4a60      	ldr	r2, [pc, #384]	; (900075fc <HAL_SPI_Init+0x208>)
9000747c:	4293      	cmp	r3, r2
9000747e:	d104      	bne.n	9000748a <HAL_SPI_Init+0x96>
90007480:	68fb      	ldr	r3, [r7, #12]
90007482:	2b10      	cmp	r3, #16
90007484:	d901      	bls.n	9000748a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
90007486:	2301      	movs	r3, #1
90007488:	e0af      	b.n	900075ea <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
9000748a:	687b      	ldr	r3, [r7, #4]
9000748c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
90007490:	b2db      	uxtb	r3, r3
90007492:	2b00      	cmp	r3, #0
90007494:	d106      	bne.n	900074a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
90007496:	687b      	ldr	r3, [r7, #4]
90007498:	2200      	movs	r2, #0
9000749a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
9000749e:	6878      	ldr	r0, [r7, #4]
900074a0:	f7fa f92a 	bl	900016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
900074a4:	687b      	ldr	r3, [r7, #4]
900074a6:	2202      	movs	r2, #2
900074a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
900074ac:	687b      	ldr	r3, [r7, #4]
900074ae:	681b      	ldr	r3, [r3, #0]
900074b0:	681a      	ldr	r2, [r3, #0]
900074b2:	687b      	ldr	r3, [r7, #4]
900074b4:	681b      	ldr	r3, [r3, #0]
900074b6:	f022 0201 	bic.w	r2, r2, #1
900074ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
900074bc:	687b      	ldr	r3, [r7, #4]
900074be:	681b      	ldr	r3, [r3, #0]
900074c0:	689b      	ldr	r3, [r3, #8]
900074c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
900074c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
900074c8:	687b      	ldr	r3, [r7, #4]
900074ca:	699b      	ldr	r3, [r3, #24]
900074cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
900074d0:	d119      	bne.n	90007506 <HAL_SPI_Init+0x112>
900074d2:	687b      	ldr	r3, [r7, #4]
900074d4:	685b      	ldr	r3, [r3, #4]
900074d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
900074da:	d103      	bne.n	900074e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
900074dc:	687b      	ldr	r3, [r7, #4]
900074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
900074e0:	2b00      	cmp	r3, #0
900074e2:	d008      	beq.n	900074f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
900074e4:	687b      	ldr	r3, [r7, #4]
900074e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
900074e8:	2b00      	cmp	r3, #0
900074ea:	d10c      	bne.n	90007506 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
900074ec:	687b      	ldr	r3, [r7, #4]
900074ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
900074f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900074f4:	d107      	bne.n	90007506 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
900074f6:	687b      	ldr	r3, [r7, #4]
900074f8:	681b      	ldr	r3, [r3, #0]
900074fa:	681a      	ldr	r2, [r3, #0]
900074fc:	687b      	ldr	r3, [r7, #4]
900074fe:	681b      	ldr	r3, [r3, #0]
90007500:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90007504:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
90007506:	687b      	ldr	r3, [r7, #4]
90007508:	69da      	ldr	r2, [r3, #28]
9000750a:	687b      	ldr	r3, [r7, #4]
9000750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000750e:	431a      	orrs	r2, r3
90007510:	68bb      	ldr	r3, [r7, #8]
90007512:	431a      	orrs	r2, r3
90007514:	687b      	ldr	r3, [r7, #4]
90007516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007518:	ea42 0103 	orr.w	r1, r2, r3
9000751c:	687b      	ldr	r3, [r7, #4]
9000751e:	68da      	ldr	r2, [r3, #12]
90007520:	687b      	ldr	r3, [r7, #4]
90007522:	681b      	ldr	r3, [r3, #0]
90007524:	430a      	orrs	r2, r1
90007526:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
90007528:	687b      	ldr	r3, [r7, #4]
9000752a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000752c:	687b      	ldr	r3, [r7, #4]
9000752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007530:	431a      	orrs	r2, r3
90007532:	687b      	ldr	r3, [r7, #4]
90007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007536:	431a      	orrs	r2, r3
90007538:	687b      	ldr	r3, [r7, #4]
9000753a:	699b      	ldr	r3, [r3, #24]
9000753c:	431a      	orrs	r2, r3
9000753e:	687b      	ldr	r3, [r7, #4]
90007540:	691b      	ldr	r3, [r3, #16]
90007542:	431a      	orrs	r2, r3
90007544:	687b      	ldr	r3, [r7, #4]
90007546:	695b      	ldr	r3, [r3, #20]
90007548:	431a      	orrs	r2, r3
9000754a:	687b      	ldr	r3, [r7, #4]
9000754c:	6a1b      	ldr	r3, [r3, #32]
9000754e:	431a      	orrs	r2, r3
90007550:	687b      	ldr	r3, [r7, #4]
90007552:	685b      	ldr	r3, [r3, #4]
90007554:	431a      	orrs	r2, r3
90007556:	687b      	ldr	r3, [r7, #4]
90007558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000755a:	431a      	orrs	r2, r3
9000755c:	687b      	ldr	r3, [r7, #4]
9000755e:	689b      	ldr	r3, [r3, #8]
90007560:	431a      	orrs	r2, r3
90007562:	687b      	ldr	r3, [r7, #4]
90007564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90007566:	ea42 0103 	orr.w	r1, r2, r3
9000756a:	687b      	ldr	r3, [r7, #4]
9000756c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
9000756e:	687b      	ldr	r3, [r7, #4]
90007570:	681b      	ldr	r3, [r3, #0]
90007572:	430a      	orrs	r2, r1
90007574:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
90007576:	687b      	ldr	r3, [r7, #4]
90007578:	685b      	ldr	r3, [r3, #4]
9000757a:	2b00      	cmp	r3, #0
9000757c:	d113      	bne.n	900075a6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
9000757e:	687b      	ldr	r3, [r7, #4]
90007580:	681b      	ldr	r3, [r3, #0]
90007582:	689b      	ldr	r3, [r3, #8]
90007584:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
90007588:	687b      	ldr	r3, [r7, #4]
9000758a:	681b      	ldr	r3, [r3, #0]
9000758c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
90007590:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
90007592:	687b      	ldr	r3, [r7, #4]
90007594:	681b      	ldr	r3, [r3, #0]
90007596:	689b      	ldr	r3, [r3, #8]
90007598:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
9000759c:	687b      	ldr	r3, [r7, #4]
9000759e:	681b      	ldr	r3, [r3, #0]
900075a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
900075a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
900075a6:	687b      	ldr	r3, [r7, #4]
900075a8:	681b      	ldr	r3, [r3, #0]
900075aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
900075ac:	687b      	ldr	r3, [r7, #4]
900075ae:	681b      	ldr	r3, [r3, #0]
900075b0:	f022 0201 	bic.w	r2, r2, #1
900075b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
900075b6:	687b      	ldr	r3, [r7, #4]
900075b8:	685b      	ldr	r3, [r3, #4]
900075ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900075be:	2b00      	cmp	r3, #0
900075c0:	d00a      	beq.n	900075d8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
900075c2:	687b      	ldr	r3, [r7, #4]
900075c4:	681b      	ldr	r3, [r3, #0]
900075c6:	68db      	ldr	r3, [r3, #12]
900075c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
900075cc:	687b      	ldr	r3, [r7, #4]
900075ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
900075d0:	687b      	ldr	r3, [r7, #4]
900075d2:	681b      	ldr	r3, [r3, #0]
900075d4:	430a      	orrs	r2, r1
900075d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
900075d8:	687b      	ldr	r3, [r7, #4]
900075da:	2200      	movs	r2, #0
900075dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
900075e0:	687b      	ldr	r3, [r7, #4]
900075e2:	2201      	movs	r2, #1
900075e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
900075e8:	2300      	movs	r3, #0
}
900075ea:	4618      	mov	r0, r3
900075ec:	3710      	adds	r7, #16
900075ee:	46bd      	mov	sp, r7
900075f0:	bd80      	pop	{r7, pc}
900075f2:	bf00      	nop
900075f4:	40013000 	.word	0x40013000
900075f8:	40003800 	.word	0x40003800
900075fc:	40003c00 	.word	0x40003c00

90007600 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
90007600:	b480      	push	{r7}
90007602:	b085      	sub	sp, #20
90007604:	af00      	add	r7, sp, #0
90007606:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
90007608:	687b      	ldr	r3, [r7, #4]
9000760a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000760c:	095b      	lsrs	r3, r3, #5
9000760e:	3301      	adds	r3, #1
90007610:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
90007612:	687b      	ldr	r3, [r7, #4]
90007614:	68db      	ldr	r3, [r3, #12]
90007616:	3301      	adds	r3, #1
90007618:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
9000761a:	68bb      	ldr	r3, [r7, #8]
9000761c:	3307      	adds	r3, #7
9000761e:	08db      	lsrs	r3, r3, #3
90007620:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
90007622:	68bb      	ldr	r3, [r7, #8]
90007624:	68fa      	ldr	r2, [r7, #12]
90007626:	fb02 f303 	mul.w	r3, r2, r3
}
9000762a:	4618      	mov	r0, r3
9000762c:	3714      	adds	r7, #20
9000762e:	46bd      	mov	sp, r7
90007630:	f85d 7b04 	ldr.w	r7, [sp], #4
90007634:	4770      	bx	lr

90007636 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90007636:	b580      	push	{r7, lr}
90007638:	b082      	sub	sp, #8
9000763a:	af00      	add	r7, sp, #0
9000763c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
9000763e:	687b      	ldr	r3, [r7, #4]
90007640:	2b00      	cmp	r3, #0
90007642:	d101      	bne.n	90007648 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90007644:	2301      	movs	r3, #1
90007646:	e042      	b.n	900076ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90007648:	687b      	ldr	r3, [r7, #4]
9000764a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000764e:	2b00      	cmp	r3, #0
90007650:	d106      	bne.n	90007660 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90007652:	687b      	ldr	r3, [r7, #4]
90007654:	2200      	movs	r2, #0
90007656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
9000765a:	6878      	ldr	r0, [r7, #4]
9000765c:	f7fa f914 	bl	90001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90007660:	687b      	ldr	r3, [r7, #4]
90007662:	2224      	movs	r2, #36	; 0x24
90007664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
90007668:	687b      	ldr	r3, [r7, #4]
9000766a:	681b      	ldr	r3, [r3, #0]
9000766c:	681a      	ldr	r2, [r3, #0]
9000766e:	687b      	ldr	r3, [r7, #4]
90007670:	681b      	ldr	r3, [r3, #0]
90007672:	f022 0201 	bic.w	r2, r2, #1
90007676:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90007678:	6878      	ldr	r0, [r7, #4]
9000767a:	f000 f8c3 	bl	90007804 <UART_SetConfig>
9000767e:	4603      	mov	r3, r0
90007680:	2b01      	cmp	r3, #1
90007682:	d101      	bne.n	90007688 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
90007684:	2301      	movs	r3, #1
90007686:	e022      	b.n	900076ce <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90007688:	687b      	ldr	r3, [r7, #4]
9000768a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000768c:	2b00      	cmp	r3, #0
9000768e:	d002      	beq.n	90007696 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
90007690:	6878      	ldr	r0, [r7, #4]
90007692:	f000 fe1f 	bl	900082d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90007696:	687b      	ldr	r3, [r7, #4]
90007698:	681b      	ldr	r3, [r3, #0]
9000769a:	685a      	ldr	r2, [r3, #4]
9000769c:	687b      	ldr	r3, [r7, #4]
9000769e:	681b      	ldr	r3, [r3, #0]
900076a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
900076a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
900076a6:	687b      	ldr	r3, [r7, #4]
900076a8:	681b      	ldr	r3, [r3, #0]
900076aa:	689a      	ldr	r2, [r3, #8]
900076ac:	687b      	ldr	r3, [r7, #4]
900076ae:	681b      	ldr	r3, [r3, #0]
900076b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
900076b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
900076b6:	687b      	ldr	r3, [r7, #4]
900076b8:	681b      	ldr	r3, [r3, #0]
900076ba:	681a      	ldr	r2, [r3, #0]
900076bc:	687b      	ldr	r3, [r7, #4]
900076be:	681b      	ldr	r3, [r3, #0]
900076c0:	f042 0201 	orr.w	r2, r2, #1
900076c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
900076c6:	6878      	ldr	r0, [r7, #4]
900076c8:	f000 fea6 	bl	90008418 <UART_CheckIdleState>
900076cc:	4603      	mov	r3, r0
}
900076ce:	4618      	mov	r0, r3
900076d0:	3708      	adds	r7, #8
900076d2:	46bd      	mov	sp, r7
900076d4:	bd80      	pop	{r7, pc}

900076d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
900076d6:	b580      	push	{r7, lr}
900076d8:	b08a      	sub	sp, #40	; 0x28
900076da:	af02      	add	r7, sp, #8
900076dc:	60f8      	str	r0, [r7, #12]
900076de:	60b9      	str	r1, [r7, #8]
900076e0:	603b      	str	r3, [r7, #0]
900076e2:	4613      	mov	r3, r2
900076e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
900076e6:	68fb      	ldr	r3, [r7, #12]
900076e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900076ec:	2b20      	cmp	r3, #32
900076ee:	f040 8083 	bne.w	900077f8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
900076f2:	68bb      	ldr	r3, [r7, #8]
900076f4:	2b00      	cmp	r3, #0
900076f6:	d002      	beq.n	900076fe <HAL_UART_Transmit+0x28>
900076f8:	88fb      	ldrh	r3, [r7, #6]
900076fa:	2b00      	cmp	r3, #0
900076fc:	d101      	bne.n	90007702 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
900076fe:	2301      	movs	r3, #1
90007700:	e07b      	b.n	900077fa <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
90007702:	68fb      	ldr	r3, [r7, #12]
90007704:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
90007708:	2b01      	cmp	r3, #1
9000770a:	d101      	bne.n	90007710 <HAL_UART_Transmit+0x3a>
9000770c:	2302      	movs	r3, #2
9000770e:	e074      	b.n	900077fa <HAL_UART_Transmit+0x124>
90007710:	68fb      	ldr	r3, [r7, #12]
90007712:	2201      	movs	r2, #1
90007714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90007718:	68fb      	ldr	r3, [r7, #12]
9000771a:	2200      	movs	r2, #0
9000771c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
90007720:	68fb      	ldr	r3, [r7, #12]
90007722:	2221      	movs	r2, #33	; 0x21
90007724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90007728:	f7fa fc42 	bl	90001fb0 <HAL_GetTick>
9000772c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
9000772e:	68fb      	ldr	r3, [r7, #12]
90007730:	88fa      	ldrh	r2, [r7, #6]
90007732:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
90007736:	68fb      	ldr	r3, [r7, #12]
90007738:	88fa      	ldrh	r2, [r7, #6]
9000773a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000773e:	68fb      	ldr	r3, [r7, #12]
90007740:	689b      	ldr	r3, [r3, #8]
90007742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90007746:	d108      	bne.n	9000775a <HAL_UART_Transmit+0x84>
90007748:	68fb      	ldr	r3, [r7, #12]
9000774a:	691b      	ldr	r3, [r3, #16]
9000774c:	2b00      	cmp	r3, #0
9000774e:	d104      	bne.n	9000775a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
90007750:	2300      	movs	r3, #0
90007752:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90007754:	68bb      	ldr	r3, [r7, #8]
90007756:	61bb      	str	r3, [r7, #24]
90007758:	e003      	b.n	90007762 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
9000775a:	68bb      	ldr	r3, [r7, #8]
9000775c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
9000775e:	2300      	movs	r3, #0
90007760:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
90007762:	68fb      	ldr	r3, [r7, #12]
90007764:	2200      	movs	r2, #0
90007766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
9000776a:	e02c      	b.n	900077c6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
9000776c:	683b      	ldr	r3, [r7, #0]
9000776e:	9300      	str	r3, [sp, #0]
90007770:	697b      	ldr	r3, [r7, #20]
90007772:	2200      	movs	r2, #0
90007774:	2180      	movs	r1, #128	; 0x80
90007776:	68f8      	ldr	r0, [r7, #12]
90007778:	f000 fe99 	bl	900084ae <UART_WaitOnFlagUntilTimeout>
9000777c:	4603      	mov	r3, r0
9000777e:	2b00      	cmp	r3, #0
90007780:	d001      	beq.n	90007786 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
90007782:	2303      	movs	r3, #3
90007784:	e039      	b.n	900077fa <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
90007786:	69fb      	ldr	r3, [r7, #28]
90007788:	2b00      	cmp	r3, #0
9000778a:	d10b      	bne.n	900077a4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
9000778c:	69bb      	ldr	r3, [r7, #24]
9000778e:	881b      	ldrh	r3, [r3, #0]
90007790:	461a      	mov	r2, r3
90007792:	68fb      	ldr	r3, [r7, #12]
90007794:	681b      	ldr	r3, [r3, #0]
90007796:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000779a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
9000779c:	69bb      	ldr	r3, [r7, #24]
9000779e:	3302      	adds	r3, #2
900077a0:	61bb      	str	r3, [r7, #24]
900077a2:	e007      	b.n	900077b4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
900077a4:	69fb      	ldr	r3, [r7, #28]
900077a6:	781a      	ldrb	r2, [r3, #0]
900077a8:	68fb      	ldr	r3, [r7, #12]
900077aa:	681b      	ldr	r3, [r3, #0]
900077ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
900077ae:	69fb      	ldr	r3, [r7, #28]
900077b0:	3301      	adds	r3, #1
900077b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
900077b4:	68fb      	ldr	r3, [r7, #12]
900077b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
900077ba:	b29b      	uxth	r3, r3
900077bc:	3b01      	subs	r3, #1
900077be:	b29a      	uxth	r2, r3
900077c0:	68fb      	ldr	r3, [r7, #12]
900077c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
900077c6:	68fb      	ldr	r3, [r7, #12]
900077c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
900077cc:	b29b      	uxth	r3, r3
900077ce:	2b00      	cmp	r3, #0
900077d0:	d1cc      	bne.n	9000776c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
900077d2:	683b      	ldr	r3, [r7, #0]
900077d4:	9300      	str	r3, [sp, #0]
900077d6:	697b      	ldr	r3, [r7, #20]
900077d8:	2200      	movs	r2, #0
900077da:	2140      	movs	r1, #64	; 0x40
900077dc:	68f8      	ldr	r0, [r7, #12]
900077de:	f000 fe66 	bl	900084ae <UART_WaitOnFlagUntilTimeout>
900077e2:	4603      	mov	r3, r0
900077e4:	2b00      	cmp	r3, #0
900077e6:	d001      	beq.n	900077ec <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
900077e8:	2303      	movs	r3, #3
900077ea:	e006      	b.n	900077fa <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
900077ec:	68fb      	ldr	r3, [r7, #12]
900077ee:	2220      	movs	r2, #32
900077f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
900077f4:	2300      	movs	r3, #0
900077f6:	e000      	b.n	900077fa <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
900077f8:	2302      	movs	r3, #2
  }
}
900077fa:	4618      	mov	r0, r3
900077fc:	3720      	adds	r7, #32
900077fe:	46bd      	mov	sp, r7
90007800:	bd80      	pop	{r7, pc}
	...

90007804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90007804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007808:	b092      	sub	sp, #72	; 0x48
9000780a:	af00      	add	r7, sp, #0
9000780c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
9000780e:	2300      	movs	r3, #0
90007810:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90007814:	697b      	ldr	r3, [r7, #20]
90007816:	689a      	ldr	r2, [r3, #8]
90007818:	697b      	ldr	r3, [r7, #20]
9000781a:	691b      	ldr	r3, [r3, #16]
9000781c:	431a      	orrs	r2, r3
9000781e:	697b      	ldr	r3, [r7, #20]
90007820:	695b      	ldr	r3, [r3, #20]
90007822:	431a      	orrs	r2, r3
90007824:	697b      	ldr	r3, [r7, #20]
90007826:	69db      	ldr	r3, [r3, #28]
90007828:	4313      	orrs	r3, r2
9000782a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000782c:	697b      	ldr	r3, [r7, #20]
9000782e:	681b      	ldr	r3, [r3, #0]
90007830:	681a      	ldr	r2, [r3, #0]
90007832:	4bbe      	ldr	r3, [pc, #760]	; (90007b2c <UART_SetConfig+0x328>)
90007834:	4013      	ands	r3, r2
90007836:	697a      	ldr	r2, [r7, #20]
90007838:	6812      	ldr	r2, [r2, #0]
9000783a:	6c79      	ldr	r1, [r7, #68]	; 0x44
9000783c:	430b      	orrs	r3, r1
9000783e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90007840:	697b      	ldr	r3, [r7, #20]
90007842:	681b      	ldr	r3, [r3, #0]
90007844:	685b      	ldr	r3, [r3, #4]
90007846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
9000784a:	697b      	ldr	r3, [r7, #20]
9000784c:	68da      	ldr	r2, [r3, #12]
9000784e:	697b      	ldr	r3, [r7, #20]
90007850:	681b      	ldr	r3, [r3, #0]
90007852:	430a      	orrs	r2, r1
90007854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90007856:	697b      	ldr	r3, [r7, #20]
90007858:	699b      	ldr	r3, [r3, #24]
9000785a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
9000785c:	697b      	ldr	r3, [r7, #20]
9000785e:	681b      	ldr	r3, [r3, #0]
90007860:	4ab3      	ldr	r2, [pc, #716]	; (90007b30 <UART_SetConfig+0x32c>)
90007862:	4293      	cmp	r3, r2
90007864:	d004      	beq.n	90007870 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
90007866:	697b      	ldr	r3, [r7, #20]
90007868:	6a1b      	ldr	r3, [r3, #32]
9000786a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000786c:	4313      	orrs	r3, r2
9000786e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90007870:	697b      	ldr	r3, [r7, #20]
90007872:	681b      	ldr	r3, [r3, #0]
90007874:	689a      	ldr	r2, [r3, #8]
90007876:	4baf      	ldr	r3, [pc, #700]	; (90007b34 <UART_SetConfig+0x330>)
90007878:	4013      	ands	r3, r2
9000787a:	697a      	ldr	r2, [r7, #20]
9000787c:	6812      	ldr	r2, [r2, #0]
9000787e:	6c79      	ldr	r1, [r7, #68]	; 0x44
90007880:	430b      	orrs	r3, r1
90007882:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90007884:	697b      	ldr	r3, [r7, #20]
90007886:	681b      	ldr	r3, [r3, #0]
90007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000788a:	f023 010f 	bic.w	r1, r3, #15
9000788e:	697b      	ldr	r3, [r7, #20]
90007890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90007892:	697b      	ldr	r3, [r7, #20]
90007894:	681b      	ldr	r3, [r3, #0]
90007896:	430a      	orrs	r2, r1
90007898:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
9000789a:	697b      	ldr	r3, [r7, #20]
9000789c:	681b      	ldr	r3, [r3, #0]
9000789e:	4aa6      	ldr	r2, [pc, #664]	; (90007b38 <UART_SetConfig+0x334>)
900078a0:	4293      	cmp	r3, r2
900078a2:	d177      	bne.n	90007994 <UART_SetConfig+0x190>
900078a4:	4ba5      	ldr	r3, [pc, #660]	; (90007b3c <UART_SetConfig+0x338>)
900078a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900078a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
900078ac:	2b28      	cmp	r3, #40	; 0x28
900078ae:	d86d      	bhi.n	9000798c <UART_SetConfig+0x188>
900078b0:	a201      	add	r2, pc, #4	; (adr r2, 900078b8 <UART_SetConfig+0xb4>)
900078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900078b6:	bf00      	nop
900078b8:	9000795d 	.word	0x9000795d
900078bc:	9000798d 	.word	0x9000798d
900078c0:	9000798d 	.word	0x9000798d
900078c4:	9000798d 	.word	0x9000798d
900078c8:	9000798d 	.word	0x9000798d
900078cc:	9000798d 	.word	0x9000798d
900078d0:	9000798d 	.word	0x9000798d
900078d4:	9000798d 	.word	0x9000798d
900078d8:	90007965 	.word	0x90007965
900078dc:	9000798d 	.word	0x9000798d
900078e0:	9000798d 	.word	0x9000798d
900078e4:	9000798d 	.word	0x9000798d
900078e8:	9000798d 	.word	0x9000798d
900078ec:	9000798d 	.word	0x9000798d
900078f0:	9000798d 	.word	0x9000798d
900078f4:	9000798d 	.word	0x9000798d
900078f8:	9000796d 	.word	0x9000796d
900078fc:	9000798d 	.word	0x9000798d
90007900:	9000798d 	.word	0x9000798d
90007904:	9000798d 	.word	0x9000798d
90007908:	9000798d 	.word	0x9000798d
9000790c:	9000798d 	.word	0x9000798d
90007910:	9000798d 	.word	0x9000798d
90007914:	9000798d 	.word	0x9000798d
90007918:	90007975 	.word	0x90007975
9000791c:	9000798d 	.word	0x9000798d
90007920:	9000798d 	.word	0x9000798d
90007924:	9000798d 	.word	0x9000798d
90007928:	9000798d 	.word	0x9000798d
9000792c:	9000798d 	.word	0x9000798d
90007930:	9000798d 	.word	0x9000798d
90007934:	9000798d 	.word	0x9000798d
90007938:	9000797d 	.word	0x9000797d
9000793c:	9000798d 	.word	0x9000798d
90007940:	9000798d 	.word	0x9000798d
90007944:	9000798d 	.word	0x9000798d
90007948:	9000798d 	.word	0x9000798d
9000794c:	9000798d 	.word	0x9000798d
90007950:	9000798d 	.word	0x9000798d
90007954:	9000798d 	.word	0x9000798d
90007958:	90007985 	.word	0x90007985
9000795c:	2301      	movs	r3, #1
9000795e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007962:	e222      	b.n	90007daa <UART_SetConfig+0x5a6>
90007964:	2304      	movs	r3, #4
90007966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000796a:	e21e      	b.n	90007daa <UART_SetConfig+0x5a6>
9000796c:	2308      	movs	r3, #8
9000796e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007972:	e21a      	b.n	90007daa <UART_SetConfig+0x5a6>
90007974:	2310      	movs	r3, #16
90007976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000797a:	e216      	b.n	90007daa <UART_SetConfig+0x5a6>
9000797c:	2320      	movs	r3, #32
9000797e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007982:	e212      	b.n	90007daa <UART_SetConfig+0x5a6>
90007984:	2340      	movs	r3, #64	; 0x40
90007986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000798a:	e20e      	b.n	90007daa <UART_SetConfig+0x5a6>
9000798c:	2380      	movs	r3, #128	; 0x80
9000798e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007992:	e20a      	b.n	90007daa <UART_SetConfig+0x5a6>
90007994:	697b      	ldr	r3, [r7, #20]
90007996:	681b      	ldr	r3, [r3, #0]
90007998:	4a69      	ldr	r2, [pc, #420]	; (90007b40 <UART_SetConfig+0x33c>)
9000799a:	4293      	cmp	r3, r2
9000799c:	d130      	bne.n	90007a00 <UART_SetConfig+0x1fc>
9000799e:	4b67      	ldr	r3, [pc, #412]	; (90007b3c <UART_SetConfig+0x338>)
900079a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900079a2:	f003 0307 	and.w	r3, r3, #7
900079a6:	2b05      	cmp	r3, #5
900079a8:	d826      	bhi.n	900079f8 <UART_SetConfig+0x1f4>
900079aa:	a201      	add	r2, pc, #4	; (adr r2, 900079b0 <UART_SetConfig+0x1ac>)
900079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900079b0:	900079c9 	.word	0x900079c9
900079b4:	900079d1 	.word	0x900079d1
900079b8:	900079d9 	.word	0x900079d9
900079bc:	900079e1 	.word	0x900079e1
900079c0:	900079e9 	.word	0x900079e9
900079c4:	900079f1 	.word	0x900079f1
900079c8:	2300      	movs	r3, #0
900079ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079ce:	e1ec      	b.n	90007daa <UART_SetConfig+0x5a6>
900079d0:	2304      	movs	r3, #4
900079d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079d6:	e1e8      	b.n	90007daa <UART_SetConfig+0x5a6>
900079d8:	2308      	movs	r3, #8
900079da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079de:	e1e4      	b.n	90007daa <UART_SetConfig+0x5a6>
900079e0:	2310      	movs	r3, #16
900079e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079e6:	e1e0      	b.n	90007daa <UART_SetConfig+0x5a6>
900079e8:	2320      	movs	r3, #32
900079ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079ee:	e1dc      	b.n	90007daa <UART_SetConfig+0x5a6>
900079f0:	2340      	movs	r3, #64	; 0x40
900079f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079f6:	e1d8      	b.n	90007daa <UART_SetConfig+0x5a6>
900079f8:	2380      	movs	r3, #128	; 0x80
900079fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079fe:	e1d4      	b.n	90007daa <UART_SetConfig+0x5a6>
90007a00:	697b      	ldr	r3, [r7, #20]
90007a02:	681b      	ldr	r3, [r3, #0]
90007a04:	4a4f      	ldr	r2, [pc, #316]	; (90007b44 <UART_SetConfig+0x340>)
90007a06:	4293      	cmp	r3, r2
90007a08:	d130      	bne.n	90007a6c <UART_SetConfig+0x268>
90007a0a:	4b4c      	ldr	r3, [pc, #304]	; (90007b3c <UART_SetConfig+0x338>)
90007a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90007a0e:	f003 0307 	and.w	r3, r3, #7
90007a12:	2b05      	cmp	r3, #5
90007a14:	d826      	bhi.n	90007a64 <UART_SetConfig+0x260>
90007a16:	a201      	add	r2, pc, #4	; (adr r2, 90007a1c <UART_SetConfig+0x218>)
90007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007a1c:	90007a35 	.word	0x90007a35
90007a20:	90007a3d 	.word	0x90007a3d
90007a24:	90007a45 	.word	0x90007a45
90007a28:	90007a4d 	.word	0x90007a4d
90007a2c:	90007a55 	.word	0x90007a55
90007a30:	90007a5d 	.word	0x90007a5d
90007a34:	2300      	movs	r3, #0
90007a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a3a:	e1b6      	b.n	90007daa <UART_SetConfig+0x5a6>
90007a3c:	2304      	movs	r3, #4
90007a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a42:	e1b2      	b.n	90007daa <UART_SetConfig+0x5a6>
90007a44:	2308      	movs	r3, #8
90007a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a4a:	e1ae      	b.n	90007daa <UART_SetConfig+0x5a6>
90007a4c:	2310      	movs	r3, #16
90007a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a52:	e1aa      	b.n	90007daa <UART_SetConfig+0x5a6>
90007a54:	2320      	movs	r3, #32
90007a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a5a:	e1a6      	b.n	90007daa <UART_SetConfig+0x5a6>
90007a5c:	2340      	movs	r3, #64	; 0x40
90007a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a62:	e1a2      	b.n	90007daa <UART_SetConfig+0x5a6>
90007a64:	2380      	movs	r3, #128	; 0x80
90007a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a6a:	e19e      	b.n	90007daa <UART_SetConfig+0x5a6>
90007a6c:	697b      	ldr	r3, [r7, #20]
90007a6e:	681b      	ldr	r3, [r3, #0]
90007a70:	4a35      	ldr	r2, [pc, #212]	; (90007b48 <UART_SetConfig+0x344>)
90007a72:	4293      	cmp	r3, r2
90007a74:	d130      	bne.n	90007ad8 <UART_SetConfig+0x2d4>
90007a76:	4b31      	ldr	r3, [pc, #196]	; (90007b3c <UART_SetConfig+0x338>)
90007a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90007a7a:	f003 0307 	and.w	r3, r3, #7
90007a7e:	2b05      	cmp	r3, #5
90007a80:	d826      	bhi.n	90007ad0 <UART_SetConfig+0x2cc>
90007a82:	a201      	add	r2, pc, #4	; (adr r2, 90007a88 <UART_SetConfig+0x284>)
90007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007a88:	90007aa1 	.word	0x90007aa1
90007a8c:	90007aa9 	.word	0x90007aa9
90007a90:	90007ab1 	.word	0x90007ab1
90007a94:	90007ab9 	.word	0x90007ab9
90007a98:	90007ac1 	.word	0x90007ac1
90007a9c:	90007ac9 	.word	0x90007ac9
90007aa0:	2300      	movs	r3, #0
90007aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007aa6:	e180      	b.n	90007daa <UART_SetConfig+0x5a6>
90007aa8:	2304      	movs	r3, #4
90007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007aae:	e17c      	b.n	90007daa <UART_SetConfig+0x5a6>
90007ab0:	2308      	movs	r3, #8
90007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007ab6:	e178      	b.n	90007daa <UART_SetConfig+0x5a6>
90007ab8:	2310      	movs	r3, #16
90007aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007abe:	e174      	b.n	90007daa <UART_SetConfig+0x5a6>
90007ac0:	2320      	movs	r3, #32
90007ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007ac6:	e170      	b.n	90007daa <UART_SetConfig+0x5a6>
90007ac8:	2340      	movs	r3, #64	; 0x40
90007aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007ace:	e16c      	b.n	90007daa <UART_SetConfig+0x5a6>
90007ad0:	2380      	movs	r3, #128	; 0x80
90007ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007ad6:	e168      	b.n	90007daa <UART_SetConfig+0x5a6>
90007ad8:	697b      	ldr	r3, [r7, #20]
90007ada:	681b      	ldr	r3, [r3, #0]
90007adc:	4a1b      	ldr	r2, [pc, #108]	; (90007b4c <UART_SetConfig+0x348>)
90007ade:	4293      	cmp	r3, r2
90007ae0:	d142      	bne.n	90007b68 <UART_SetConfig+0x364>
90007ae2:	4b16      	ldr	r3, [pc, #88]	; (90007b3c <UART_SetConfig+0x338>)
90007ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90007ae6:	f003 0307 	and.w	r3, r3, #7
90007aea:	2b05      	cmp	r3, #5
90007aec:	d838      	bhi.n	90007b60 <UART_SetConfig+0x35c>
90007aee:	a201      	add	r2, pc, #4	; (adr r2, 90007af4 <UART_SetConfig+0x2f0>)
90007af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007af4:	90007b0d 	.word	0x90007b0d
90007af8:	90007b15 	.word	0x90007b15
90007afc:	90007b1d 	.word	0x90007b1d
90007b00:	90007b25 	.word	0x90007b25
90007b04:	90007b51 	.word	0x90007b51
90007b08:	90007b59 	.word	0x90007b59
90007b0c:	2300      	movs	r3, #0
90007b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b12:	e14a      	b.n	90007daa <UART_SetConfig+0x5a6>
90007b14:	2304      	movs	r3, #4
90007b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b1a:	e146      	b.n	90007daa <UART_SetConfig+0x5a6>
90007b1c:	2308      	movs	r3, #8
90007b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b22:	e142      	b.n	90007daa <UART_SetConfig+0x5a6>
90007b24:	2310      	movs	r3, #16
90007b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b2a:	e13e      	b.n	90007daa <UART_SetConfig+0x5a6>
90007b2c:	cfff69f3 	.word	0xcfff69f3
90007b30:	58000c00 	.word	0x58000c00
90007b34:	11fff4ff 	.word	0x11fff4ff
90007b38:	40011000 	.word	0x40011000
90007b3c:	58024400 	.word	0x58024400
90007b40:	40004400 	.word	0x40004400
90007b44:	40004800 	.word	0x40004800
90007b48:	40004c00 	.word	0x40004c00
90007b4c:	40005000 	.word	0x40005000
90007b50:	2320      	movs	r3, #32
90007b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b56:	e128      	b.n	90007daa <UART_SetConfig+0x5a6>
90007b58:	2340      	movs	r3, #64	; 0x40
90007b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b5e:	e124      	b.n	90007daa <UART_SetConfig+0x5a6>
90007b60:	2380      	movs	r3, #128	; 0x80
90007b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b66:	e120      	b.n	90007daa <UART_SetConfig+0x5a6>
90007b68:	697b      	ldr	r3, [r7, #20]
90007b6a:	681b      	ldr	r3, [r3, #0]
90007b6c:	4acb      	ldr	r2, [pc, #812]	; (90007e9c <UART_SetConfig+0x698>)
90007b6e:	4293      	cmp	r3, r2
90007b70:	d176      	bne.n	90007c60 <UART_SetConfig+0x45c>
90007b72:	4bcb      	ldr	r3, [pc, #812]	; (90007ea0 <UART_SetConfig+0x69c>)
90007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90007b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
90007b7a:	2b28      	cmp	r3, #40	; 0x28
90007b7c:	d86c      	bhi.n	90007c58 <UART_SetConfig+0x454>
90007b7e:	a201      	add	r2, pc, #4	; (adr r2, 90007b84 <UART_SetConfig+0x380>)
90007b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007b84:	90007c29 	.word	0x90007c29
90007b88:	90007c59 	.word	0x90007c59
90007b8c:	90007c59 	.word	0x90007c59
90007b90:	90007c59 	.word	0x90007c59
90007b94:	90007c59 	.word	0x90007c59
90007b98:	90007c59 	.word	0x90007c59
90007b9c:	90007c59 	.word	0x90007c59
90007ba0:	90007c59 	.word	0x90007c59
90007ba4:	90007c31 	.word	0x90007c31
90007ba8:	90007c59 	.word	0x90007c59
90007bac:	90007c59 	.word	0x90007c59
90007bb0:	90007c59 	.word	0x90007c59
90007bb4:	90007c59 	.word	0x90007c59
90007bb8:	90007c59 	.word	0x90007c59
90007bbc:	90007c59 	.word	0x90007c59
90007bc0:	90007c59 	.word	0x90007c59
90007bc4:	90007c39 	.word	0x90007c39
90007bc8:	90007c59 	.word	0x90007c59
90007bcc:	90007c59 	.word	0x90007c59
90007bd0:	90007c59 	.word	0x90007c59
90007bd4:	90007c59 	.word	0x90007c59
90007bd8:	90007c59 	.word	0x90007c59
90007bdc:	90007c59 	.word	0x90007c59
90007be0:	90007c59 	.word	0x90007c59
90007be4:	90007c41 	.word	0x90007c41
90007be8:	90007c59 	.word	0x90007c59
90007bec:	90007c59 	.word	0x90007c59
90007bf0:	90007c59 	.word	0x90007c59
90007bf4:	90007c59 	.word	0x90007c59
90007bf8:	90007c59 	.word	0x90007c59
90007bfc:	90007c59 	.word	0x90007c59
90007c00:	90007c59 	.word	0x90007c59
90007c04:	90007c49 	.word	0x90007c49
90007c08:	90007c59 	.word	0x90007c59
90007c0c:	90007c59 	.word	0x90007c59
90007c10:	90007c59 	.word	0x90007c59
90007c14:	90007c59 	.word	0x90007c59
90007c18:	90007c59 	.word	0x90007c59
90007c1c:	90007c59 	.word	0x90007c59
90007c20:	90007c59 	.word	0x90007c59
90007c24:	90007c51 	.word	0x90007c51
90007c28:	2301      	movs	r3, #1
90007c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c2e:	e0bc      	b.n	90007daa <UART_SetConfig+0x5a6>
90007c30:	2304      	movs	r3, #4
90007c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c36:	e0b8      	b.n	90007daa <UART_SetConfig+0x5a6>
90007c38:	2308      	movs	r3, #8
90007c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c3e:	e0b4      	b.n	90007daa <UART_SetConfig+0x5a6>
90007c40:	2310      	movs	r3, #16
90007c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c46:	e0b0      	b.n	90007daa <UART_SetConfig+0x5a6>
90007c48:	2320      	movs	r3, #32
90007c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c4e:	e0ac      	b.n	90007daa <UART_SetConfig+0x5a6>
90007c50:	2340      	movs	r3, #64	; 0x40
90007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c56:	e0a8      	b.n	90007daa <UART_SetConfig+0x5a6>
90007c58:	2380      	movs	r3, #128	; 0x80
90007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c5e:	e0a4      	b.n	90007daa <UART_SetConfig+0x5a6>
90007c60:	697b      	ldr	r3, [r7, #20]
90007c62:	681b      	ldr	r3, [r3, #0]
90007c64:	4a8f      	ldr	r2, [pc, #572]	; (90007ea4 <UART_SetConfig+0x6a0>)
90007c66:	4293      	cmp	r3, r2
90007c68:	d130      	bne.n	90007ccc <UART_SetConfig+0x4c8>
90007c6a:	4b8d      	ldr	r3, [pc, #564]	; (90007ea0 <UART_SetConfig+0x69c>)
90007c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90007c6e:	f003 0307 	and.w	r3, r3, #7
90007c72:	2b05      	cmp	r3, #5
90007c74:	d826      	bhi.n	90007cc4 <UART_SetConfig+0x4c0>
90007c76:	a201      	add	r2, pc, #4	; (adr r2, 90007c7c <UART_SetConfig+0x478>)
90007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007c7c:	90007c95 	.word	0x90007c95
90007c80:	90007c9d 	.word	0x90007c9d
90007c84:	90007ca5 	.word	0x90007ca5
90007c88:	90007cad 	.word	0x90007cad
90007c8c:	90007cb5 	.word	0x90007cb5
90007c90:	90007cbd 	.word	0x90007cbd
90007c94:	2300      	movs	r3, #0
90007c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c9a:	e086      	b.n	90007daa <UART_SetConfig+0x5a6>
90007c9c:	2304      	movs	r3, #4
90007c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007ca2:	e082      	b.n	90007daa <UART_SetConfig+0x5a6>
90007ca4:	2308      	movs	r3, #8
90007ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007caa:	e07e      	b.n	90007daa <UART_SetConfig+0x5a6>
90007cac:	2310      	movs	r3, #16
90007cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007cb2:	e07a      	b.n	90007daa <UART_SetConfig+0x5a6>
90007cb4:	2320      	movs	r3, #32
90007cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007cba:	e076      	b.n	90007daa <UART_SetConfig+0x5a6>
90007cbc:	2340      	movs	r3, #64	; 0x40
90007cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007cc2:	e072      	b.n	90007daa <UART_SetConfig+0x5a6>
90007cc4:	2380      	movs	r3, #128	; 0x80
90007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007cca:	e06e      	b.n	90007daa <UART_SetConfig+0x5a6>
90007ccc:	697b      	ldr	r3, [r7, #20]
90007cce:	681b      	ldr	r3, [r3, #0]
90007cd0:	4a75      	ldr	r2, [pc, #468]	; (90007ea8 <UART_SetConfig+0x6a4>)
90007cd2:	4293      	cmp	r3, r2
90007cd4:	d130      	bne.n	90007d38 <UART_SetConfig+0x534>
90007cd6:	4b72      	ldr	r3, [pc, #456]	; (90007ea0 <UART_SetConfig+0x69c>)
90007cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90007cda:	f003 0307 	and.w	r3, r3, #7
90007cde:	2b05      	cmp	r3, #5
90007ce0:	d826      	bhi.n	90007d30 <UART_SetConfig+0x52c>
90007ce2:	a201      	add	r2, pc, #4	; (adr r2, 90007ce8 <UART_SetConfig+0x4e4>)
90007ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007ce8:	90007d01 	.word	0x90007d01
90007cec:	90007d09 	.word	0x90007d09
90007cf0:	90007d11 	.word	0x90007d11
90007cf4:	90007d19 	.word	0x90007d19
90007cf8:	90007d21 	.word	0x90007d21
90007cfc:	90007d29 	.word	0x90007d29
90007d00:	2300      	movs	r3, #0
90007d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d06:	e050      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d08:	2304      	movs	r3, #4
90007d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d0e:	e04c      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d10:	2308      	movs	r3, #8
90007d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d16:	e048      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d18:	2310      	movs	r3, #16
90007d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d1e:	e044      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d20:	2320      	movs	r3, #32
90007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d26:	e040      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d28:	2340      	movs	r3, #64	; 0x40
90007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d2e:	e03c      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d30:	2380      	movs	r3, #128	; 0x80
90007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d36:	e038      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d38:	697b      	ldr	r3, [r7, #20]
90007d3a:	681b      	ldr	r3, [r3, #0]
90007d3c:	4a5b      	ldr	r2, [pc, #364]	; (90007eac <UART_SetConfig+0x6a8>)
90007d3e:	4293      	cmp	r3, r2
90007d40:	d130      	bne.n	90007da4 <UART_SetConfig+0x5a0>
90007d42:	4b57      	ldr	r3, [pc, #348]	; (90007ea0 <UART_SetConfig+0x69c>)
90007d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90007d46:	f003 0307 	and.w	r3, r3, #7
90007d4a:	2b05      	cmp	r3, #5
90007d4c:	d826      	bhi.n	90007d9c <UART_SetConfig+0x598>
90007d4e:	a201      	add	r2, pc, #4	; (adr r2, 90007d54 <UART_SetConfig+0x550>)
90007d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007d54:	90007d6d 	.word	0x90007d6d
90007d58:	90007d75 	.word	0x90007d75
90007d5c:	90007d7d 	.word	0x90007d7d
90007d60:	90007d85 	.word	0x90007d85
90007d64:	90007d8d 	.word	0x90007d8d
90007d68:	90007d95 	.word	0x90007d95
90007d6c:	2302      	movs	r3, #2
90007d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d72:	e01a      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d74:	2304      	movs	r3, #4
90007d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d7a:	e016      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d7c:	2308      	movs	r3, #8
90007d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d82:	e012      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d84:	2310      	movs	r3, #16
90007d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d8a:	e00e      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d8c:	2320      	movs	r3, #32
90007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d92:	e00a      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d94:	2340      	movs	r3, #64	; 0x40
90007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007d9a:	e006      	b.n	90007daa <UART_SetConfig+0x5a6>
90007d9c:	2380      	movs	r3, #128	; 0x80
90007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007da2:	e002      	b.n	90007daa <UART_SetConfig+0x5a6>
90007da4:	2380      	movs	r3, #128	; 0x80
90007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
90007daa:	697b      	ldr	r3, [r7, #20]
90007dac:	681b      	ldr	r3, [r3, #0]
90007dae:	4a3f      	ldr	r2, [pc, #252]	; (90007eac <UART_SetConfig+0x6a8>)
90007db0:	4293      	cmp	r3, r2
90007db2:	f040 80f8 	bne.w	90007fa6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
90007db6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
90007dba:	2b20      	cmp	r3, #32
90007dbc:	dc46      	bgt.n	90007e4c <UART_SetConfig+0x648>
90007dbe:	2b02      	cmp	r3, #2
90007dc0:	f2c0 8082 	blt.w	90007ec8 <UART_SetConfig+0x6c4>
90007dc4:	3b02      	subs	r3, #2
90007dc6:	2b1e      	cmp	r3, #30
90007dc8:	d87e      	bhi.n	90007ec8 <UART_SetConfig+0x6c4>
90007dca:	a201      	add	r2, pc, #4	; (adr r2, 90007dd0 <UART_SetConfig+0x5cc>)
90007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007dd0:	90007e53 	.word	0x90007e53
90007dd4:	90007ec9 	.word	0x90007ec9
90007dd8:	90007e5b 	.word	0x90007e5b
90007ddc:	90007ec9 	.word	0x90007ec9
90007de0:	90007ec9 	.word	0x90007ec9
90007de4:	90007ec9 	.word	0x90007ec9
90007de8:	90007e6b 	.word	0x90007e6b
90007dec:	90007ec9 	.word	0x90007ec9
90007df0:	90007ec9 	.word	0x90007ec9
90007df4:	90007ec9 	.word	0x90007ec9
90007df8:	90007ec9 	.word	0x90007ec9
90007dfc:	90007ec9 	.word	0x90007ec9
90007e00:	90007ec9 	.word	0x90007ec9
90007e04:	90007ec9 	.word	0x90007ec9
90007e08:	90007e7b 	.word	0x90007e7b
90007e0c:	90007ec9 	.word	0x90007ec9
90007e10:	90007ec9 	.word	0x90007ec9
90007e14:	90007ec9 	.word	0x90007ec9
90007e18:	90007ec9 	.word	0x90007ec9
90007e1c:	90007ec9 	.word	0x90007ec9
90007e20:	90007ec9 	.word	0x90007ec9
90007e24:	90007ec9 	.word	0x90007ec9
90007e28:	90007ec9 	.word	0x90007ec9
90007e2c:	90007ec9 	.word	0x90007ec9
90007e30:	90007ec9 	.word	0x90007ec9
90007e34:	90007ec9 	.word	0x90007ec9
90007e38:	90007ec9 	.word	0x90007ec9
90007e3c:	90007ec9 	.word	0x90007ec9
90007e40:	90007ec9 	.word	0x90007ec9
90007e44:	90007ec9 	.word	0x90007ec9
90007e48:	90007ebb 	.word	0x90007ebb
90007e4c:	2b40      	cmp	r3, #64	; 0x40
90007e4e:	d037      	beq.n	90007ec0 <UART_SetConfig+0x6bc>
90007e50:	e03a      	b.n	90007ec8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
90007e52:	f7fe fd5b 	bl	9000690c <HAL_RCCEx_GetD3PCLK1Freq>
90007e56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90007e58:	e03c      	b.n	90007ed4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90007e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
90007e5e:	4618      	mov	r0, r3
90007e60:	f7fe fd6a 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007e68:	e034      	b.n	90007ed4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90007e6a:	f107 0318 	add.w	r3, r7, #24
90007e6e:	4618      	mov	r0, r3
90007e70:	f7fe feb6 	bl	90006be0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90007e74:	69fb      	ldr	r3, [r7, #28]
90007e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007e78:	e02c      	b.n	90007ed4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007e7a:	4b09      	ldr	r3, [pc, #36]	; (90007ea0 <UART_SetConfig+0x69c>)
90007e7c:	681b      	ldr	r3, [r3, #0]
90007e7e:	f003 0320 	and.w	r3, r3, #32
90007e82:	2b00      	cmp	r3, #0
90007e84:	d016      	beq.n	90007eb4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90007e86:	4b06      	ldr	r3, [pc, #24]	; (90007ea0 <UART_SetConfig+0x69c>)
90007e88:	681b      	ldr	r3, [r3, #0]
90007e8a:	08db      	lsrs	r3, r3, #3
90007e8c:	f003 0303 	and.w	r3, r3, #3
90007e90:	4a07      	ldr	r2, [pc, #28]	; (90007eb0 <UART_SetConfig+0x6ac>)
90007e92:	fa22 f303 	lsr.w	r3, r2, r3
90007e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90007e98:	e01c      	b.n	90007ed4 <UART_SetConfig+0x6d0>
90007e9a:	bf00      	nop
90007e9c:	40011400 	.word	0x40011400
90007ea0:	58024400 	.word	0x58024400
90007ea4:	40007800 	.word	0x40007800
90007ea8:	40007c00 	.word	0x40007c00
90007eac:	58000c00 	.word	0x58000c00
90007eb0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
90007eb4:	4b9d      	ldr	r3, [pc, #628]	; (9000812c <UART_SetConfig+0x928>)
90007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007eb8:	e00c      	b.n	90007ed4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90007eba:	4b9d      	ldr	r3, [pc, #628]	; (90008130 <UART_SetConfig+0x92c>)
90007ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007ebe:	e009      	b.n	90007ed4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90007ec0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007ec6:	e005      	b.n	90007ed4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
90007ec8:	2300      	movs	r3, #0
90007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
90007ecc:	2301      	movs	r3, #1
90007ece:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
90007ed2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
90007ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007ed6:	2b00      	cmp	r3, #0
90007ed8:	f000 81de 	beq.w	90008298 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
90007edc:	697b      	ldr	r3, [r7, #20]
90007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007ee0:	4a94      	ldr	r2, [pc, #592]	; (90008134 <UART_SetConfig+0x930>)
90007ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90007ee6:	461a      	mov	r2, r3
90007ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007eea:	fbb3 f3f2 	udiv	r3, r3, r2
90007eee:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
90007ef0:	697b      	ldr	r3, [r7, #20]
90007ef2:	685a      	ldr	r2, [r3, #4]
90007ef4:	4613      	mov	r3, r2
90007ef6:	005b      	lsls	r3, r3, #1
90007ef8:	4413      	add	r3, r2
90007efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90007efc:	429a      	cmp	r2, r3
90007efe:	d305      	bcc.n	90007f0c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
90007f00:	697b      	ldr	r3, [r7, #20]
90007f02:	685b      	ldr	r3, [r3, #4]
90007f04:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
90007f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90007f08:	429a      	cmp	r2, r3
90007f0a:	d903      	bls.n	90007f14 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
90007f0c:	2301      	movs	r3, #1
90007f0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
90007f12:	e1c1      	b.n	90008298 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90007f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007f16:	2200      	movs	r2, #0
90007f18:	60bb      	str	r3, [r7, #8]
90007f1a:	60fa      	str	r2, [r7, #12]
90007f1c:	697b      	ldr	r3, [r7, #20]
90007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007f20:	4a84      	ldr	r2, [pc, #528]	; (90008134 <UART_SetConfig+0x930>)
90007f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90007f26:	b29b      	uxth	r3, r3
90007f28:	2200      	movs	r2, #0
90007f2a:	603b      	str	r3, [r7, #0]
90007f2c:	607a      	str	r2, [r7, #4]
90007f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
90007f32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
90007f36:	f7f8 f9cf 	bl	900002d8 <__aeabi_uldivmod>
90007f3a:	4602      	mov	r2, r0
90007f3c:	460b      	mov	r3, r1
90007f3e:	4610      	mov	r0, r2
90007f40:	4619      	mov	r1, r3
90007f42:	f04f 0200 	mov.w	r2, #0
90007f46:	f04f 0300 	mov.w	r3, #0
90007f4a:	020b      	lsls	r3, r1, #8
90007f4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
90007f50:	0202      	lsls	r2, r0, #8
90007f52:	6979      	ldr	r1, [r7, #20]
90007f54:	6849      	ldr	r1, [r1, #4]
90007f56:	0849      	lsrs	r1, r1, #1
90007f58:	2000      	movs	r0, #0
90007f5a:	460c      	mov	r4, r1
90007f5c:	4605      	mov	r5, r0
90007f5e:	eb12 0804 	adds.w	r8, r2, r4
90007f62:	eb43 0905 	adc.w	r9, r3, r5
90007f66:	697b      	ldr	r3, [r7, #20]
90007f68:	685b      	ldr	r3, [r3, #4]
90007f6a:	2200      	movs	r2, #0
90007f6c:	469a      	mov	sl, r3
90007f6e:	4693      	mov	fp, r2
90007f70:	4652      	mov	r2, sl
90007f72:	465b      	mov	r3, fp
90007f74:	4640      	mov	r0, r8
90007f76:	4649      	mov	r1, r9
90007f78:	f7f8 f9ae 	bl	900002d8 <__aeabi_uldivmod>
90007f7c:	4602      	mov	r2, r0
90007f7e:	460b      	mov	r3, r1
90007f80:	4613      	mov	r3, r2
90007f82:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
90007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90007f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90007f8a:	d308      	bcc.n	90007f9e <UART_SetConfig+0x79a>
90007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90007f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90007f92:	d204      	bcs.n	90007f9e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
90007f94:	697b      	ldr	r3, [r7, #20]
90007f96:	681b      	ldr	r3, [r3, #0]
90007f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
90007f9a:	60da      	str	r2, [r3, #12]
90007f9c:	e17c      	b.n	90008298 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
90007f9e:	2301      	movs	r3, #1
90007fa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
90007fa4:	e178      	b.n	90008298 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90007fa6:	697b      	ldr	r3, [r7, #20]
90007fa8:	69db      	ldr	r3, [r3, #28]
90007faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90007fae:	f040 80c5 	bne.w	9000813c <UART_SetConfig+0x938>
  {
    switch (clocksource)
90007fb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
90007fb6:	2b20      	cmp	r3, #32
90007fb8:	dc48      	bgt.n	9000804c <UART_SetConfig+0x848>
90007fba:	2b00      	cmp	r3, #0
90007fbc:	db7b      	blt.n	900080b6 <UART_SetConfig+0x8b2>
90007fbe:	2b20      	cmp	r3, #32
90007fc0:	d879      	bhi.n	900080b6 <UART_SetConfig+0x8b2>
90007fc2:	a201      	add	r2, pc, #4	; (adr r2, 90007fc8 <UART_SetConfig+0x7c4>)
90007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007fc8:	90008053 	.word	0x90008053
90007fcc:	9000805b 	.word	0x9000805b
90007fd0:	900080b7 	.word	0x900080b7
90007fd4:	900080b7 	.word	0x900080b7
90007fd8:	90008063 	.word	0x90008063
90007fdc:	900080b7 	.word	0x900080b7
90007fe0:	900080b7 	.word	0x900080b7
90007fe4:	900080b7 	.word	0x900080b7
90007fe8:	90008073 	.word	0x90008073
90007fec:	900080b7 	.word	0x900080b7
90007ff0:	900080b7 	.word	0x900080b7
90007ff4:	900080b7 	.word	0x900080b7
90007ff8:	900080b7 	.word	0x900080b7
90007ffc:	900080b7 	.word	0x900080b7
90008000:	900080b7 	.word	0x900080b7
90008004:	900080b7 	.word	0x900080b7
90008008:	90008083 	.word	0x90008083
9000800c:	900080b7 	.word	0x900080b7
90008010:	900080b7 	.word	0x900080b7
90008014:	900080b7 	.word	0x900080b7
90008018:	900080b7 	.word	0x900080b7
9000801c:	900080b7 	.word	0x900080b7
90008020:	900080b7 	.word	0x900080b7
90008024:	900080b7 	.word	0x900080b7
90008028:	900080b7 	.word	0x900080b7
9000802c:	900080b7 	.word	0x900080b7
90008030:	900080b7 	.word	0x900080b7
90008034:	900080b7 	.word	0x900080b7
90008038:	900080b7 	.word	0x900080b7
9000803c:	900080b7 	.word	0x900080b7
90008040:	900080b7 	.word	0x900080b7
90008044:	900080b7 	.word	0x900080b7
90008048:	900080a9 	.word	0x900080a9
9000804c:	2b40      	cmp	r3, #64	; 0x40
9000804e:	d02e      	beq.n	900080ae <UART_SetConfig+0x8aa>
90008050:	e031      	b.n	900080b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
90008052:	f7fd f817 	bl	90005084 <HAL_RCC_GetPCLK1Freq>
90008056:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90008058:	e033      	b.n	900080c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000805a:	f7fd f829 	bl	900050b0 <HAL_RCC_GetPCLK2Freq>
9000805e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90008060:	e02f      	b.n	900080c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90008062:	f107 0324 	add.w	r3, r7, #36	; 0x24
90008066:	4618      	mov	r0, r3
90008068:	f7fe fc66 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000806e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90008070:	e027      	b.n	900080c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90008072:	f107 0318 	add.w	r3, r7, #24
90008076:	4618      	mov	r0, r3
90008078:	f7fe fdb2 	bl	90006be0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000807c:	69fb      	ldr	r3, [r7, #28]
9000807e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90008080:	e01f      	b.n	900080c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008082:	4b2d      	ldr	r3, [pc, #180]	; (90008138 <UART_SetConfig+0x934>)
90008084:	681b      	ldr	r3, [r3, #0]
90008086:	f003 0320 	and.w	r3, r3, #32
9000808a:	2b00      	cmp	r3, #0
9000808c:	d009      	beq.n	900080a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000808e:	4b2a      	ldr	r3, [pc, #168]	; (90008138 <UART_SetConfig+0x934>)
90008090:	681b      	ldr	r3, [r3, #0]
90008092:	08db      	lsrs	r3, r3, #3
90008094:	f003 0303 	and.w	r3, r3, #3
90008098:	4a24      	ldr	r2, [pc, #144]	; (9000812c <UART_SetConfig+0x928>)
9000809a:	fa22 f303 	lsr.w	r3, r2, r3
9000809e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
900080a0:	e00f      	b.n	900080c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
900080a2:	4b22      	ldr	r3, [pc, #136]	; (9000812c <UART_SetConfig+0x928>)
900080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
900080a6:	e00c      	b.n	900080c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
900080a8:	4b21      	ldr	r3, [pc, #132]	; (90008130 <UART_SetConfig+0x92c>)
900080aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
900080ac:	e009      	b.n	900080c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
900080ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
900080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
900080b4:	e005      	b.n	900080c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
900080b6:	2300      	movs	r3, #0
900080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
900080ba:	2301      	movs	r3, #1
900080bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
900080c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
900080c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900080c4:	2b00      	cmp	r3, #0
900080c6:	f000 80e7 	beq.w	90008298 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
900080ca:	697b      	ldr	r3, [r7, #20]
900080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900080ce:	4a19      	ldr	r2, [pc, #100]	; (90008134 <UART_SetConfig+0x930>)
900080d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
900080d4:	461a      	mov	r2, r3
900080d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900080d8:	fbb3 f3f2 	udiv	r3, r3, r2
900080dc:	005a      	lsls	r2, r3, #1
900080de:	697b      	ldr	r3, [r7, #20]
900080e0:	685b      	ldr	r3, [r3, #4]
900080e2:	085b      	lsrs	r3, r3, #1
900080e4:	441a      	add	r2, r3
900080e6:	697b      	ldr	r3, [r7, #20]
900080e8:	685b      	ldr	r3, [r3, #4]
900080ea:	fbb2 f3f3 	udiv	r3, r2, r3
900080ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
900080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900080f2:	2b0f      	cmp	r3, #15
900080f4:	d916      	bls.n	90008124 <UART_SetConfig+0x920>
900080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900080f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900080fc:	d212      	bcs.n	90008124 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
900080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90008100:	b29b      	uxth	r3, r3
90008102:	f023 030f 	bic.w	r3, r3, #15
90008106:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
90008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000810a:	085b      	lsrs	r3, r3, #1
9000810c:	b29b      	uxth	r3, r3
9000810e:	f003 0307 	and.w	r3, r3, #7
90008112:	b29a      	uxth	r2, r3
90008114:	8efb      	ldrh	r3, [r7, #54]	; 0x36
90008116:	4313      	orrs	r3, r2
90008118:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
9000811a:	697b      	ldr	r3, [r7, #20]
9000811c:	681b      	ldr	r3, [r3, #0]
9000811e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
90008120:	60da      	str	r2, [r3, #12]
90008122:	e0b9      	b.n	90008298 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
90008124:	2301      	movs	r3, #1
90008126:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
9000812a:	e0b5      	b.n	90008298 <UART_SetConfig+0xa94>
9000812c:	03d09000 	.word	0x03d09000
90008130:	003d0900 	.word	0x003d0900
90008134:	90041ae0 	.word	0x90041ae0
90008138:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000813c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
90008140:	2b20      	cmp	r3, #32
90008142:	dc49      	bgt.n	900081d8 <UART_SetConfig+0x9d4>
90008144:	2b00      	cmp	r3, #0
90008146:	db7c      	blt.n	90008242 <UART_SetConfig+0xa3e>
90008148:	2b20      	cmp	r3, #32
9000814a:	d87a      	bhi.n	90008242 <UART_SetConfig+0xa3e>
9000814c:	a201      	add	r2, pc, #4	; (adr r2, 90008154 <UART_SetConfig+0x950>)
9000814e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008152:	bf00      	nop
90008154:	900081df 	.word	0x900081df
90008158:	900081e7 	.word	0x900081e7
9000815c:	90008243 	.word	0x90008243
90008160:	90008243 	.word	0x90008243
90008164:	900081ef 	.word	0x900081ef
90008168:	90008243 	.word	0x90008243
9000816c:	90008243 	.word	0x90008243
90008170:	90008243 	.word	0x90008243
90008174:	900081ff 	.word	0x900081ff
90008178:	90008243 	.word	0x90008243
9000817c:	90008243 	.word	0x90008243
90008180:	90008243 	.word	0x90008243
90008184:	90008243 	.word	0x90008243
90008188:	90008243 	.word	0x90008243
9000818c:	90008243 	.word	0x90008243
90008190:	90008243 	.word	0x90008243
90008194:	9000820f 	.word	0x9000820f
90008198:	90008243 	.word	0x90008243
9000819c:	90008243 	.word	0x90008243
900081a0:	90008243 	.word	0x90008243
900081a4:	90008243 	.word	0x90008243
900081a8:	90008243 	.word	0x90008243
900081ac:	90008243 	.word	0x90008243
900081b0:	90008243 	.word	0x90008243
900081b4:	90008243 	.word	0x90008243
900081b8:	90008243 	.word	0x90008243
900081bc:	90008243 	.word	0x90008243
900081c0:	90008243 	.word	0x90008243
900081c4:	90008243 	.word	0x90008243
900081c8:	90008243 	.word	0x90008243
900081cc:	90008243 	.word	0x90008243
900081d0:	90008243 	.word	0x90008243
900081d4:	90008235 	.word	0x90008235
900081d8:	2b40      	cmp	r3, #64	; 0x40
900081da:	d02e      	beq.n	9000823a <UART_SetConfig+0xa36>
900081dc:	e031      	b.n	90008242 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
900081de:	f7fc ff51 	bl	90005084 <HAL_RCC_GetPCLK1Freq>
900081e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
900081e4:	e033      	b.n	9000824e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
900081e6:	f7fc ff63 	bl	900050b0 <HAL_RCC_GetPCLK2Freq>
900081ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
900081ec:	e02f      	b.n	9000824e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
900081ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
900081f2:	4618      	mov	r0, r3
900081f4:	f7fe fba0 	bl	90006938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
900081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900081fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
900081fc:	e027      	b.n	9000824e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
900081fe:	f107 0318 	add.w	r3, r7, #24
90008202:	4618      	mov	r0, r3
90008204:	f7fe fcec 	bl	90006be0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90008208:	69fb      	ldr	r3, [r7, #28]
9000820a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000820c:	e01f      	b.n	9000824e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000820e:	4b2d      	ldr	r3, [pc, #180]	; (900082c4 <UART_SetConfig+0xac0>)
90008210:	681b      	ldr	r3, [r3, #0]
90008212:	f003 0320 	and.w	r3, r3, #32
90008216:	2b00      	cmp	r3, #0
90008218:	d009      	beq.n	9000822e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000821a:	4b2a      	ldr	r3, [pc, #168]	; (900082c4 <UART_SetConfig+0xac0>)
9000821c:	681b      	ldr	r3, [r3, #0]
9000821e:	08db      	lsrs	r3, r3, #3
90008220:	f003 0303 	and.w	r3, r3, #3
90008224:	4a28      	ldr	r2, [pc, #160]	; (900082c8 <UART_SetConfig+0xac4>)
90008226:	fa22 f303 	lsr.w	r3, r2, r3
9000822a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000822c:	e00f      	b.n	9000824e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000822e:	4b26      	ldr	r3, [pc, #152]	; (900082c8 <UART_SetConfig+0xac4>)
90008230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90008232:	e00c      	b.n	9000824e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90008234:	4b25      	ldr	r3, [pc, #148]	; (900082cc <UART_SetConfig+0xac8>)
90008236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90008238:	e009      	b.n	9000824e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000823a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9000823e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90008240:	e005      	b.n	9000824e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
90008242:	2300      	movs	r3, #0
90008244:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
90008246:	2301      	movs	r3, #1
90008248:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
9000824c:	bf00      	nop
    }

    if (pclk != 0U)
9000824e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90008250:	2b00      	cmp	r3, #0
90008252:	d021      	beq.n	90008298 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90008254:	697b      	ldr	r3, [r7, #20]
90008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90008258:	4a1d      	ldr	r2, [pc, #116]	; (900082d0 <UART_SetConfig+0xacc>)
9000825a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000825e:	461a      	mov	r2, r3
90008260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90008262:	fbb3 f2f2 	udiv	r2, r3, r2
90008266:	697b      	ldr	r3, [r7, #20]
90008268:	685b      	ldr	r3, [r3, #4]
9000826a:	085b      	lsrs	r3, r3, #1
9000826c:	441a      	add	r2, r3
9000826e:	697b      	ldr	r3, [r7, #20]
90008270:	685b      	ldr	r3, [r3, #4]
90008272:	fbb2 f3f3 	udiv	r3, r2, r3
90008276:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90008278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000827a:	2b0f      	cmp	r3, #15
9000827c:	d909      	bls.n	90008292 <UART_SetConfig+0xa8e>
9000827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90008280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90008284:	d205      	bcs.n	90008292 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
90008286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90008288:	b29a      	uxth	r2, r3
9000828a:	697b      	ldr	r3, [r7, #20]
9000828c:	681b      	ldr	r3, [r3, #0]
9000828e:	60da      	str	r2, [r3, #12]
90008290:	e002      	b.n	90008298 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
90008292:	2301      	movs	r3, #1
90008294:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
90008298:	697b      	ldr	r3, [r7, #20]
9000829a:	2201      	movs	r2, #1
9000829c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
900082a0:	697b      	ldr	r3, [r7, #20]
900082a2:	2201      	movs	r2, #1
900082a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
900082a8:	697b      	ldr	r3, [r7, #20]
900082aa:	2200      	movs	r2, #0
900082ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
900082ae:	697b      	ldr	r3, [r7, #20]
900082b0:	2200      	movs	r2, #0
900082b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
900082b4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
900082b8:	4618      	mov	r0, r3
900082ba:	3748      	adds	r7, #72	; 0x48
900082bc:	46bd      	mov	sp, r7
900082be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
900082c2:	bf00      	nop
900082c4:	58024400 	.word	0x58024400
900082c8:	03d09000 	.word	0x03d09000
900082cc:	003d0900 	.word	0x003d0900
900082d0:	90041ae0 	.word	0x90041ae0

900082d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
900082d4:	b480      	push	{r7}
900082d6:	b083      	sub	sp, #12
900082d8:	af00      	add	r7, sp, #0
900082da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
900082dc:	687b      	ldr	r3, [r7, #4]
900082de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900082e0:	f003 0301 	and.w	r3, r3, #1
900082e4:	2b00      	cmp	r3, #0
900082e6:	d00a      	beq.n	900082fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
900082e8:	687b      	ldr	r3, [r7, #4]
900082ea:	681b      	ldr	r3, [r3, #0]
900082ec:	685b      	ldr	r3, [r3, #4]
900082ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
900082f2:	687b      	ldr	r3, [r7, #4]
900082f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900082f6:	687b      	ldr	r3, [r7, #4]
900082f8:	681b      	ldr	r3, [r3, #0]
900082fa:	430a      	orrs	r2, r1
900082fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
900082fe:	687b      	ldr	r3, [r7, #4]
90008300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008302:	f003 0302 	and.w	r3, r3, #2
90008306:	2b00      	cmp	r3, #0
90008308:	d00a      	beq.n	90008320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000830a:	687b      	ldr	r3, [r7, #4]
9000830c:	681b      	ldr	r3, [r3, #0]
9000830e:	685b      	ldr	r3, [r3, #4]
90008310:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
90008314:	687b      	ldr	r3, [r7, #4]
90008316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008318:	687b      	ldr	r3, [r7, #4]
9000831a:	681b      	ldr	r3, [r3, #0]
9000831c:	430a      	orrs	r2, r1
9000831e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
90008320:	687b      	ldr	r3, [r7, #4]
90008322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008324:	f003 0304 	and.w	r3, r3, #4
90008328:	2b00      	cmp	r3, #0
9000832a:	d00a      	beq.n	90008342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000832c:	687b      	ldr	r3, [r7, #4]
9000832e:	681b      	ldr	r3, [r3, #0]
90008330:	685b      	ldr	r3, [r3, #4]
90008332:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
90008336:	687b      	ldr	r3, [r7, #4]
90008338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000833a:	687b      	ldr	r3, [r7, #4]
9000833c:	681b      	ldr	r3, [r3, #0]
9000833e:	430a      	orrs	r2, r1
90008340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
90008342:	687b      	ldr	r3, [r7, #4]
90008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008346:	f003 0308 	and.w	r3, r3, #8
9000834a:	2b00      	cmp	r3, #0
9000834c:	d00a      	beq.n	90008364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000834e:	687b      	ldr	r3, [r7, #4]
90008350:	681b      	ldr	r3, [r3, #0]
90008352:	685b      	ldr	r3, [r3, #4]
90008354:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
90008358:	687b      	ldr	r3, [r7, #4]
9000835a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000835c:	687b      	ldr	r3, [r7, #4]
9000835e:	681b      	ldr	r3, [r3, #0]
90008360:	430a      	orrs	r2, r1
90008362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
90008364:	687b      	ldr	r3, [r7, #4]
90008366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008368:	f003 0310 	and.w	r3, r3, #16
9000836c:	2b00      	cmp	r3, #0
9000836e:	d00a      	beq.n	90008386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
90008370:	687b      	ldr	r3, [r7, #4]
90008372:	681b      	ldr	r3, [r3, #0]
90008374:	689b      	ldr	r3, [r3, #8]
90008376:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
9000837a:	687b      	ldr	r3, [r7, #4]
9000837c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000837e:	687b      	ldr	r3, [r7, #4]
90008380:	681b      	ldr	r3, [r3, #0]
90008382:	430a      	orrs	r2, r1
90008384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
90008386:	687b      	ldr	r3, [r7, #4]
90008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000838a:	f003 0320 	and.w	r3, r3, #32
9000838e:	2b00      	cmp	r3, #0
90008390:	d00a      	beq.n	900083a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
90008392:	687b      	ldr	r3, [r7, #4]
90008394:	681b      	ldr	r3, [r3, #0]
90008396:	689b      	ldr	r3, [r3, #8]
90008398:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
9000839c:	687b      	ldr	r3, [r7, #4]
9000839e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900083a0:	687b      	ldr	r3, [r7, #4]
900083a2:	681b      	ldr	r3, [r3, #0]
900083a4:	430a      	orrs	r2, r1
900083a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
900083a8:	687b      	ldr	r3, [r7, #4]
900083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900083ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
900083b0:	2b00      	cmp	r3, #0
900083b2:	d01a      	beq.n	900083ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
900083b4:	687b      	ldr	r3, [r7, #4]
900083b6:	681b      	ldr	r3, [r3, #0]
900083b8:	685b      	ldr	r3, [r3, #4]
900083ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
900083be:	687b      	ldr	r3, [r7, #4]
900083c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
900083c2:	687b      	ldr	r3, [r7, #4]
900083c4:	681b      	ldr	r3, [r3, #0]
900083c6:	430a      	orrs	r2, r1
900083c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
900083ca:	687b      	ldr	r3, [r7, #4]
900083cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900083ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900083d2:	d10a      	bne.n	900083ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
900083d4:	687b      	ldr	r3, [r7, #4]
900083d6:	681b      	ldr	r3, [r3, #0]
900083d8:	685b      	ldr	r3, [r3, #4]
900083da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
900083de:	687b      	ldr	r3, [r7, #4]
900083e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
900083e2:	687b      	ldr	r3, [r7, #4]
900083e4:	681b      	ldr	r3, [r3, #0]
900083e6:	430a      	orrs	r2, r1
900083e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
900083ea:	687b      	ldr	r3, [r7, #4]
900083ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900083ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
900083f2:	2b00      	cmp	r3, #0
900083f4:	d00a      	beq.n	9000840c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
900083f6:	687b      	ldr	r3, [r7, #4]
900083f8:	681b      	ldr	r3, [r3, #0]
900083fa:	685b      	ldr	r3, [r3, #4]
900083fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
90008400:	687b      	ldr	r3, [r7, #4]
90008402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
90008404:	687b      	ldr	r3, [r7, #4]
90008406:	681b      	ldr	r3, [r3, #0]
90008408:	430a      	orrs	r2, r1
9000840a:	605a      	str	r2, [r3, #4]
  }
}
9000840c:	bf00      	nop
9000840e:	370c      	adds	r7, #12
90008410:	46bd      	mov	sp, r7
90008412:	f85d 7b04 	ldr.w	r7, [sp], #4
90008416:	4770      	bx	lr

90008418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
90008418:	b580      	push	{r7, lr}
9000841a:	b086      	sub	sp, #24
9000841c:	af02      	add	r7, sp, #8
9000841e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
90008420:	687b      	ldr	r3, [r7, #4]
90008422:	2200      	movs	r2, #0
90008424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
90008428:	f7f9 fdc2 	bl	90001fb0 <HAL_GetTick>
9000842c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000842e:	687b      	ldr	r3, [r7, #4]
90008430:	681b      	ldr	r3, [r3, #0]
90008432:	681b      	ldr	r3, [r3, #0]
90008434:	f003 0308 	and.w	r3, r3, #8
90008438:	2b08      	cmp	r3, #8
9000843a:	d10e      	bne.n	9000845a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000843c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
90008440:	9300      	str	r3, [sp, #0]
90008442:	68fb      	ldr	r3, [r7, #12]
90008444:	2200      	movs	r2, #0
90008446:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
9000844a:	6878      	ldr	r0, [r7, #4]
9000844c:	f000 f82f 	bl	900084ae <UART_WaitOnFlagUntilTimeout>
90008450:	4603      	mov	r3, r0
90008452:	2b00      	cmp	r3, #0
90008454:	d001      	beq.n	9000845a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
90008456:	2303      	movs	r3, #3
90008458:	e025      	b.n	900084a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000845a:	687b      	ldr	r3, [r7, #4]
9000845c:	681b      	ldr	r3, [r3, #0]
9000845e:	681b      	ldr	r3, [r3, #0]
90008460:	f003 0304 	and.w	r3, r3, #4
90008464:	2b04      	cmp	r3, #4
90008466:	d10e      	bne.n	90008486 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
90008468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
9000846c:	9300      	str	r3, [sp, #0]
9000846e:	68fb      	ldr	r3, [r7, #12]
90008470:	2200      	movs	r2, #0
90008472:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
90008476:	6878      	ldr	r0, [r7, #4]
90008478:	f000 f819 	bl	900084ae <UART_WaitOnFlagUntilTimeout>
9000847c:	4603      	mov	r3, r0
9000847e:	2b00      	cmp	r3, #0
90008480:	d001      	beq.n	90008486 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
90008482:	2303      	movs	r3, #3
90008484:	e00f      	b.n	900084a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
90008486:	687b      	ldr	r3, [r7, #4]
90008488:	2220      	movs	r2, #32
9000848a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
9000848e:	687b      	ldr	r3, [r7, #4]
90008490:	2220      	movs	r2, #32
90008492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
90008496:	687b      	ldr	r3, [r7, #4]
90008498:	2200      	movs	r2, #0
9000849a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
9000849c:	687b      	ldr	r3, [r7, #4]
9000849e:	2200      	movs	r2, #0
900084a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
900084a4:	2300      	movs	r3, #0
}
900084a6:	4618      	mov	r0, r3
900084a8:	3710      	adds	r7, #16
900084aa:	46bd      	mov	sp, r7
900084ac:	bd80      	pop	{r7, pc}

900084ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
900084ae:	b580      	push	{r7, lr}
900084b0:	b09c      	sub	sp, #112	; 0x70
900084b2:	af00      	add	r7, sp, #0
900084b4:	60f8      	str	r0, [r7, #12]
900084b6:	60b9      	str	r1, [r7, #8]
900084b8:	603b      	str	r3, [r7, #0]
900084ba:	4613      	mov	r3, r2
900084bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
900084be:	e0a9      	b.n	90008614 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
900084c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
900084c2:	f1b3 3fff 	cmp.w	r3, #4294967295
900084c6:	f000 80a5 	beq.w	90008614 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900084ca:	f7f9 fd71 	bl	90001fb0 <HAL_GetTick>
900084ce:	4602      	mov	r2, r0
900084d0:	683b      	ldr	r3, [r7, #0]
900084d2:	1ad3      	subs	r3, r2, r3
900084d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
900084d6:	429a      	cmp	r2, r3
900084d8:	d302      	bcc.n	900084e0 <UART_WaitOnFlagUntilTimeout+0x32>
900084da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
900084dc:	2b00      	cmp	r3, #0
900084de:	d140      	bne.n	90008562 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
900084e0:	68fb      	ldr	r3, [r7, #12]
900084e2:	681b      	ldr	r3, [r3, #0]
900084e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900084e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900084e8:	e853 3f00 	ldrex	r3, [r3]
900084ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
900084ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
900084f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
900084f4:	667b      	str	r3, [r7, #100]	; 0x64
900084f6:	68fb      	ldr	r3, [r7, #12]
900084f8:	681b      	ldr	r3, [r3, #0]
900084fa:	461a      	mov	r2, r3
900084fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
900084fe:	65fb      	str	r3, [r7, #92]	; 0x5c
90008500:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90008502:	6db9      	ldr	r1, [r7, #88]	; 0x58
90008504:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
90008506:	e841 2300 	strex	r3, r2, [r1]
9000850a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
9000850c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000850e:	2b00      	cmp	r3, #0
90008510:	d1e6      	bne.n	900084e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90008512:	68fb      	ldr	r3, [r7, #12]
90008514:	681b      	ldr	r3, [r3, #0]
90008516:	3308      	adds	r3, #8
90008518:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000851a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000851c:	e853 3f00 	ldrex	r3, [r3]
90008520:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
90008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90008524:	f023 0301 	bic.w	r3, r3, #1
90008528:	663b      	str	r3, [r7, #96]	; 0x60
9000852a:	68fb      	ldr	r3, [r7, #12]
9000852c:	681b      	ldr	r3, [r3, #0]
9000852e:	3308      	adds	r3, #8
90008530:	6e3a      	ldr	r2, [r7, #96]	; 0x60
90008532:	64ba      	str	r2, [r7, #72]	; 0x48
90008534:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90008536:	6c79      	ldr	r1, [r7, #68]	; 0x44
90008538:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000853a:	e841 2300 	strex	r3, r2, [r1]
9000853e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
90008540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90008542:	2b00      	cmp	r3, #0
90008544:	d1e5      	bne.n	90008512 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
90008546:	68fb      	ldr	r3, [r7, #12]
90008548:	2220      	movs	r2, #32
9000854a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
9000854e:	68fb      	ldr	r3, [r7, #12]
90008550:	2220      	movs	r2, #32
90008552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
90008556:	68fb      	ldr	r3, [r7, #12]
90008558:	2200      	movs	r2, #0
9000855a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
9000855e:	2303      	movs	r3, #3
90008560:	e069      	b.n	90008636 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
90008562:	68fb      	ldr	r3, [r7, #12]
90008564:	681b      	ldr	r3, [r3, #0]
90008566:	681b      	ldr	r3, [r3, #0]
90008568:	f003 0304 	and.w	r3, r3, #4
9000856c:	2b00      	cmp	r3, #0
9000856e:	d051      	beq.n	90008614 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
90008570:	68fb      	ldr	r3, [r7, #12]
90008572:	681b      	ldr	r3, [r3, #0]
90008574:	69db      	ldr	r3, [r3, #28]
90008576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000857a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
9000857e:	d149      	bne.n	90008614 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
90008580:	68fb      	ldr	r3, [r7, #12]
90008582:	681b      	ldr	r3, [r3, #0]
90008584:	f44f 6200 	mov.w	r2, #2048	; 0x800
90008588:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
9000858a:	68fb      	ldr	r3, [r7, #12]
9000858c:	681b      	ldr	r3, [r3, #0]
9000858e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
90008592:	e853 3f00 	ldrex	r3, [r3]
90008596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
90008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000859a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
9000859e:	66fb      	str	r3, [r7, #108]	; 0x6c
900085a0:	68fb      	ldr	r3, [r7, #12]
900085a2:	681b      	ldr	r3, [r3, #0]
900085a4:	461a      	mov	r2, r3
900085a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
900085a8:	637b      	str	r3, [r7, #52]	; 0x34
900085aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900085ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
900085ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
900085b0:	e841 2300 	strex	r3, r2, [r1]
900085b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
900085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900085b8:	2b00      	cmp	r3, #0
900085ba:	d1e6      	bne.n	9000858a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
900085bc:	68fb      	ldr	r3, [r7, #12]
900085be:	681b      	ldr	r3, [r3, #0]
900085c0:	3308      	adds	r3, #8
900085c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900085c4:	697b      	ldr	r3, [r7, #20]
900085c6:	e853 3f00 	ldrex	r3, [r3]
900085ca:	613b      	str	r3, [r7, #16]
   return(result);
900085cc:	693b      	ldr	r3, [r7, #16]
900085ce:	f023 0301 	bic.w	r3, r3, #1
900085d2:	66bb      	str	r3, [r7, #104]	; 0x68
900085d4:	68fb      	ldr	r3, [r7, #12]
900085d6:	681b      	ldr	r3, [r3, #0]
900085d8:	3308      	adds	r3, #8
900085da:	6eba      	ldr	r2, [r7, #104]	; 0x68
900085dc:	623a      	str	r2, [r7, #32]
900085de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900085e0:	69f9      	ldr	r1, [r7, #28]
900085e2:	6a3a      	ldr	r2, [r7, #32]
900085e4:	e841 2300 	strex	r3, r2, [r1]
900085e8:	61bb      	str	r3, [r7, #24]
   return(result);
900085ea:	69bb      	ldr	r3, [r7, #24]
900085ec:	2b00      	cmp	r3, #0
900085ee:	d1e5      	bne.n	900085bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
900085f0:	68fb      	ldr	r3, [r7, #12]
900085f2:	2220      	movs	r2, #32
900085f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
900085f8:	68fb      	ldr	r3, [r7, #12]
900085fa:	2220      	movs	r2, #32
900085fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
90008600:	68fb      	ldr	r3, [r7, #12]
90008602:	2220      	movs	r2, #32
90008604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
90008608:	68fb      	ldr	r3, [r7, #12]
9000860a:	2200      	movs	r2, #0
9000860c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
90008610:	2303      	movs	r3, #3
90008612:	e010      	b.n	90008636 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90008614:	68fb      	ldr	r3, [r7, #12]
90008616:	681b      	ldr	r3, [r3, #0]
90008618:	69da      	ldr	r2, [r3, #28]
9000861a:	68bb      	ldr	r3, [r7, #8]
9000861c:	4013      	ands	r3, r2
9000861e:	68ba      	ldr	r2, [r7, #8]
90008620:	429a      	cmp	r2, r3
90008622:	bf0c      	ite	eq
90008624:	2301      	moveq	r3, #1
90008626:	2300      	movne	r3, #0
90008628:	b2db      	uxtb	r3, r3
9000862a:	461a      	mov	r2, r3
9000862c:	79fb      	ldrb	r3, [r7, #7]
9000862e:	429a      	cmp	r2, r3
90008630:	f43f af46 	beq.w	900084c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90008634:	2300      	movs	r3, #0
}
90008636:	4618      	mov	r0, r3
90008638:	3770      	adds	r7, #112	; 0x70
9000863a:	46bd      	mov	sp, r7
9000863c:	bd80      	pop	{r7, pc}

9000863e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000863e:	b480      	push	{r7}
90008640:	b085      	sub	sp, #20
90008642:	af00      	add	r7, sp, #0
90008644:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
90008646:	687b      	ldr	r3, [r7, #4]
90008648:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
9000864c:	2b01      	cmp	r3, #1
9000864e:	d101      	bne.n	90008654 <HAL_UARTEx_DisableFifoMode+0x16>
90008650:	2302      	movs	r3, #2
90008652:	e027      	b.n	900086a4 <HAL_UARTEx_DisableFifoMode+0x66>
90008654:	687b      	ldr	r3, [r7, #4]
90008656:	2201      	movs	r2, #1
90008658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
9000865c:	687b      	ldr	r3, [r7, #4]
9000865e:	2224      	movs	r2, #36	; 0x24
90008660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90008664:	687b      	ldr	r3, [r7, #4]
90008666:	681b      	ldr	r3, [r3, #0]
90008668:	681b      	ldr	r3, [r3, #0]
9000866a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000866c:	687b      	ldr	r3, [r7, #4]
9000866e:	681b      	ldr	r3, [r3, #0]
90008670:	681a      	ldr	r2, [r3, #0]
90008672:	687b      	ldr	r3, [r7, #4]
90008674:	681b      	ldr	r3, [r3, #0]
90008676:	f022 0201 	bic.w	r2, r2, #1
9000867a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000867c:	68fb      	ldr	r3, [r7, #12]
9000867e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
90008682:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
90008684:	687b      	ldr	r3, [r7, #4]
90008686:	2200      	movs	r2, #0
90008688:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000868a:	687b      	ldr	r3, [r7, #4]
9000868c:	681b      	ldr	r3, [r3, #0]
9000868e:	68fa      	ldr	r2, [r7, #12]
90008690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
90008692:	687b      	ldr	r3, [r7, #4]
90008694:	2220      	movs	r2, #32
90008696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000869a:	687b      	ldr	r3, [r7, #4]
9000869c:	2200      	movs	r2, #0
9000869e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
900086a2:	2300      	movs	r3, #0
}
900086a4:	4618      	mov	r0, r3
900086a6:	3714      	adds	r7, #20
900086a8:	46bd      	mov	sp, r7
900086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900086ae:	4770      	bx	lr

900086b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
900086b0:	b580      	push	{r7, lr}
900086b2:	b084      	sub	sp, #16
900086b4:	af00      	add	r7, sp, #0
900086b6:	6078      	str	r0, [r7, #4]
900086b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
900086ba:	687b      	ldr	r3, [r7, #4]
900086bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
900086c0:	2b01      	cmp	r3, #1
900086c2:	d101      	bne.n	900086c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
900086c4:	2302      	movs	r3, #2
900086c6:	e02d      	b.n	90008724 <HAL_UARTEx_SetTxFifoThreshold+0x74>
900086c8:	687b      	ldr	r3, [r7, #4]
900086ca:	2201      	movs	r2, #1
900086cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
900086d0:	687b      	ldr	r3, [r7, #4]
900086d2:	2224      	movs	r2, #36	; 0x24
900086d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
900086d8:	687b      	ldr	r3, [r7, #4]
900086da:	681b      	ldr	r3, [r3, #0]
900086dc:	681b      	ldr	r3, [r3, #0]
900086de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
900086e0:	687b      	ldr	r3, [r7, #4]
900086e2:	681b      	ldr	r3, [r3, #0]
900086e4:	681a      	ldr	r2, [r3, #0]
900086e6:	687b      	ldr	r3, [r7, #4]
900086e8:	681b      	ldr	r3, [r3, #0]
900086ea:	f022 0201 	bic.w	r2, r2, #1
900086ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
900086f0:	687b      	ldr	r3, [r7, #4]
900086f2:	681b      	ldr	r3, [r3, #0]
900086f4:	689b      	ldr	r3, [r3, #8]
900086f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
900086fa:	687b      	ldr	r3, [r7, #4]
900086fc:	681b      	ldr	r3, [r3, #0]
900086fe:	683a      	ldr	r2, [r7, #0]
90008700:	430a      	orrs	r2, r1
90008702:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
90008704:	6878      	ldr	r0, [r7, #4]
90008706:	f000 f84f 	bl	900087a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000870a:	687b      	ldr	r3, [r7, #4]
9000870c:	681b      	ldr	r3, [r3, #0]
9000870e:	68fa      	ldr	r2, [r7, #12]
90008710:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
90008712:	687b      	ldr	r3, [r7, #4]
90008714:	2220      	movs	r2, #32
90008716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000871a:	687b      	ldr	r3, [r7, #4]
9000871c:	2200      	movs	r2, #0
9000871e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
90008722:	2300      	movs	r3, #0
}
90008724:	4618      	mov	r0, r3
90008726:	3710      	adds	r7, #16
90008728:	46bd      	mov	sp, r7
9000872a:	bd80      	pop	{r7, pc}

9000872c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000872c:	b580      	push	{r7, lr}
9000872e:	b084      	sub	sp, #16
90008730:	af00      	add	r7, sp, #0
90008732:	6078      	str	r0, [r7, #4]
90008734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
90008736:	687b      	ldr	r3, [r7, #4]
90008738:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
9000873c:	2b01      	cmp	r3, #1
9000873e:	d101      	bne.n	90008744 <HAL_UARTEx_SetRxFifoThreshold+0x18>
90008740:	2302      	movs	r3, #2
90008742:	e02d      	b.n	900087a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
90008744:	687b      	ldr	r3, [r7, #4]
90008746:	2201      	movs	r2, #1
90008748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
9000874c:	687b      	ldr	r3, [r7, #4]
9000874e:	2224      	movs	r2, #36	; 0x24
90008750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90008754:	687b      	ldr	r3, [r7, #4]
90008756:	681b      	ldr	r3, [r3, #0]
90008758:	681b      	ldr	r3, [r3, #0]
9000875a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000875c:	687b      	ldr	r3, [r7, #4]
9000875e:	681b      	ldr	r3, [r3, #0]
90008760:	681a      	ldr	r2, [r3, #0]
90008762:	687b      	ldr	r3, [r7, #4]
90008764:	681b      	ldr	r3, [r3, #0]
90008766:	f022 0201 	bic.w	r2, r2, #1
9000876a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000876c:	687b      	ldr	r3, [r7, #4]
9000876e:	681b      	ldr	r3, [r3, #0]
90008770:	689b      	ldr	r3, [r3, #8]
90008772:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
90008776:	687b      	ldr	r3, [r7, #4]
90008778:	681b      	ldr	r3, [r3, #0]
9000877a:	683a      	ldr	r2, [r7, #0]
9000877c:	430a      	orrs	r2, r1
9000877e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
90008780:	6878      	ldr	r0, [r7, #4]
90008782:	f000 f811 	bl	900087a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
90008786:	687b      	ldr	r3, [r7, #4]
90008788:	681b      	ldr	r3, [r3, #0]
9000878a:	68fa      	ldr	r2, [r7, #12]
9000878c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000878e:	687b      	ldr	r3, [r7, #4]
90008790:	2220      	movs	r2, #32
90008792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
90008796:	687b      	ldr	r3, [r7, #4]
90008798:	2200      	movs	r2, #0
9000879a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
9000879e:	2300      	movs	r3, #0
}
900087a0:	4618      	mov	r0, r3
900087a2:	3710      	adds	r7, #16
900087a4:	46bd      	mov	sp, r7
900087a6:	bd80      	pop	{r7, pc}

900087a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
900087a8:	b480      	push	{r7}
900087aa:	b085      	sub	sp, #20
900087ac:	af00      	add	r7, sp, #0
900087ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
900087b0:	687b      	ldr	r3, [r7, #4]
900087b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900087b4:	2b00      	cmp	r3, #0
900087b6:	d108      	bne.n	900087ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
900087b8:	687b      	ldr	r3, [r7, #4]
900087ba:	2201      	movs	r2, #1
900087bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
900087c0:	687b      	ldr	r3, [r7, #4]
900087c2:	2201      	movs	r2, #1
900087c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
900087c8:	e031      	b.n	9000882e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
900087ca:	2310      	movs	r3, #16
900087cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
900087ce:	2310      	movs	r3, #16
900087d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
900087d2:	687b      	ldr	r3, [r7, #4]
900087d4:	681b      	ldr	r3, [r3, #0]
900087d6:	689b      	ldr	r3, [r3, #8]
900087d8:	0e5b      	lsrs	r3, r3, #25
900087da:	b2db      	uxtb	r3, r3
900087dc:	f003 0307 	and.w	r3, r3, #7
900087e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
900087e2:	687b      	ldr	r3, [r7, #4]
900087e4:	681b      	ldr	r3, [r3, #0]
900087e6:	689b      	ldr	r3, [r3, #8]
900087e8:	0f5b      	lsrs	r3, r3, #29
900087ea:	b2db      	uxtb	r3, r3
900087ec:	f003 0307 	and.w	r3, r3, #7
900087f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
900087f2:	7bbb      	ldrb	r3, [r7, #14]
900087f4:	7b3a      	ldrb	r2, [r7, #12]
900087f6:	4911      	ldr	r1, [pc, #68]	; (9000883c <UARTEx_SetNbDataToProcess+0x94>)
900087f8:	5c8a      	ldrb	r2, [r1, r2]
900087fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
900087fe:	7b3a      	ldrb	r2, [r7, #12]
90008800:	490f      	ldr	r1, [pc, #60]	; (90008840 <UARTEx_SetNbDataToProcess+0x98>)
90008802:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
90008804:	fb93 f3f2 	sdiv	r3, r3, r2
90008808:	b29a      	uxth	r2, r3
9000880a:	687b      	ldr	r3, [r7, #4]
9000880c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
90008810:	7bfb      	ldrb	r3, [r7, #15]
90008812:	7b7a      	ldrb	r2, [r7, #13]
90008814:	4909      	ldr	r1, [pc, #36]	; (9000883c <UARTEx_SetNbDataToProcess+0x94>)
90008816:	5c8a      	ldrb	r2, [r1, r2]
90008818:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000881c:	7b7a      	ldrb	r2, [r7, #13]
9000881e:	4908      	ldr	r1, [pc, #32]	; (90008840 <UARTEx_SetNbDataToProcess+0x98>)
90008820:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
90008822:	fb93 f3f2 	sdiv	r3, r3, r2
90008826:	b29a      	uxth	r2, r3
90008828:	687b      	ldr	r3, [r7, #4]
9000882a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
9000882e:	bf00      	nop
90008830:	3714      	adds	r7, #20
90008832:	46bd      	mov	sp, r7
90008834:	f85d 7b04 	ldr.w	r7, [sp], #4
90008838:	4770      	bx	lr
9000883a:	bf00      	nop
9000883c:	90041af8 	.word	0x90041af8
90008840:	90041b00 	.word	0x90041b00

90008844 <__errno>:
90008844:	4b01      	ldr	r3, [pc, #4]	; (9000884c <__errno+0x8>)
90008846:	6818      	ldr	r0, [r3, #0]
90008848:	4770      	bx	lr
9000884a:	bf00      	nop
9000884c:	20000020 	.word	0x20000020

90008850 <__libc_init_array>:
90008850:	b570      	push	{r4, r5, r6, lr}
90008852:	4d0d      	ldr	r5, [pc, #52]	; (90008888 <__libc_init_array+0x38>)
90008854:	4c0d      	ldr	r4, [pc, #52]	; (9000888c <__libc_init_array+0x3c>)
90008856:	1b64      	subs	r4, r4, r5
90008858:	10a4      	asrs	r4, r4, #2
9000885a:	2600      	movs	r6, #0
9000885c:	42a6      	cmp	r6, r4
9000885e:	d109      	bne.n	90008874 <__libc_init_array+0x24>
90008860:	4d0b      	ldr	r5, [pc, #44]	; (90008890 <__libc_init_array+0x40>)
90008862:	4c0c      	ldr	r4, [pc, #48]	; (90008894 <__libc_init_array+0x44>)
90008864:	f000 fd1e 	bl	900092a4 <_init>
90008868:	1b64      	subs	r4, r4, r5
9000886a:	10a4      	asrs	r4, r4, #2
9000886c:	2600      	movs	r6, #0
9000886e:	42a6      	cmp	r6, r4
90008870:	d105      	bne.n	9000887e <__libc_init_array+0x2e>
90008872:	bd70      	pop	{r4, r5, r6, pc}
90008874:	f855 3b04 	ldr.w	r3, [r5], #4
90008878:	4798      	blx	r3
9000887a:	3601      	adds	r6, #1
9000887c:	e7ee      	b.n	9000885c <__libc_init_array+0xc>
9000887e:	f855 3b04 	ldr.w	r3, [r5], #4
90008882:	4798      	blx	r3
90008884:	3601      	adds	r6, #1
90008886:	e7f2      	b.n	9000886e <__libc_init_array+0x1e>
90008888:	90041b74 	.word	0x90041b74
9000888c:	90041b74 	.word	0x90041b74
90008890:	90041b74 	.word	0x90041b74
90008894:	90041b78 	.word	0x90041b78

90008898 <memset>:
90008898:	4402      	add	r2, r0
9000889a:	4603      	mov	r3, r0
9000889c:	4293      	cmp	r3, r2
9000889e:	d100      	bne.n	900088a2 <memset+0xa>
900088a0:	4770      	bx	lr
900088a2:	f803 1b01 	strb.w	r1, [r3], #1
900088a6:	e7f9      	b.n	9000889c <memset+0x4>

900088a8 <_puts_r>:
900088a8:	b570      	push	{r4, r5, r6, lr}
900088aa:	460e      	mov	r6, r1
900088ac:	4605      	mov	r5, r0
900088ae:	b118      	cbz	r0, 900088b8 <_puts_r+0x10>
900088b0:	6983      	ldr	r3, [r0, #24]
900088b2:	b90b      	cbnz	r3, 900088b8 <_puts_r+0x10>
900088b4:	f000 fa48 	bl	90008d48 <__sinit>
900088b8:	69ab      	ldr	r3, [r5, #24]
900088ba:	68ac      	ldr	r4, [r5, #8]
900088bc:	b913      	cbnz	r3, 900088c4 <_puts_r+0x1c>
900088be:	4628      	mov	r0, r5
900088c0:	f000 fa42 	bl	90008d48 <__sinit>
900088c4:	4b2c      	ldr	r3, [pc, #176]	; (90008978 <_puts_r+0xd0>)
900088c6:	429c      	cmp	r4, r3
900088c8:	d120      	bne.n	9000890c <_puts_r+0x64>
900088ca:	686c      	ldr	r4, [r5, #4]
900088cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
900088ce:	07db      	lsls	r3, r3, #31
900088d0:	d405      	bmi.n	900088de <_puts_r+0x36>
900088d2:	89a3      	ldrh	r3, [r4, #12]
900088d4:	0598      	lsls	r0, r3, #22
900088d6:	d402      	bmi.n	900088de <_puts_r+0x36>
900088d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
900088da:	f000 fad3 	bl	90008e84 <__retarget_lock_acquire_recursive>
900088de:	89a3      	ldrh	r3, [r4, #12]
900088e0:	0719      	lsls	r1, r3, #28
900088e2:	d51d      	bpl.n	90008920 <_puts_r+0x78>
900088e4:	6923      	ldr	r3, [r4, #16]
900088e6:	b1db      	cbz	r3, 90008920 <_puts_r+0x78>
900088e8:	3e01      	subs	r6, #1
900088ea:	68a3      	ldr	r3, [r4, #8]
900088ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
900088f0:	3b01      	subs	r3, #1
900088f2:	60a3      	str	r3, [r4, #8]
900088f4:	bb39      	cbnz	r1, 90008946 <_puts_r+0x9e>
900088f6:	2b00      	cmp	r3, #0
900088f8:	da38      	bge.n	9000896c <_puts_r+0xc4>
900088fa:	4622      	mov	r2, r4
900088fc:	210a      	movs	r1, #10
900088fe:	4628      	mov	r0, r5
90008900:	f000 f848 	bl	90008994 <__swbuf_r>
90008904:	3001      	adds	r0, #1
90008906:	d011      	beq.n	9000892c <_puts_r+0x84>
90008908:	250a      	movs	r5, #10
9000890a:	e011      	b.n	90008930 <_puts_r+0x88>
9000890c:	4b1b      	ldr	r3, [pc, #108]	; (9000897c <_puts_r+0xd4>)
9000890e:	429c      	cmp	r4, r3
90008910:	d101      	bne.n	90008916 <_puts_r+0x6e>
90008912:	68ac      	ldr	r4, [r5, #8]
90008914:	e7da      	b.n	900088cc <_puts_r+0x24>
90008916:	4b1a      	ldr	r3, [pc, #104]	; (90008980 <_puts_r+0xd8>)
90008918:	429c      	cmp	r4, r3
9000891a:	bf08      	it	eq
9000891c:	68ec      	ldreq	r4, [r5, #12]
9000891e:	e7d5      	b.n	900088cc <_puts_r+0x24>
90008920:	4621      	mov	r1, r4
90008922:	4628      	mov	r0, r5
90008924:	f000 f888 	bl	90008a38 <__swsetup_r>
90008928:	2800      	cmp	r0, #0
9000892a:	d0dd      	beq.n	900088e8 <_puts_r+0x40>
9000892c:	f04f 35ff 	mov.w	r5, #4294967295
90008930:	6e63      	ldr	r3, [r4, #100]	; 0x64
90008932:	07da      	lsls	r2, r3, #31
90008934:	d405      	bmi.n	90008942 <_puts_r+0x9a>
90008936:	89a3      	ldrh	r3, [r4, #12]
90008938:	059b      	lsls	r3, r3, #22
9000893a:	d402      	bmi.n	90008942 <_puts_r+0x9a>
9000893c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000893e:	f000 faa2 	bl	90008e86 <__retarget_lock_release_recursive>
90008942:	4628      	mov	r0, r5
90008944:	bd70      	pop	{r4, r5, r6, pc}
90008946:	2b00      	cmp	r3, #0
90008948:	da04      	bge.n	90008954 <_puts_r+0xac>
9000894a:	69a2      	ldr	r2, [r4, #24]
9000894c:	429a      	cmp	r2, r3
9000894e:	dc06      	bgt.n	9000895e <_puts_r+0xb6>
90008950:	290a      	cmp	r1, #10
90008952:	d004      	beq.n	9000895e <_puts_r+0xb6>
90008954:	6823      	ldr	r3, [r4, #0]
90008956:	1c5a      	adds	r2, r3, #1
90008958:	6022      	str	r2, [r4, #0]
9000895a:	7019      	strb	r1, [r3, #0]
9000895c:	e7c5      	b.n	900088ea <_puts_r+0x42>
9000895e:	4622      	mov	r2, r4
90008960:	4628      	mov	r0, r5
90008962:	f000 f817 	bl	90008994 <__swbuf_r>
90008966:	3001      	adds	r0, #1
90008968:	d1bf      	bne.n	900088ea <_puts_r+0x42>
9000896a:	e7df      	b.n	9000892c <_puts_r+0x84>
9000896c:	6823      	ldr	r3, [r4, #0]
9000896e:	250a      	movs	r5, #10
90008970:	1c5a      	adds	r2, r3, #1
90008972:	6022      	str	r2, [r4, #0]
90008974:	701d      	strb	r5, [r3, #0]
90008976:	e7db      	b.n	90008930 <_puts_r+0x88>
90008978:	90041b2c 	.word	0x90041b2c
9000897c:	90041b4c 	.word	0x90041b4c
90008980:	90041b0c 	.word	0x90041b0c

90008984 <puts>:
90008984:	4b02      	ldr	r3, [pc, #8]	; (90008990 <puts+0xc>)
90008986:	4601      	mov	r1, r0
90008988:	6818      	ldr	r0, [r3, #0]
9000898a:	f7ff bf8d 	b.w	900088a8 <_puts_r>
9000898e:	bf00      	nop
90008990:	20000020 	.word	0x20000020

90008994 <__swbuf_r>:
90008994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90008996:	460e      	mov	r6, r1
90008998:	4614      	mov	r4, r2
9000899a:	4605      	mov	r5, r0
9000899c:	b118      	cbz	r0, 900089a6 <__swbuf_r+0x12>
9000899e:	6983      	ldr	r3, [r0, #24]
900089a0:	b90b      	cbnz	r3, 900089a6 <__swbuf_r+0x12>
900089a2:	f000 f9d1 	bl	90008d48 <__sinit>
900089a6:	4b21      	ldr	r3, [pc, #132]	; (90008a2c <__swbuf_r+0x98>)
900089a8:	429c      	cmp	r4, r3
900089aa:	d12b      	bne.n	90008a04 <__swbuf_r+0x70>
900089ac:	686c      	ldr	r4, [r5, #4]
900089ae:	69a3      	ldr	r3, [r4, #24]
900089b0:	60a3      	str	r3, [r4, #8]
900089b2:	89a3      	ldrh	r3, [r4, #12]
900089b4:	071a      	lsls	r2, r3, #28
900089b6:	d52f      	bpl.n	90008a18 <__swbuf_r+0x84>
900089b8:	6923      	ldr	r3, [r4, #16]
900089ba:	b36b      	cbz	r3, 90008a18 <__swbuf_r+0x84>
900089bc:	6923      	ldr	r3, [r4, #16]
900089be:	6820      	ldr	r0, [r4, #0]
900089c0:	1ac0      	subs	r0, r0, r3
900089c2:	6963      	ldr	r3, [r4, #20]
900089c4:	b2f6      	uxtb	r6, r6
900089c6:	4283      	cmp	r3, r0
900089c8:	4637      	mov	r7, r6
900089ca:	dc04      	bgt.n	900089d6 <__swbuf_r+0x42>
900089cc:	4621      	mov	r1, r4
900089ce:	4628      	mov	r0, r5
900089d0:	f000 f926 	bl	90008c20 <_fflush_r>
900089d4:	bb30      	cbnz	r0, 90008a24 <__swbuf_r+0x90>
900089d6:	68a3      	ldr	r3, [r4, #8]
900089d8:	3b01      	subs	r3, #1
900089da:	60a3      	str	r3, [r4, #8]
900089dc:	6823      	ldr	r3, [r4, #0]
900089de:	1c5a      	adds	r2, r3, #1
900089e0:	6022      	str	r2, [r4, #0]
900089e2:	701e      	strb	r6, [r3, #0]
900089e4:	6963      	ldr	r3, [r4, #20]
900089e6:	3001      	adds	r0, #1
900089e8:	4283      	cmp	r3, r0
900089ea:	d004      	beq.n	900089f6 <__swbuf_r+0x62>
900089ec:	89a3      	ldrh	r3, [r4, #12]
900089ee:	07db      	lsls	r3, r3, #31
900089f0:	d506      	bpl.n	90008a00 <__swbuf_r+0x6c>
900089f2:	2e0a      	cmp	r6, #10
900089f4:	d104      	bne.n	90008a00 <__swbuf_r+0x6c>
900089f6:	4621      	mov	r1, r4
900089f8:	4628      	mov	r0, r5
900089fa:	f000 f911 	bl	90008c20 <_fflush_r>
900089fe:	b988      	cbnz	r0, 90008a24 <__swbuf_r+0x90>
90008a00:	4638      	mov	r0, r7
90008a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90008a04:	4b0a      	ldr	r3, [pc, #40]	; (90008a30 <__swbuf_r+0x9c>)
90008a06:	429c      	cmp	r4, r3
90008a08:	d101      	bne.n	90008a0e <__swbuf_r+0x7a>
90008a0a:	68ac      	ldr	r4, [r5, #8]
90008a0c:	e7cf      	b.n	900089ae <__swbuf_r+0x1a>
90008a0e:	4b09      	ldr	r3, [pc, #36]	; (90008a34 <__swbuf_r+0xa0>)
90008a10:	429c      	cmp	r4, r3
90008a12:	bf08      	it	eq
90008a14:	68ec      	ldreq	r4, [r5, #12]
90008a16:	e7ca      	b.n	900089ae <__swbuf_r+0x1a>
90008a18:	4621      	mov	r1, r4
90008a1a:	4628      	mov	r0, r5
90008a1c:	f000 f80c 	bl	90008a38 <__swsetup_r>
90008a20:	2800      	cmp	r0, #0
90008a22:	d0cb      	beq.n	900089bc <__swbuf_r+0x28>
90008a24:	f04f 37ff 	mov.w	r7, #4294967295
90008a28:	e7ea      	b.n	90008a00 <__swbuf_r+0x6c>
90008a2a:	bf00      	nop
90008a2c:	90041b2c 	.word	0x90041b2c
90008a30:	90041b4c 	.word	0x90041b4c
90008a34:	90041b0c 	.word	0x90041b0c

90008a38 <__swsetup_r>:
90008a38:	4b32      	ldr	r3, [pc, #200]	; (90008b04 <__swsetup_r+0xcc>)
90008a3a:	b570      	push	{r4, r5, r6, lr}
90008a3c:	681d      	ldr	r5, [r3, #0]
90008a3e:	4606      	mov	r6, r0
90008a40:	460c      	mov	r4, r1
90008a42:	b125      	cbz	r5, 90008a4e <__swsetup_r+0x16>
90008a44:	69ab      	ldr	r3, [r5, #24]
90008a46:	b913      	cbnz	r3, 90008a4e <__swsetup_r+0x16>
90008a48:	4628      	mov	r0, r5
90008a4a:	f000 f97d 	bl	90008d48 <__sinit>
90008a4e:	4b2e      	ldr	r3, [pc, #184]	; (90008b08 <__swsetup_r+0xd0>)
90008a50:	429c      	cmp	r4, r3
90008a52:	d10f      	bne.n	90008a74 <__swsetup_r+0x3c>
90008a54:	686c      	ldr	r4, [r5, #4]
90008a56:	89a3      	ldrh	r3, [r4, #12]
90008a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90008a5c:	0719      	lsls	r1, r3, #28
90008a5e:	d42c      	bmi.n	90008aba <__swsetup_r+0x82>
90008a60:	06dd      	lsls	r5, r3, #27
90008a62:	d411      	bmi.n	90008a88 <__swsetup_r+0x50>
90008a64:	2309      	movs	r3, #9
90008a66:	6033      	str	r3, [r6, #0]
90008a68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90008a6c:	81a3      	strh	r3, [r4, #12]
90008a6e:	f04f 30ff 	mov.w	r0, #4294967295
90008a72:	e03e      	b.n	90008af2 <__swsetup_r+0xba>
90008a74:	4b25      	ldr	r3, [pc, #148]	; (90008b0c <__swsetup_r+0xd4>)
90008a76:	429c      	cmp	r4, r3
90008a78:	d101      	bne.n	90008a7e <__swsetup_r+0x46>
90008a7a:	68ac      	ldr	r4, [r5, #8]
90008a7c:	e7eb      	b.n	90008a56 <__swsetup_r+0x1e>
90008a7e:	4b24      	ldr	r3, [pc, #144]	; (90008b10 <__swsetup_r+0xd8>)
90008a80:	429c      	cmp	r4, r3
90008a82:	bf08      	it	eq
90008a84:	68ec      	ldreq	r4, [r5, #12]
90008a86:	e7e6      	b.n	90008a56 <__swsetup_r+0x1e>
90008a88:	0758      	lsls	r0, r3, #29
90008a8a:	d512      	bpl.n	90008ab2 <__swsetup_r+0x7a>
90008a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
90008a8e:	b141      	cbz	r1, 90008aa2 <__swsetup_r+0x6a>
90008a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
90008a94:	4299      	cmp	r1, r3
90008a96:	d002      	beq.n	90008a9e <__swsetup_r+0x66>
90008a98:	4630      	mov	r0, r6
90008a9a:	f000 fa5b 	bl	90008f54 <_free_r>
90008a9e:	2300      	movs	r3, #0
90008aa0:	6363      	str	r3, [r4, #52]	; 0x34
90008aa2:	89a3      	ldrh	r3, [r4, #12]
90008aa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90008aa8:	81a3      	strh	r3, [r4, #12]
90008aaa:	2300      	movs	r3, #0
90008aac:	6063      	str	r3, [r4, #4]
90008aae:	6923      	ldr	r3, [r4, #16]
90008ab0:	6023      	str	r3, [r4, #0]
90008ab2:	89a3      	ldrh	r3, [r4, #12]
90008ab4:	f043 0308 	orr.w	r3, r3, #8
90008ab8:	81a3      	strh	r3, [r4, #12]
90008aba:	6923      	ldr	r3, [r4, #16]
90008abc:	b94b      	cbnz	r3, 90008ad2 <__swsetup_r+0x9a>
90008abe:	89a3      	ldrh	r3, [r4, #12]
90008ac0:	f403 7320 	and.w	r3, r3, #640	; 0x280
90008ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90008ac8:	d003      	beq.n	90008ad2 <__swsetup_r+0x9a>
90008aca:	4621      	mov	r1, r4
90008acc:	4630      	mov	r0, r6
90008ace:	f000 fa01 	bl	90008ed4 <__smakebuf_r>
90008ad2:	89a0      	ldrh	r0, [r4, #12]
90008ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90008ad8:	f010 0301 	ands.w	r3, r0, #1
90008adc:	d00a      	beq.n	90008af4 <__swsetup_r+0xbc>
90008ade:	2300      	movs	r3, #0
90008ae0:	60a3      	str	r3, [r4, #8]
90008ae2:	6963      	ldr	r3, [r4, #20]
90008ae4:	425b      	negs	r3, r3
90008ae6:	61a3      	str	r3, [r4, #24]
90008ae8:	6923      	ldr	r3, [r4, #16]
90008aea:	b943      	cbnz	r3, 90008afe <__swsetup_r+0xc6>
90008aec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90008af0:	d1ba      	bne.n	90008a68 <__swsetup_r+0x30>
90008af2:	bd70      	pop	{r4, r5, r6, pc}
90008af4:	0781      	lsls	r1, r0, #30
90008af6:	bf58      	it	pl
90008af8:	6963      	ldrpl	r3, [r4, #20]
90008afa:	60a3      	str	r3, [r4, #8]
90008afc:	e7f4      	b.n	90008ae8 <__swsetup_r+0xb0>
90008afe:	2000      	movs	r0, #0
90008b00:	e7f7      	b.n	90008af2 <__swsetup_r+0xba>
90008b02:	bf00      	nop
90008b04:	20000020 	.word	0x20000020
90008b08:	90041b2c 	.word	0x90041b2c
90008b0c:	90041b4c 	.word	0x90041b4c
90008b10:	90041b0c 	.word	0x90041b0c

90008b14 <__sflush_r>:
90008b14:	898a      	ldrh	r2, [r1, #12]
90008b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90008b1a:	4605      	mov	r5, r0
90008b1c:	0710      	lsls	r0, r2, #28
90008b1e:	460c      	mov	r4, r1
90008b20:	d458      	bmi.n	90008bd4 <__sflush_r+0xc0>
90008b22:	684b      	ldr	r3, [r1, #4]
90008b24:	2b00      	cmp	r3, #0
90008b26:	dc05      	bgt.n	90008b34 <__sflush_r+0x20>
90008b28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90008b2a:	2b00      	cmp	r3, #0
90008b2c:	dc02      	bgt.n	90008b34 <__sflush_r+0x20>
90008b2e:	2000      	movs	r0, #0
90008b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90008b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90008b36:	2e00      	cmp	r6, #0
90008b38:	d0f9      	beq.n	90008b2e <__sflush_r+0x1a>
90008b3a:	2300      	movs	r3, #0
90008b3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90008b40:	682f      	ldr	r7, [r5, #0]
90008b42:	602b      	str	r3, [r5, #0]
90008b44:	d032      	beq.n	90008bac <__sflush_r+0x98>
90008b46:	6d60      	ldr	r0, [r4, #84]	; 0x54
90008b48:	89a3      	ldrh	r3, [r4, #12]
90008b4a:	075a      	lsls	r2, r3, #29
90008b4c:	d505      	bpl.n	90008b5a <__sflush_r+0x46>
90008b4e:	6863      	ldr	r3, [r4, #4]
90008b50:	1ac0      	subs	r0, r0, r3
90008b52:	6b63      	ldr	r3, [r4, #52]	; 0x34
90008b54:	b10b      	cbz	r3, 90008b5a <__sflush_r+0x46>
90008b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
90008b58:	1ac0      	subs	r0, r0, r3
90008b5a:	2300      	movs	r3, #0
90008b5c:	4602      	mov	r2, r0
90008b5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90008b60:	6a21      	ldr	r1, [r4, #32]
90008b62:	4628      	mov	r0, r5
90008b64:	47b0      	blx	r6
90008b66:	1c43      	adds	r3, r0, #1
90008b68:	89a3      	ldrh	r3, [r4, #12]
90008b6a:	d106      	bne.n	90008b7a <__sflush_r+0x66>
90008b6c:	6829      	ldr	r1, [r5, #0]
90008b6e:	291d      	cmp	r1, #29
90008b70:	d82c      	bhi.n	90008bcc <__sflush_r+0xb8>
90008b72:	4a2a      	ldr	r2, [pc, #168]	; (90008c1c <__sflush_r+0x108>)
90008b74:	40ca      	lsrs	r2, r1
90008b76:	07d6      	lsls	r6, r2, #31
90008b78:	d528      	bpl.n	90008bcc <__sflush_r+0xb8>
90008b7a:	2200      	movs	r2, #0
90008b7c:	6062      	str	r2, [r4, #4]
90008b7e:	04d9      	lsls	r1, r3, #19
90008b80:	6922      	ldr	r2, [r4, #16]
90008b82:	6022      	str	r2, [r4, #0]
90008b84:	d504      	bpl.n	90008b90 <__sflush_r+0x7c>
90008b86:	1c42      	adds	r2, r0, #1
90008b88:	d101      	bne.n	90008b8e <__sflush_r+0x7a>
90008b8a:	682b      	ldr	r3, [r5, #0]
90008b8c:	b903      	cbnz	r3, 90008b90 <__sflush_r+0x7c>
90008b8e:	6560      	str	r0, [r4, #84]	; 0x54
90008b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
90008b92:	602f      	str	r7, [r5, #0]
90008b94:	2900      	cmp	r1, #0
90008b96:	d0ca      	beq.n	90008b2e <__sflush_r+0x1a>
90008b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
90008b9c:	4299      	cmp	r1, r3
90008b9e:	d002      	beq.n	90008ba6 <__sflush_r+0x92>
90008ba0:	4628      	mov	r0, r5
90008ba2:	f000 f9d7 	bl	90008f54 <_free_r>
90008ba6:	2000      	movs	r0, #0
90008ba8:	6360      	str	r0, [r4, #52]	; 0x34
90008baa:	e7c1      	b.n	90008b30 <__sflush_r+0x1c>
90008bac:	6a21      	ldr	r1, [r4, #32]
90008bae:	2301      	movs	r3, #1
90008bb0:	4628      	mov	r0, r5
90008bb2:	47b0      	blx	r6
90008bb4:	1c41      	adds	r1, r0, #1
90008bb6:	d1c7      	bne.n	90008b48 <__sflush_r+0x34>
90008bb8:	682b      	ldr	r3, [r5, #0]
90008bba:	2b00      	cmp	r3, #0
90008bbc:	d0c4      	beq.n	90008b48 <__sflush_r+0x34>
90008bbe:	2b1d      	cmp	r3, #29
90008bc0:	d001      	beq.n	90008bc6 <__sflush_r+0xb2>
90008bc2:	2b16      	cmp	r3, #22
90008bc4:	d101      	bne.n	90008bca <__sflush_r+0xb6>
90008bc6:	602f      	str	r7, [r5, #0]
90008bc8:	e7b1      	b.n	90008b2e <__sflush_r+0x1a>
90008bca:	89a3      	ldrh	r3, [r4, #12]
90008bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90008bd0:	81a3      	strh	r3, [r4, #12]
90008bd2:	e7ad      	b.n	90008b30 <__sflush_r+0x1c>
90008bd4:	690f      	ldr	r7, [r1, #16]
90008bd6:	2f00      	cmp	r7, #0
90008bd8:	d0a9      	beq.n	90008b2e <__sflush_r+0x1a>
90008bda:	0793      	lsls	r3, r2, #30
90008bdc:	680e      	ldr	r6, [r1, #0]
90008bde:	bf08      	it	eq
90008be0:	694b      	ldreq	r3, [r1, #20]
90008be2:	600f      	str	r7, [r1, #0]
90008be4:	bf18      	it	ne
90008be6:	2300      	movne	r3, #0
90008be8:	eba6 0807 	sub.w	r8, r6, r7
90008bec:	608b      	str	r3, [r1, #8]
90008bee:	f1b8 0f00 	cmp.w	r8, #0
90008bf2:	dd9c      	ble.n	90008b2e <__sflush_r+0x1a>
90008bf4:	6a21      	ldr	r1, [r4, #32]
90008bf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90008bf8:	4643      	mov	r3, r8
90008bfa:	463a      	mov	r2, r7
90008bfc:	4628      	mov	r0, r5
90008bfe:	47b0      	blx	r6
90008c00:	2800      	cmp	r0, #0
90008c02:	dc06      	bgt.n	90008c12 <__sflush_r+0xfe>
90008c04:	89a3      	ldrh	r3, [r4, #12]
90008c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90008c0a:	81a3      	strh	r3, [r4, #12]
90008c0c:	f04f 30ff 	mov.w	r0, #4294967295
90008c10:	e78e      	b.n	90008b30 <__sflush_r+0x1c>
90008c12:	4407      	add	r7, r0
90008c14:	eba8 0800 	sub.w	r8, r8, r0
90008c18:	e7e9      	b.n	90008bee <__sflush_r+0xda>
90008c1a:	bf00      	nop
90008c1c:	20400001 	.word	0x20400001

90008c20 <_fflush_r>:
90008c20:	b538      	push	{r3, r4, r5, lr}
90008c22:	690b      	ldr	r3, [r1, #16]
90008c24:	4605      	mov	r5, r0
90008c26:	460c      	mov	r4, r1
90008c28:	b913      	cbnz	r3, 90008c30 <_fflush_r+0x10>
90008c2a:	2500      	movs	r5, #0
90008c2c:	4628      	mov	r0, r5
90008c2e:	bd38      	pop	{r3, r4, r5, pc}
90008c30:	b118      	cbz	r0, 90008c3a <_fflush_r+0x1a>
90008c32:	6983      	ldr	r3, [r0, #24]
90008c34:	b90b      	cbnz	r3, 90008c3a <_fflush_r+0x1a>
90008c36:	f000 f887 	bl	90008d48 <__sinit>
90008c3a:	4b14      	ldr	r3, [pc, #80]	; (90008c8c <_fflush_r+0x6c>)
90008c3c:	429c      	cmp	r4, r3
90008c3e:	d11b      	bne.n	90008c78 <_fflush_r+0x58>
90008c40:	686c      	ldr	r4, [r5, #4]
90008c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90008c46:	2b00      	cmp	r3, #0
90008c48:	d0ef      	beq.n	90008c2a <_fflush_r+0xa>
90008c4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
90008c4c:	07d0      	lsls	r0, r2, #31
90008c4e:	d404      	bmi.n	90008c5a <_fflush_r+0x3a>
90008c50:	0599      	lsls	r1, r3, #22
90008c52:	d402      	bmi.n	90008c5a <_fflush_r+0x3a>
90008c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
90008c56:	f000 f915 	bl	90008e84 <__retarget_lock_acquire_recursive>
90008c5a:	4628      	mov	r0, r5
90008c5c:	4621      	mov	r1, r4
90008c5e:	f7ff ff59 	bl	90008b14 <__sflush_r>
90008c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
90008c64:	07da      	lsls	r2, r3, #31
90008c66:	4605      	mov	r5, r0
90008c68:	d4e0      	bmi.n	90008c2c <_fflush_r+0xc>
90008c6a:	89a3      	ldrh	r3, [r4, #12]
90008c6c:	059b      	lsls	r3, r3, #22
90008c6e:	d4dd      	bmi.n	90008c2c <_fflush_r+0xc>
90008c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
90008c72:	f000 f908 	bl	90008e86 <__retarget_lock_release_recursive>
90008c76:	e7d9      	b.n	90008c2c <_fflush_r+0xc>
90008c78:	4b05      	ldr	r3, [pc, #20]	; (90008c90 <_fflush_r+0x70>)
90008c7a:	429c      	cmp	r4, r3
90008c7c:	d101      	bne.n	90008c82 <_fflush_r+0x62>
90008c7e:	68ac      	ldr	r4, [r5, #8]
90008c80:	e7df      	b.n	90008c42 <_fflush_r+0x22>
90008c82:	4b04      	ldr	r3, [pc, #16]	; (90008c94 <_fflush_r+0x74>)
90008c84:	429c      	cmp	r4, r3
90008c86:	bf08      	it	eq
90008c88:	68ec      	ldreq	r4, [r5, #12]
90008c8a:	e7da      	b.n	90008c42 <_fflush_r+0x22>
90008c8c:	90041b2c 	.word	0x90041b2c
90008c90:	90041b4c 	.word	0x90041b4c
90008c94:	90041b0c 	.word	0x90041b0c

90008c98 <std>:
90008c98:	2300      	movs	r3, #0
90008c9a:	b510      	push	{r4, lr}
90008c9c:	4604      	mov	r4, r0
90008c9e:	e9c0 3300 	strd	r3, r3, [r0]
90008ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
90008ca6:	6083      	str	r3, [r0, #8]
90008ca8:	8181      	strh	r1, [r0, #12]
90008caa:	6643      	str	r3, [r0, #100]	; 0x64
90008cac:	81c2      	strh	r2, [r0, #14]
90008cae:	6183      	str	r3, [r0, #24]
90008cb0:	4619      	mov	r1, r3
90008cb2:	2208      	movs	r2, #8
90008cb4:	305c      	adds	r0, #92	; 0x5c
90008cb6:	f7ff fdef 	bl	90008898 <memset>
90008cba:	4b05      	ldr	r3, [pc, #20]	; (90008cd0 <std+0x38>)
90008cbc:	6263      	str	r3, [r4, #36]	; 0x24
90008cbe:	4b05      	ldr	r3, [pc, #20]	; (90008cd4 <std+0x3c>)
90008cc0:	62a3      	str	r3, [r4, #40]	; 0x28
90008cc2:	4b05      	ldr	r3, [pc, #20]	; (90008cd8 <std+0x40>)
90008cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
90008cc6:	4b05      	ldr	r3, [pc, #20]	; (90008cdc <std+0x44>)
90008cc8:	6224      	str	r4, [r4, #32]
90008cca:	6323      	str	r3, [r4, #48]	; 0x30
90008ccc:	bd10      	pop	{r4, pc}
90008cce:	bf00      	nop
90008cd0:	90009135 	.word	0x90009135
90008cd4:	90009157 	.word	0x90009157
90008cd8:	9000918f 	.word	0x9000918f
90008cdc:	900091b3 	.word	0x900091b3

90008ce0 <_cleanup_r>:
90008ce0:	4901      	ldr	r1, [pc, #4]	; (90008ce8 <_cleanup_r+0x8>)
90008ce2:	f000 b8af 	b.w	90008e44 <_fwalk_reent>
90008ce6:	bf00      	nop
90008ce8:	90008c21 	.word	0x90008c21

90008cec <__sfmoreglue>:
90008cec:	b570      	push	{r4, r5, r6, lr}
90008cee:	2268      	movs	r2, #104	; 0x68
90008cf0:	1e4d      	subs	r5, r1, #1
90008cf2:	4355      	muls	r5, r2
90008cf4:	460e      	mov	r6, r1
90008cf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
90008cfa:	f000 f997 	bl	9000902c <_malloc_r>
90008cfe:	4604      	mov	r4, r0
90008d00:	b140      	cbz	r0, 90008d14 <__sfmoreglue+0x28>
90008d02:	2100      	movs	r1, #0
90008d04:	e9c0 1600 	strd	r1, r6, [r0]
90008d08:	300c      	adds	r0, #12
90008d0a:	60a0      	str	r0, [r4, #8]
90008d0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
90008d10:	f7ff fdc2 	bl	90008898 <memset>
90008d14:	4620      	mov	r0, r4
90008d16:	bd70      	pop	{r4, r5, r6, pc}

90008d18 <__sfp_lock_acquire>:
90008d18:	4801      	ldr	r0, [pc, #4]	; (90008d20 <__sfp_lock_acquire+0x8>)
90008d1a:	f000 b8b3 	b.w	90008e84 <__retarget_lock_acquire_recursive>
90008d1e:	bf00      	nop
90008d20:	200003a5 	.word	0x200003a5

90008d24 <__sfp_lock_release>:
90008d24:	4801      	ldr	r0, [pc, #4]	; (90008d2c <__sfp_lock_release+0x8>)
90008d26:	f000 b8ae 	b.w	90008e86 <__retarget_lock_release_recursive>
90008d2a:	bf00      	nop
90008d2c:	200003a5 	.word	0x200003a5

90008d30 <__sinit_lock_acquire>:
90008d30:	4801      	ldr	r0, [pc, #4]	; (90008d38 <__sinit_lock_acquire+0x8>)
90008d32:	f000 b8a7 	b.w	90008e84 <__retarget_lock_acquire_recursive>
90008d36:	bf00      	nop
90008d38:	200003a6 	.word	0x200003a6

90008d3c <__sinit_lock_release>:
90008d3c:	4801      	ldr	r0, [pc, #4]	; (90008d44 <__sinit_lock_release+0x8>)
90008d3e:	f000 b8a2 	b.w	90008e86 <__retarget_lock_release_recursive>
90008d42:	bf00      	nop
90008d44:	200003a6 	.word	0x200003a6

90008d48 <__sinit>:
90008d48:	b510      	push	{r4, lr}
90008d4a:	4604      	mov	r4, r0
90008d4c:	f7ff fff0 	bl	90008d30 <__sinit_lock_acquire>
90008d50:	69a3      	ldr	r3, [r4, #24]
90008d52:	b11b      	cbz	r3, 90008d5c <__sinit+0x14>
90008d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90008d58:	f7ff bff0 	b.w	90008d3c <__sinit_lock_release>
90008d5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
90008d60:	6523      	str	r3, [r4, #80]	; 0x50
90008d62:	4b13      	ldr	r3, [pc, #76]	; (90008db0 <__sinit+0x68>)
90008d64:	4a13      	ldr	r2, [pc, #76]	; (90008db4 <__sinit+0x6c>)
90008d66:	681b      	ldr	r3, [r3, #0]
90008d68:	62a2      	str	r2, [r4, #40]	; 0x28
90008d6a:	42a3      	cmp	r3, r4
90008d6c:	bf04      	itt	eq
90008d6e:	2301      	moveq	r3, #1
90008d70:	61a3      	streq	r3, [r4, #24]
90008d72:	4620      	mov	r0, r4
90008d74:	f000 f820 	bl	90008db8 <__sfp>
90008d78:	6060      	str	r0, [r4, #4]
90008d7a:	4620      	mov	r0, r4
90008d7c:	f000 f81c 	bl	90008db8 <__sfp>
90008d80:	60a0      	str	r0, [r4, #8]
90008d82:	4620      	mov	r0, r4
90008d84:	f000 f818 	bl	90008db8 <__sfp>
90008d88:	2200      	movs	r2, #0
90008d8a:	60e0      	str	r0, [r4, #12]
90008d8c:	2104      	movs	r1, #4
90008d8e:	6860      	ldr	r0, [r4, #4]
90008d90:	f7ff ff82 	bl	90008c98 <std>
90008d94:	68a0      	ldr	r0, [r4, #8]
90008d96:	2201      	movs	r2, #1
90008d98:	2109      	movs	r1, #9
90008d9a:	f7ff ff7d 	bl	90008c98 <std>
90008d9e:	68e0      	ldr	r0, [r4, #12]
90008da0:	2202      	movs	r2, #2
90008da2:	2112      	movs	r1, #18
90008da4:	f7ff ff78 	bl	90008c98 <std>
90008da8:	2301      	movs	r3, #1
90008daa:	61a3      	str	r3, [r4, #24]
90008dac:	e7d2      	b.n	90008d54 <__sinit+0xc>
90008dae:	bf00      	nop
90008db0:	90041b08 	.word	0x90041b08
90008db4:	90008ce1 	.word	0x90008ce1

90008db8 <__sfp>:
90008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90008dba:	4607      	mov	r7, r0
90008dbc:	f7ff ffac 	bl	90008d18 <__sfp_lock_acquire>
90008dc0:	4b1e      	ldr	r3, [pc, #120]	; (90008e3c <__sfp+0x84>)
90008dc2:	681e      	ldr	r6, [r3, #0]
90008dc4:	69b3      	ldr	r3, [r6, #24]
90008dc6:	b913      	cbnz	r3, 90008dce <__sfp+0x16>
90008dc8:	4630      	mov	r0, r6
90008dca:	f7ff ffbd 	bl	90008d48 <__sinit>
90008dce:	3648      	adds	r6, #72	; 0x48
90008dd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
90008dd4:	3b01      	subs	r3, #1
90008dd6:	d503      	bpl.n	90008de0 <__sfp+0x28>
90008dd8:	6833      	ldr	r3, [r6, #0]
90008dda:	b30b      	cbz	r3, 90008e20 <__sfp+0x68>
90008ddc:	6836      	ldr	r6, [r6, #0]
90008dde:	e7f7      	b.n	90008dd0 <__sfp+0x18>
90008de0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
90008de4:	b9d5      	cbnz	r5, 90008e1c <__sfp+0x64>
90008de6:	4b16      	ldr	r3, [pc, #88]	; (90008e40 <__sfp+0x88>)
90008de8:	60e3      	str	r3, [r4, #12]
90008dea:	f104 0058 	add.w	r0, r4, #88	; 0x58
90008dee:	6665      	str	r5, [r4, #100]	; 0x64
90008df0:	f000 f847 	bl	90008e82 <__retarget_lock_init_recursive>
90008df4:	f7ff ff96 	bl	90008d24 <__sfp_lock_release>
90008df8:	e9c4 5501 	strd	r5, r5, [r4, #4]
90008dfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
90008e00:	6025      	str	r5, [r4, #0]
90008e02:	61a5      	str	r5, [r4, #24]
90008e04:	2208      	movs	r2, #8
90008e06:	4629      	mov	r1, r5
90008e08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
90008e0c:	f7ff fd44 	bl	90008898 <memset>
90008e10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90008e14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90008e18:	4620      	mov	r0, r4
90008e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90008e1c:	3468      	adds	r4, #104	; 0x68
90008e1e:	e7d9      	b.n	90008dd4 <__sfp+0x1c>
90008e20:	2104      	movs	r1, #4
90008e22:	4638      	mov	r0, r7
90008e24:	f7ff ff62 	bl	90008cec <__sfmoreglue>
90008e28:	4604      	mov	r4, r0
90008e2a:	6030      	str	r0, [r6, #0]
90008e2c:	2800      	cmp	r0, #0
90008e2e:	d1d5      	bne.n	90008ddc <__sfp+0x24>
90008e30:	f7ff ff78 	bl	90008d24 <__sfp_lock_release>
90008e34:	230c      	movs	r3, #12
90008e36:	603b      	str	r3, [r7, #0]
90008e38:	e7ee      	b.n	90008e18 <__sfp+0x60>
90008e3a:	bf00      	nop
90008e3c:	90041b08 	.word	0x90041b08
90008e40:	ffff0001 	.word	0xffff0001

90008e44 <_fwalk_reent>:
90008e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90008e48:	4606      	mov	r6, r0
90008e4a:	4688      	mov	r8, r1
90008e4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
90008e50:	2700      	movs	r7, #0
90008e52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90008e56:	f1b9 0901 	subs.w	r9, r9, #1
90008e5a:	d505      	bpl.n	90008e68 <_fwalk_reent+0x24>
90008e5c:	6824      	ldr	r4, [r4, #0]
90008e5e:	2c00      	cmp	r4, #0
90008e60:	d1f7      	bne.n	90008e52 <_fwalk_reent+0xe>
90008e62:	4638      	mov	r0, r7
90008e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90008e68:	89ab      	ldrh	r3, [r5, #12]
90008e6a:	2b01      	cmp	r3, #1
90008e6c:	d907      	bls.n	90008e7e <_fwalk_reent+0x3a>
90008e6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90008e72:	3301      	adds	r3, #1
90008e74:	d003      	beq.n	90008e7e <_fwalk_reent+0x3a>
90008e76:	4629      	mov	r1, r5
90008e78:	4630      	mov	r0, r6
90008e7a:	47c0      	blx	r8
90008e7c:	4307      	orrs	r7, r0
90008e7e:	3568      	adds	r5, #104	; 0x68
90008e80:	e7e9      	b.n	90008e56 <_fwalk_reent+0x12>

90008e82 <__retarget_lock_init_recursive>:
90008e82:	4770      	bx	lr

90008e84 <__retarget_lock_acquire_recursive>:
90008e84:	4770      	bx	lr

90008e86 <__retarget_lock_release_recursive>:
90008e86:	4770      	bx	lr

90008e88 <__swhatbuf_r>:
90008e88:	b570      	push	{r4, r5, r6, lr}
90008e8a:	460e      	mov	r6, r1
90008e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90008e90:	2900      	cmp	r1, #0
90008e92:	b096      	sub	sp, #88	; 0x58
90008e94:	4614      	mov	r4, r2
90008e96:	461d      	mov	r5, r3
90008e98:	da08      	bge.n	90008eac <__swhatbuf_r+0x24>
90008e9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
90008e9e:	2200      	movs	r2, #0
90008ea0:	602a      	str	r2, [r5, #0]
90008ea2:	061a      	lsls	r2, r3, #24
90008ea4:	d410      	bmi.n	90008ec8 <__swhatbuf_r+0x40>
90008ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
90008eaa:	e00e      	b.n	90008eca <__swhatbuf_r+0x42>
90008eac:	466a      	mov	r2, sp
90008eae:	f000 f9a7 	bl	90009200 <_fstat_r>
90008eb2:	2800      	cmp	r0, #0
90008eb4:	dbf1      	blt.n	90008e9a <__swhatbuf_r+0x12>
90008eb6:	9a01      	ldr	r2, [sp, #4]
90008eb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
90008ebc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90008ec0:	425a      	negs	r2, r3
90008ec2:	415a      	adcs	r2, r3
90008ec4:	602a      	str	r2, [r5, #0]
90008ec6:	e7ee      	b.n	90008ea6 <__swhatbuf_r+0x1e>
90008ec8:	2340      	movs	r3, #64	; 0x40
90008eca:	2000      	movs	r0, #0
90008ecc:	6023      	str	r3, [r4, #0]
90008ece:	b016      	add	sp, #88	; 0x58
90008ed0:	bd70      	pop	{r4, r5, r6, pc}
	...

90008ed4 <__smakebuf_r>:
90008ed4:	898b      	ldrh	r3, [r1, #12]
90008ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
90008ed8:	079d      	lsls	r5, r3, #30
90008eda:	4606      	mov	r6, r0
90008edc:	460c      	mov	r4, r1
90008ede:	d507      	bpl.n	90008ef0 <__smakebuf_r+0x1c>
90008ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
90008ee4:	6023      	str	r3, [r4, #0]
90008ee6:	6123      	str	r3, [r4, #16]
90008ee8:	2301      	movs	r3, #1
90008eea:	6163      	str	r3, [r4, #20]
90008eec:	b002      	add	sp, #8
90008eee:	bd70      	pop	{r4, r5, r6, pc}
90008ef0:	ab01      	add	r3, sp, #4
90008ef2:	466a      	mov	r2, sp
90008ef4:	f7ff ffc8 	bl	90008e88 <__swhatbuf_r>
90008ef8:	9900      	ldr	r1, [sp, #0]
90008efa:	4605      	mov	r5, r0
90008efc:	4630      	mov	r0, r6
90008efe:	f000 f895 	bl	9000902c <_malloc_r>
90008f02:	b948      	cbnz	r0, 90008f18 <__smakebuf_r+0x44>
90008f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90008f08:	059a      	lsls	r2, r3, #22
90008f0a:	d4ef      	bmi.n	90008eec <__smakebuf_r+0x18>
90008f0c:	f023 0303 	bic.w	r3, r3, #3
90008f10:	f043 0302 	orr.w	r3, r3, #2
90008f14:	81a3      	strh	r3, [r4, #12]
90008f16:	e7e3      	b.n	90008ee0 <__smakebuf_r+0xc>
90008f18:	4b0d      	ldr	r3, [pc, #52]	; (90008f50 <__smakebuf_r+0x7c>)
90008f1a:	62b3      	str	r3, [r6, #40]	; 0x28
90008f1c:	89a3      	ldrh	r3, [r4, #12]
90008f1e:	6020      	str	r0, [r4, #0]
90008f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90008f24:	81a3      	strh	r3, [r4, #12]
90008f26:	9b00      	ldr	r3, [sp, #0]
90008f28:	6163      	str	r3, [r4, #20]
90008f2a:	9b01      	ldr	r3, [sp, #4]
90008f2c:	6120      	str	r0, [r4, #16]
90008f2e:	b15b      	cbz	r3, 90008f48 <__smakebuf_r+0x74>
90008f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90008f34:	4630      	mov	r0, r6
90008f36:	f000 f975 	bl	90009224 <_isatty_r>
90008f3a:	b128      	cbz	r0, 90008f48 <__smakebuf_r+0x74>
90008f3c:	89a3      	ldrh	r3, [r4, #12]
90008f3e:	f023 0303 	bic.w	r3, r3, #3
90008f42:	f043 0301 	orr.w	r3, r3, #1
90008f46:	81a3      	strh	r3, [r4, #12]
90008f48:	89a0      	ldrh	r0, [r4, #12]
90008f4a:	4305      	orrs	r5, r0
90008f4c:	81a5      	strh	r5, [r4, #12]
90008f4e:	e7cd      	b.n	90008eec <__smakebuf_r+0x18>
90008f50:	90008ce1 	.word	0x90008ce1

90008f54 <_free_r>:
90008f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
90008f56:	2900      	cmp	r1, #0
90008f58:	d044      	beq.n	90008fe4 <_free_r+0x90>
90008f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
90008f5e:	9001      	str	r0, [sp, #4]
90008f60:	2b00      	cmp	r3, #0
90008f62:	f1a1 0404 	sub.w	r4, r1, #4
90008f66:	bfb8      	it	lt
90008f68:	18e4      	addlt	r4, r4, r3
90008f6a:	f000 f97d 	bl	90009268 <__malloc_lock>
90008f6e:	4a1e      	ldr	r2, [pc, #120]	; (90008fe8 <_free_r+0x94>)
90008f70:	9801      	ldr	r0, [sp, #4]
90008f72:	6813      	ldr	r3, [r2, #0]
90008f74:	b933      	cbnz	r3, 90008f84 <_free_r+0x30>
90008f76:	6063      	str	r3, [r4, #4]
90008f78:	6014      	str	r4, [r2, #0]
90008f7a:	b003      	add	sp, #12
90008f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90008f80:	f000 b978 	b.w	90009274 <__malloc_unlock>
90008f84:	42a3      	cmp	r3, r4
90008f86:	d908      	bls.n	90008f9a <_free_r+0x46>
90008f88:	6825      	ldr	r5, [r4, #0]
90008f8a:	1961      	adds	r1, r4, r5
90008f8c:	428b      	cmp	r3, r1
90008f8e:	bf01      	itttt	eq
90008f90:	6819      	ldreq	r1, [r3, #0]
90008f92:	685b      	ldreq	r3, [r3, #4]
90008f94:	1949      	addeq	r1, r1, r5
90008f96:	6021      	streq	r1, [r4, #0]
90008f98:	e7ed      	b.n	90008f76 <_free_r+0x22>
90008f9a:	461a      	mov	r2, r3
90008f9c:	685b      	ldr	r3, [r3, #4]
90008f9e:	b10b      	cbz	r3, 90008fa4 <_free_r+0x50>
90008fa0:	42a3      	cmp	r3, r4
90008fa2:	d9fa      	bls.n	90008f9a <_free_r+0x46>
90008fa4:	6811      	ldr	r1, [r2, #0]
90008fa6:	1855      	adds	r5, r2, r1
90008fa8:	42a5      	cmp	r5, r4
90008faa:	d10b      	bne.n	90008fc4 <_free_r+0x70>
90008fac:	6824      	ldr	r4, [r4, #0]
90008fae:	4421      	add	r1, r4
90008fb0:	1854      	adds	r4, r2, r1
90008fb2:	42a3      	cmp	r3, r4
90008fb4:	6011      	str	r1, [r2, #0]
90008fb6:	d1e0      	bne.n	90008f7a <_free_r+0x26>
90008fb8:	681c      	ldr	r4, [r3, #0]
90008fba:	685b      	ldr	r3, [r3, #4]
90008fbc:	6053      	str	r3, [r2, #4]
90008fbe:	4421      	add	r1, r4
90008fc0:	6011      	str	r1, [r2, #0]
90008fc2:	e7da      	b.n	90008f7a <_free_r+0x26>
90008fc4:	d902      	bls.n	90008fcc <_free_r+0x78>
90008fc6:	230c      	movs	r3, #12
90008fc8:	6003      	str	r3, [r0, #0]
90008fca:	e7d6      	b.n	90008f7a <_free_r+0x26>
90008fcc:	6825      	ldr	r5, [r4, #0]
90008fce:	1961      	adds	r1, r4, r5
90008fd0:	428b      	cmp	r3, r1
90008fd2:	bf04      	itt	eq
90008fd4:	6819      	ldreq	r1, [r3, #0]
90008fd6:	685b      	ldreq	r3, [r3, #4]
90008fd8:	6063      	str	r3, [r4, #4]
90008fda:	bf04      	itt	eq
90008fdc:	1949      	addeq	r1, r1, r5
90008fde:	6021      	streq	r1, [r4, #0]
90008fe0:	6054      	str	r4, [r2, #4]
90008fe2:	e7ca      	b.n	90008f7a <_free_r+0x26>
90008fe4:	b003      	add	sp, #12
90008fe6:	bd30      	pop	{r4, r5, pc}
90008fe8:	200003a8 	.word	0x200003a8

90008fec <sbrk_aligned>:
90008fec:	b570      	push	{r4, r5, r6, lr}
90008fee:	4e0e      	ldr	r6, [pc, #56]	; (90009028 <sbrk_aligned+0x3c>)
90008ff0:	460c      	mov	r4, r1
90008ff2:	6831      	ldr	r1, [r6, #0]
90008ff4:	4605      	mov	r5, r0
90008ff6:	b911      	cbnz	r1, 90008ffe <sbrk_aligned+0x12>
90008ff8:	f000 f88c 	bl	90009114 <_sbrk_r>
90008ffc:	6030      	str	r0, [r6, #0]
90008ffe:	4621      	mov	r1, r4
90009000:	4628      	mov	r0, r5
90009002:	f000 f887 	bl	90009114 <_sbrk_r>
90009006:	1c43      	adds	r3, r0, #1
90009008:	d00a      	beq.n	90009020 <sbrk_aligned+0x34>
9000900a:	1cc4      	adds	r4, r0, #3
9000900c:	f024 0403 	bic.w	r4, r4, #3
90009010:	42a0      	cmp	r0, r4
90009012:	d007      	beq.n	90009024 <sbrk_aligned+0x38>
90009014:	1a21      	subs	r1, r4, r0
90009016:	4628      	mov	r0, r5
90009018:	f000 f87c 	bl	90009114 <_sbrk_r>
9000901c:	3001      	adds	r0, #1
9000901e:	d101      	bne.n	90009024 <sbrk_aligned+0x38>
90009020:	f04f 34ff 	mov.w	r4, #4294967295
90009024:	4620      	mov	r0, r4
90009026:	bd70      	pop	{r4, r5, r6, pc}
90009028:	200003ac 	.word	0x200003ac

9000902c <_malloc_r>:
9000902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90009030:	1ccd      	adds	r5, r1, #3
90009032:	f025 0503 	bic.w	r5, r5, #3
90009036:	3508      	adds	r5, #8
90009038:	2d0c      	cmp	r5, #12
9000903a:	bf38      	it	cc
9000903c:	250c      	movcc	r5, #12
9000903e:	2d00      	cmp	r5, #0
90009040:	4607      	mov	r7, r0
90009042:	db01      	blt.n	90009048 <_malloc_r+0x1c>
90009044:	42a9      	cmp	r1, r5
90009046:	d905      	bls.n	90009054 <_malloc_r+0x28>
90009048:	230c      	movs	r3, #12
9000904a:	603b      	str	r3, [r7, #0]
9000904c:	2600      	movs	r6, #0
9000904e:	4630      	mov	r0, r6
90009050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90009054:	4e2e      	ldr	r6, [pc, #184]	; (90009110 <_malloc_r+0xe4>)
90009056:	f000 f907 	bl	90009268 <__malloc_lock>
9000905a:	6833      	ldr	r3, [r6, #0]
9000905c:	461c      	mov	r4, r3
9000905e:	bb34      	cbnz	r4, 900090ae <_malloc_r+0x82>
90009060:	4629      	mov	r1, r5
90009062:	4638      	mov	r0, r7
90009064:	f7ff ffc2 	bl	90008fec <sbrk_aligned>
90009068:	1c43      	adds	r3, r0, #1
9000906a:	4604      	mov	r4, r0
9000906c:	d14d      	bne.n	9000910a <_malloc_r+0xde>
9000906e:	6834      	ldr	r4, [r6, #0]
90009070:	4626      	mov	r6, r4
90009072:	2e00      	cmp	r6, #0
90009074:	d140      	bne.n	900090f8 <_malloc_r+0xcc>
90009076:	6823      	ldr	r3, [r4, #0]
90009078:	4631      	mov	r1, r6
9000907a:	4638      	mov	r0, r7
9000907c:	eb04 0803 	add.w	r8, r4, r3
90009080:	f000 f848 	bl	90009114 <_sbrk_r>
90009084:	4580      	cmp	r8, r0
90009086:	d13a      	bne.n	900090fe <_malloc_r+0xd2>
90009088:	6821      	ldr	r1, [r4, #0]
9000908a:	3503      	adds	r5, #3
9000908c:	1a6d      	subs	r5, r5, r1
9000908e:	f025 0503 	bic.w	r5, r5, #3
90009092:	3508      	adds	r5, #8
90009094:	2d0c      	cmp	r5, #12
90009096:	bf38      	it	cc
90009098:	250c      	movcc	r5, #12
9000909a:	4629      	mov	r1, r5
9000909c:	4638      	mov	r0, r7
9000909e:	f7ff ffa5 	bl	90008fec <sbrk_aligned>
900090a2:	3001      	adds	r0, #1
900090a4:	d02b      	beq.n	900090fe <_malloc_r+0xd2>
900090a6:	6823      	ldr	r3, [r4, #0]
900090a8:	442b      	add	r3, r5
900090aa:	6023      	str	r3, [r4, #0]
900090ac:	e00e      	b.n	900090cc <_malloc_r+0xa0>
900090ae:	6822      	ldr	r2, [r4, #0]
900090b0:	1b52      	subs	r2, r2, r5
900090b2:	d41e      	bmi.n	900090f2 <_malloc_r+0xc6>
900090b4:	2a0b      	cmp	r2, #11
900090b6:	d916      	bls.n	900090e6 <_malloc_r+0xba>
900090b8:	1961      	adds	r1, r4, r5
900090ba:	42a3      	cmp	r3, r4
900090bc:	6025      	str	r5, [r4, #0]
900090be:	bf18      	it	ne
900090c0:	6059      	strne	r1, [r3, #4]
900090c2:	6863      	ldr	r3, [r4, #4]
900090c4:	bf08      	it	eq
900090c6:	6031      	streq	r1, [r6, #0]
900090c8:	5162      	str	r2, [r4, r5]
900090ca:	604b      	str	r3, [r1, #4]
900090cc:	4638      	mov	r0, r7
900090ce:	f104 060b 	add.w	r6, r4, #11
900090d2:	f000 f8cf 	bl	90009274 <__malloc_unlock>
900090d6:	f026 0607 	bic.w	r6, r6, #7
900090da:	1d23      	adds	r3, r4, #4
900090dc:	1af2      	subs	r2, r6, r3
900090de:	d0b6      	beq.n	9000904e <_malloc_r+0x22>
900090e0:	1b9b      	subs	r3, r3, r6
900090e2:	50a3      	str	r3, [r4, r2]
900090e4:	e7b3      	b.n	9000904e <_malloc_r+0x22>
900090e6:	6862      	ldr	r2, [r4, #4]
900090e8:	42a3      	cmp	r3, r4
900090ea:	bf0c      	ite	eq
900090ec:	6032      	streq	r2, [r6, #0]
900090ee:	605a      	strne	r2, [r3, #4]
900090f0:	e7ec      	b.n	900090cc <_malloc_r+0xa0>
900090f2:	4623      	mov	r3, r4
900090f4:	6864      	ldr	r4, [r4, #4]
900090f6:	e7b2      	b.n	9000905e <_malloc_r+0x32>
900090f8:	4634      	mov	r4, r6
900090fa:	6876      	ldr	r6, [r6, #4]
900090fc:	e7b9      	b.n	90009072 <_malloc_r+0x46>
900090fe:	230c      	movs	r3, #12
90009100:	603b      	str	r3, [r7, #0]
90009102:	4638      	mov	r0, r7
90009104:	f000 f8b6 	bl	90009274 <__malloc_unlock>
90009108:	e7a1      	b.n	9000904e <_malloc_r+0x22>
9000910a:	6025      	str	r5, [r4, #0]
9000910c:	e7de      	b.n	900090cc <_malloc_r+0xa0>
9000910e:	bf00      	nop
90009110:	200003a8 	.word	0x200003a8

90009114 <_sbrk_r>:
90009114:	b538      	push	{r3, r4, r5, lr}
90009116:	4d06      	ldr	r5, [pc, #24]	; (90009130 <_sbrk_r+0x1c>)
90009118:	2300      	movs	r3, #0
9000911a:	4604      	mov	r4, r0
9000911c:	4608      	mov	r0, r1
9000911e:	602b      	str	r3, [r5, #0]
90009120:	f7f8 fd82 	bl	90001c28 <_sbrk>
90009124:	1c43      	adds	r3, r0, #1
90009126:	d102      	bne.n	9000912e <_sbrk_r+0x1a>
90009128:	682b      	ldr	r3, [r5, #0]
9000912a:	b103      	cbz	r3, 9000912e <_sbrk_r+0x1a>
9000912c:	6023      	str	r3, [r4, #0]
9000912e:	bd38      	pop	{r3, r4, r5, pc}
90009130:	200003b0 	.word	0x200003b0

90009134 <__sread>:
90009134:	b510      	push	{r4, lr}
90009136:	460c      	mov	r4, r1
90009138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000913c:	f000 f8a0 	bl	90009280 <_read_r>
90009140:	2800      	cmp	r0, #0
90009142:	bfab      	itete	ge
90009144:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90009146:	89a3      	ldrhlt	r3, [r4, #12]
90009148:	181b      	addge	r3, r3, r0
9000914a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9000914e:	bfac      	ite	ge
90009150:	6563      	strge	r3, [r4, #84]	; 0x54
90009152:	81a3      	strhlt	r3, [r4, #12]
90009154:	bd10      	pop	{r4, pc}

90009156 <__swrite>:
90009156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000915a:	461f      	mov	r7, r3
9000915c:	898b      	ldrh	r3, [r1, #12]
9000915e:	05db      	lsls	r3, r3, #23
90009160:	4605      	mov	r5, r0
90009162:	460c      	mov	r4, r1
90009164:	4616      	mov	r6, r2
90009166:	d505      	bpl.n	90009174 <__swrite+0x1e>
90009168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000916c:	2302      	movs	r3, #2
9000916e:	2200      	movs	r2, #0
90009170:	f000 f868 	bl	90009244 <_lseek_r>
90009174:	89a3      	ldrh	r3, [r4, #12]
90009176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000917a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000917e:	81a3      	strh	r3, [r4, #12]
90009180:	4632      	mov	r2, r6
90009182:	463b      	mov	r3, r7
90009184:	4628      	mov	r0, r5
90009186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000918a:	f000 b817 	b.w	900091bc <_write_r>

9000918e <__sseek>:
9000918e:	b510      	push	{r4, lr}
90009190:	460c      	mov	r4, r1
90009192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90009196:	f000 f855 	bl	90009244 <_lseek_r>
9000919a:	1c43      	adds	r3, r0, #1
9000919c:	89a3      	ldrh	r3, [r4, #12]
9000919e:	bf15      	itete	ne
900091a0:	6560      	strne	r0, [r4, #84]	; 0x54
900091a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
900091a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
900091aa:	81a3      	strheq	r3, [r4, #12]
900091ac:	bf18      	it	ne
900091ae:	81a3      	strhne	r3, [r4, #12]
900091b0:	bd10      	pop	{r4, pc}

900091b2 <__sclose>:
900091b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900091b6:	f000 b813 	b.w	900091e0 <_close_r>
	...

900091bc <_write_r>:
900091bc:	b538      	push	{r3, r4, r5, lr}
900091be:	4d07      	ldr	r5, [pc, #28]	; (900091dc <_write_r+0x20>)
900091c0:	4604      	mov	r4, r0
900091c2:	4608      	mov	r0, r1
900091c4:	4611      	mov	r1, r2
900091c6:	2200      	movs	r2, #0
900091c8:	602a      	str	r2, [r5, #0]
900091ca:	461a      	mov	r2, r3
900091cc:	f7f7 fa06 	bl	900005dc <_write>
900091d0:	1c43      	adds	r3, r0, #1
900091d2:	d102      	bne.n	900091da <_write_r+0x1e>
900091d4:	682b      	ldr	r3, [r5, #0]
900091d6:	b103      	cbz	r3, 900091da <_write_r+0x1e>
900091d8:	6023      	str	r3, [r4, #0]
900091da:	bd38      	pop	{r3, r4, r5, pc}
900091dc:	200003b0 	.word	0x200003b0

900091e0 <_close_r>:
900091e0:	b538      	push	{r3, r4, r5, lr}
900091e2:	4d06      	ldr	r5, [pc, #24]	; (900091fc <_close_r+0x1c>)
900091e4:	2300      	movs	r3, #0
900091e6:	4604      	mov	r4, r0
900091e8:	4608      	mov	r0, r1
900091ea:	602b      	str	r3, [r5, #0]
900091ec:	f7f8 fce7 	bl	90001bbe <_close>
900091f0:	1c43      	adds	r3, r0, #1
900091f2:	d102      	bne.n	900091fa <_close_r+0x1a>
900091f4:	682b      	ldr	r3, [r5, #0]
900091f6:	b103      	cbz	r3, 900091fa <_close_r+0x1a>
900091f8:	6023      	str	r3, [r4, #0]
900091fa:	bd38      	pop	{r3, r4, r5, pc}
900091fc:	200003b0 	.word	0x200003b0

90009200 <_fstat_r>:
90009200:	b538      	push	{r3, r4, r5, lr}
90009202:	4d07      	ldr	r5, [pc, #28]	; (90009220 <_fstat_r+0x20>)
90009204:	2300      	movs	r3, #0
90009206:	4604      	mov	r4, r0
90009208:	4608      	mov	r0, r1
9000920a:	4611      	mov	r1, r2
9000920c:	602b      	str	r3, [r5, #0]
9000920e:	f7f8 fce2 	bl	90001bd6 <_fstat>
90009212:	1c43      	adds	r3, r0, #1
90009214:	d102      	bne.n	9000921c <_fstat_r+0x1c>
90009216:	682b      	ldr	r3, [r5, #0]
90009218:	b103      	cbz	r3, 9000921c <_fstat_r+0x1c>
9000921a:	6023      	str	r3, [r4, #0]
9000921c:	bd38      	pop	{r3, r4, r5, pc}
9000921e:	bf00      	nop
90009220:	200003b0 	.word	0x200003b0

90009224 <_isatty_r>:
90009224:	b538      	push	{r3, r4, r5, lr}
90009226:	4d06      	ldr	r5, [pc, #24]	; (90009240 <_isatty_r+0x1c>)
90009228:	2300      	movs	r3, #0
9000922a:	4604      	mov	r4, r0
9000922c:	4608      	mov	r0, r1
9000922e:	602b      	str	r3, [r5, #0]
90009230:	f7f8 fce1 	bl	90001bf6 <_isatty>
90009234:	1c43      	adds	r3, r0, #1
90009236:	d102      	bne.n	9000923e <_isatty_r+0x1a>
90009238:	682b      	ldr	r3, [r5, #0]
9000923a:	b103      	cbz	r3, 9000923e <_isatty_r+0x1a>
9000923c:	6023      	str	r3, [r4, #0]
9000923e:	bd38      	pop	{r3, r4, r5, pc}
90009240:	200003b0 	.word	0x200003b0

90009244 <_lseek_r>:
90009244:	b538      	push	{r3, r4, r5, lr}
90009246:	4d07      	ldr	r5, [pc, #28]	; (90009264 <_lseek_r+0x20>)
90009248:	4604      	mov	r4, r0
9000924a:	4608      	mov	r0, r1
9000924c:	4611      	mov	r1, r2
9000924e:	2200      	movs	r2, #0
90009250:	602a      	str	r2, [r5, #0]
90009252:	461a      	mov	r2, r3
90009254:	f7f8 fcda 	bl	90001c0c <_lseek>
90009258:	1c43      	adds	r3, r0, #1
9000925a:	d102      	bne.n	90009262 <_lseek_r+0x1e>
9000925c:	682b      	ldr	r3, [r5, #0]
9000925e:	b103      	cbz	r3, 90009262 <_lseek_r+0x1e>
90009260:	6023      	str	r3, [r4, #0]
90009262:	bd38      	pop	{r3, r4, r5, pc}
90009264:	200003b0 	.word	0x200003b0

90009268 <__malloc_lock>:
90009268:	4801      	ldr	r0, [pc, #4]	; (90009270 <__malloc_lock+0x8>)
9000926a:	f7ff be0b 	b.w	90008e84 <__retarget_lock_acquire_recursive>
9000926e:	bf00      	nop
90009270:	200003a4 	.word	0x200003a4

90009274 <__malloc_unlock>:
90009274:	4801      	ldr	r0, [pc, #4]	; (9000927c <__malloc_unlock+0x8>)
90009276:	f7ff be06 	b.w	90008e86 <__retarget_lock_release_recursive>
9000927a:	bf00      	nop
9000927c:	200003a4 	.word	0x200003a4

90009280 <_read_r>:
90009280:	b538      	push	{r3, r4, r5, lr}
90009282:	4d07      	ldr	r5, [pc, #28]	; (900092a0 <_read_r+0x20>)
90009284:	4604      	mov	r4, r0
90009286:	4608      	mov	r0, r1
90009288:	4611      	mov	r1, r2
9000928a:	2200      	movs	r2, #0
9000928c:	602a      	str	r2, [r5, #0]
9000928e:	461a      	mov	r2, r3
90009290:	f7f8 fc78 	bl	90001b84 <_read>
90009294:	1c43      	adds	r3, r0, #1
90009296:	d102      	bne.n	9000929e <_read_r+0x1e>
90009298:	682b      	ldr	r3, [r5, #0]
9000929a:	b103      	cbz	r3, 9000929e <_read_r+0x1e>
9000929c:	6023      	str	r3, [r4, #0]
9000929e:	bd38      	pop	{r3, r4, r5, pc}
900092a0:	200003b0 	.word	0x200003b0

900092a4 <_init>:
900092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900092a6:	bf00      	nop
900092a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
900092aa:	bc08      	pop	{r3}
900092ac:	469e      	mov	lr, r3
900092ae:	4770      	bx	lr

900092b0 <_fini>:
900092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900092b2:	bf00      	nop
900092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
900092b6:	bc08      	pop	{r3}
900092b8:	469e      	mov	lr, r3
900092ba:	4770      	bx	lr
